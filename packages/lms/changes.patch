diff --git a/.node-version b/.node-version
new file mode 100644
index 0000000..0ff3804
--- /dev/null
+++ b/.node-version
@@ -0,0 +1 @@
+16.16.0
\ No newline at end of file
diff --git a/.vscode/settings.json b/.vscode/settings.json
new file mode 100644
index 0000000..1dfcb7c
--- /dev/null
+++ b/.vscode/settings.json
@@ -0,0 +1,17 @@
+{
+    "cSpell.words": [
+        "Babich",
+        "flowline",
+        "Flowlines",
+        "iframe",
+        "Invision",
+        "Iott",
+        "Kadavy",
+        "Mads",
+        "Malamed",
+        "Pexels",
+        "pinchofyum",
+        "Velarde",
+        "wireframing"
+    ]
+}
\ No newline at end of file
diff --git a/package-lock.json b/package-lock.json
index 12db53d..a88707b 100644
--- a/package-lock.json
+++ b/package-lock.json
@@ -3211,6 +3211,150 @@
         "@codemirror/view": "^6.0.3"
       }
     },
+    "node_modules/@rollup/plugin-commonjs": {
+      "version": "25.0.2",
+      "resolved": "https://registry.npmjs.org/@rollup/plugin-commonjs/-/plugin-commonjs-25.0.2.tgz",
+      "integrity": "sha512-NGTwaJxIO0klMs+WSFFtBP7b9TdTJ3K76HZkewT8/+yHzMiUGVQgaPtLQxNVYIgT5F7lxkEyVID+yS3K7bhCow==",
+      "dev": true,
+      "dependencies": {
+        "@rollup/pluginutils": "^5.0.1",
+        "commondir": "^1.0.1",
+        "estree-walker": "^2.0.2",
+        "glob": "^8.0.3",
+        "is-reference": "1.2.1",
+        "magic-string": "^0.27.0"
+      },
+      "engines": {
+        "node": ">=14.0.0"
+      },
+      "peerDependencies": {
+        "rollup": "^2.68.0||^3.0.0"
+      },
+      "peerDependenciesMeta": {
+        "rollup": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/@rollup/plugin-commonjs/node_modules/brace-expansion": {
+      "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-2.0.1.tgz",
+      "integrity": "sha512-XnAIvQ8eM+kC6aULx6wuQiwVsnzsi9d3WxzV3FpWTGA19F621kwdbsAcFKXgKUHZWsy+mY6iL1sHTxWEFCytDA==",
+      "dev": true,
+      "dependencies": {
+        "balanced-match": "^1.0.0"
+      }
+    },
+    "node_modules/@rollup/plugin-commonjs/node_modules/glob": {
+      "version": "8.1.0",
+      "resolved": "https://registry.npmjs.org/glob/-/glob-8.1.0.tgz",
+      "integrity": "sha512-r8hpEjiQEYlF2QU0df3dS+nxxSIreXQS1qRhMJM0Q5NDdR386C7jb7Hwwod8Fgiuex+k0GFjgft18yvxm5XoCQ==",
+      "dev": true,
+      "dependencies": {
+        "fs.realpath": "^1.0.0",
+        "inflight": "^1.0.4",
+        "inherits": "2",
+        "minimatch": "^5.0.1",
+        "once": "^1.3.0"
+      },
+      "engines": {
+        "node": ">=12"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/isaacs"
+      }
+    },
+    "node_modules/@rollup/plugin-commonjs/node_modules/magic-string": {
+      "version": "0.27.0",
+      "resolved": "https://registry.npmjs.org/magic-string/-/magic-string-0.27.0.tgz",
+      "integrity": "sha512-8UnnX2PeRAPZuN12svgR9j7M1uWMovg/CEnIwIG0LFkXSJJe4PdfUGiTGl8V9bsBHFUtfVINcSyYxd7q+kx9fA==",
+      "dev": true,
+      "dependencies": {
+        "@jridgewell/sourcemap-codec": "^1.4.13"
+      },
+      "engines": {
+        "node": ">=12"
+      }
+    },
+    "node_modules/@rollup/plugin-commonjs/node_modules/minimatch": {
+      "version": "5.1.6",
+      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-5.1.6.tgz",
+      "integrity": "sha512-lKwV/1brpG6mBUFHtb7NUmtABCb2WZZmm2wNiOA5hAb8VdCS4B3dtMWyvcoViccwAW/COERjXLt0zP1zXUN26g==",
+      "dev": true,
+      "dependencies": {
+        "brace-expansion": "^2.0.1"
+      },
+      "engines": {
+        "node": ">=10"
+      }
+    },
+    "node_modules/@rollup/plugin-json": {
+      "version": "6.0.0",
+      "resolved": "https://registry.npmjs.org/@rollup/plugin-json/-/plugin-json-6.0.0.tgz",
+      "integrity": "sha512-i/4C5Jrdr1XUarRhVu27EEwjt4GObltD7c+MkCIpO2QIbojw8MUs+CCTqOphQi3Qtg1FLmYt+l+6YeoIf51J7w==",
+      "dev": true,
+      "dependencies": {
+        "@rollup/pluginutils": "^5.0.1"
+      },
+      "engines": {
+        "node": ">=14.0.0"
+      },
+      "peerDependencies": {
+        "rollup": "^1.20.0||^2.0.0||^3.0.0"
+      },
+      "peerDependenciesMeta": {
+        "rollup": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/@rollup/plugin-node-resolve": {
+      "version": "15.1.0",
+      "resolved": "https://registry.npmjs.org/@rollup/plugin-node-resolve/-/plugin-node-resolve-15.1.0.tgz",
+      "integrity": "sha512-xeZHCgsiZ9pzYVgAo9580eCGqwh/XCEUM9q6iQfGNocjgkufHAqC3exA+45URvhiYV8sBF9RlBai650eNs7AsA==",
+      "dev": true,
+      "dependencies": {
+        "@rollup/pluginutils": "^5.0.1",
+        "@types/resolve": "1.20.2",
+        "deepmerge": "^4.2.2",
+        "is-builtin-module": "^3.2.1",
+        "is-module": "^1.0.0",
+        "resolve": "^1.22.1"
+      },
+      "engines": {
+        "node": ">=14.0.0"
+      },
+      "peerDependencies": {
+        "rollup": "^2.78.0||^3.0.0"
+      },
+      "peerDependenciesMeta": {
+        "rollup": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/@rollup/pluginutils": {
+      "version": "5.0.2",
+      "resolved": "https://registry.npmjs.org/@rollup/pluginutils/-/pluginutils-5.0.2.tgz",
+      "integrity": "sha512-pTd9rIsP92h+B6wWwFbW8RkZv4hiR/xKsqre4SIuAOaOEQRxi0lqLke9k2/7WegC85GgUs9pjmOjCUi3In4vwA==",
+      "dev": true,
+      "dependencies": {
+        "@types/estree": "^1.0.0",
+        "estree-walker": "^2.0.2",
+        "picomatch": "^2.3.1"
+      },
+      "engines": {
+        "node": ">=14.0.0"
+      },
+      "peerDependencies": {
+        "rollup": "^1.20.0||^2.0.0||^3.0.0"
+      },
+      "peerDependenciesMeta": {
+        "rollup": {
+          "optional": true
+        }
+      }
+    },
     "node_modules/@sigstore/protobuf-specs": {
       "version": "0.1.0",
       "resolved": "https://registry.npmjs.org/@sigstore/protobuf-specs/-/protobuf-specs-0.1.0.tgz",
@@ -3259,6 +3403,21 @@
         "@sveltejs/kit": "^1.0.0"
       }
     },
+    "node_modules/@sveltejs/adapter-node": {
+      "version": "1.3.1",
+      "resolved": "https://registry.npmjs.org/@sveltejs/adapter-node/-/adapter-node-1.3.1.tgz",
+      "integrity": "sha512-A0VgRQDCDPzdLNoiAbcOxGw4zT1Mc+n1LwT1OmO350R7WxrEqdMUChPPOd1iMfIDWlP4ie6E2d/WQf5es2d4Zw==",
+      "dev": true,
+      "dependencies": {
+        "@rollup/plugin-commonjs": "^25.0.0",
+        "@rollup/plugin-json": "^6.0.0",
+        "@rollup/plugin-node-resolve": "^15.0.1",
+        "rollup": "^3.7.0"
+      },
+      "peerDependencies": {
+        "@sveltejs/kit": "^1.0.0"
+      }
+    },
     "node_modules/@sveltejs/kit": {
       "version": "1.15.2",
       "hasInstallScript": true,
@@ -3498,6 +3657,12 @@
       "integrity": "sha512-amrLbRqTU9bXMCc6uX0sWpxsQzRIo9z6MJPkH1pkez/qOxuqSZVuryJAWoBRq94CeG8JxY+VK4Le9HtjQR5T9A==",
       "dev": true
     },
+    "node_modules/@types/estree": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/@types/estree/-/estree-1.0.1.tgz",
+      "integrity": "sha512-LG4opVs2ANWZ1TJoKc937iMmNstM/d0ae1vNbnBvBhqCSezgVUOzcLCqbI5elV8Vy6WKwKjaqR+zO9VKirBBCA==",
+      "dev": true
+    },
     "node_modules/@types/fs-extra": {
       "version": "11.0.1",
       "dev": true,
@@ -3618,6 +3783,12 @@
       "version": "2.0.6",
       "license": "MIT"
     },
+    "node_modules/@types/resolve": {
+      "version": "1.20.2",
+      "resolved": "https://registry.npmjs.org/@types/resolve/-/resolve-1.20.2.tgz",
+      "integrity": "sha512-60BCwRFOZCQhDncwQdxxeOEEkbc5dIMccYLwbxsS4TUNeVECQ/pBJ0j09mrHOl/JJvpRPGwO9SvE4nR2Nb/a4Q==",
+      "dev": true
+    },
     "node_modules/@types/semver": {
       "version": "7.3.13",
       "license": "MIT"
@@ -4494,6 +4665,18 @@
       "dev": true,
       "license": "MIT"
     },
+    "node_modules/builtin-modules": {
+      "version": "3.3.0",
+      "resolved": "https://registry.npmjs.org/builtin-modules/-/builtin-modules-3.3.0.tgz",
+      "integrity": "sha512-zhaCDicdLuWN5UbN5IMnFqNMhNfo919sH85y2/ea+5Yg9TsTkeZxpL+JLbp6cgYFS4sRLp3YV4S6yDuqVWHYOw==",
+      "dev": true,
+      "engines": {
+        "node": ">=6"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
     "node_modules/builtins": {
       "version": "5.0.1",
       "resolved": "https://registry.npmjs.org/builtins/-/builtins-5.0.1.tgz",
@@ -4984,6 +5167,12 @@
       "integrity": "sha512-L3sHRo1pXXEqX8VU28kfgUY+YGsk09hPqZiZmLacNib6XNTCM8ubYeT7ryXQw8asB1sKgcU5lkB7ONug08aB8w==",
       "dev": true
     },
+    "node_modules/commondir": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/commondir/-/commondir-1.0.1.tgz",
+      "integrity": "sha512-W9pAhw0ja1Edb5GVdIF1mjZw/ASI0AlShXM83UUGe2DVr5TdAPEA1OA8m/g8zWp9x6On7gqufY+FatDbC3MDQg==",
+      "dev": true
+    },
     "node_modules/compare-func": {
       "version": "2.0.0",
       "resolved": "https://registry.npmjs.org/compare-func/-/compare-func-2.0.0.tgz",
@@ -5677,6 +5866,18 @@
         "node": ">=8.6"
       }
     },
+    "node_modules/entities": {
+      "version": "3.0.1",
+      "resolved": "https://registry.npmjs.org/entities/-/entities-3.0.1.tgz",
+      "integrity": "sha512-WiyBqoomrwMdFG1e0kqvASYfnlb0lp8M5o5Fw2OFq1hNZxxcNk8Ik0Xm7LxzBhuidnZB/UtBqVCgUz3kBOP51Q==",
+      "dev": true,
+      "engines": {
+        "node": ">=0.12"
+      },
+      "funding": {
+        "url": "https://github.com/fb55/entities?sponsor=1"
+      }
+    },
     "node_modules/env-paths": {
       "version": "2.2.1",
       "resolved": "https://registry.npmjs.org/env-paths/-/env-paths-2.2.1.tgz",
@@ -5951,6 +6152,12 @@
         "node": ">=4.0"
       }
     },
+    "node_modules/estree-walker": {
+      "version": "2.0.2",
+      "resolved": "https://registry.npmjs.org/estree-walker/-/estree-walker-2.0.2.tgz",
+      "integrity": "sha512-Rfkk/Mp/DL7JVje3u18FxFujQlTNR2q6QfMSMB7AvCBx91NGj/ba3kCfza0f6dVDbw7YlRf/nDrn7pQrCCyQ/w==",
+      "dev": true
+    },
     "node_modules/esutils": {
       "version": "2.0.3",
       "license": "BSD-2-Clause",
@@ -7260,6 +7467,21 @@
         "node": ">=4"
       }
     },
+    "node_modules/is-builtin-module": {
+      "version": "3.2.1",
+      "resolved": "https://registry.npmjs.org/is-builtin-module/-/is-builtin-module-3.2.1.tgz",
+      "integrity": "sha512-BSLE3HnV2syZ0FK0iMA/yUGplUeMmNz4AW5fnTunbCIqZi4vG3WjJT9FHMy5D69xmAYBHXQhJdALdpwVxV501A==",
+      "dev": true,
+      "dependencies": {
+        "builtin-modules": "^3.3.0"
+      },
+      "engines": {
+        "node": ">=6"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
     "node_modules/is-ci": {
       "version": "2.0.0",
       "resolved": "https://registry.npmjs.org/is-ci/-/is-ci-2.0.0.tgz",
@@ -7351,6 +7573,12 @@
       "integrity": "sha512-z7CMFGNrENq5iFB9Bqo64Xk6Y9sg+epq1myIcdHaGnbMTYOxvzsEtdYqQUylB7LxfkvgrrjP32T6Ywciio9UIQ==",
       "dev": true
     },
+    "node_modules/is-module": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/is-module/-/is-module-1.0.0.tgz",
+      "integrity": "sha512-51ypPSPCoTEIN9dy5Oy+h4pShgJmPCygKfyRCISBI+JoWT/2oJvK8QPxmwv7b/p239jXrm9M1mlQbyKJ5A152g==",
+      "dev": true
+    },
     "node_modules/is-number": {
       "version": "7.0.0",
       "license": "MIT",
@@ -7399,6 +7627,15 @@
         "node": ">=0.10.0"
       }
     },
+    "node_modules/is-reference": {
+      "version": "1.2.1",
+      "resolved": "https://registry.npmjs.org/is-reference/-/is-reference-1.2.1.tgz",
+      "integrity": "sha512-U82MsXXiFIrjCK4otLT+o2NA2Cd2g5MLoOVXUZjIOhLurrRxpEXzI8O0KZHr3IjLvlAH1kTPYSuqer5T9ZVBKQ==",
+      "dev": true,
+      "dependencies": {
+        "@types/estree": "*"
+      }
+    },
     "node_modules/is-ssh": {
       "version": "1.4.0",
       "resolved": "https://registry.npmjs.org/is-ssh/-/is-ssh-1.4.0.tgz",
@@ -9008,6 +9245,15 @@
         "node": "^12.20.0 || ^14.13.1 || >=16.0.0"
       }
     },
+    "node_modules/linkify-it": {
+      "version": "4.0.1",
+      "resolved": "https://registry.npmjs.org/linkify-it/-/linkify-it-4.0.1.tgz",
+      "integrity": "sha512-C7bfi1UZmoj8+PQx22XyeXCuBlokoyWQL5pWSP+EI6nzRylyThouddufc2c1NDIcP9k5agmN9fLpA7VNJfIiqw==",
+      "dev": true,
+      "dependencies": {
+        "uc.micro": "^1.0.1"
+      }
+    },
     "node_modules/lint-staged": {
       "version": "13.2.2",
       "dev": true,
@@ -9614,6 +9860,22 @@
         "url": "https://github.com/sponsors/sindresorhus"
       }
     },
+    "node_modules/markdown-it": {
+      "version": "13.0.1",
+      "resolved": "https://registry.npmjs.org/markdown-it/-/markdown-it-13.0.1.tgz",
+      "integrity": "sha512-lTlxriVoy2criHP0JKRhO2VDG9c2ypWCsT237eDiLqi09rmbKoUetyGHq2uOIRoRS//kfoJckS0eUzzkDR+k2Q==",
+      "dev": true,
+      "dependencies": {
+        "argparse": "^2.0.1",
+        "entities": "~3.0.1",
+        "linkify-it": "^4.0.1",
+        "mdurl": "^1.0.1",
+        "uc.micro": "^1.0.5"
+      },
+      "bin": {
+        "markdown-it": "bin/markdown-it.js"
+      }
+    },
     "node_modules/markdown-table": {
       "version": "3.0.3",
       "license": "MIT",
@@ -9622,6 +9884,111 @@
         "url": "https://github.com/sponsors/wooorm"
       }
     },
+    "node_modules/markdownlint": {
+      "version": "0.29.0",
+      "resolved": "https://registry.npmjs.org/markdownlint/-/markdownlint-0.29.0.tgz",
+      "integrity": "sha512-ASAzqpODstu/Qsk0xW5BPgWnK/qjpBQ4e7IpsSvvFXcfYIjanLTdwFRJK1SIEEh0fGSMKXcJf/qhaZYHyME0wA==",
+      "dev": true,
+      "dependencies": {
+        "markdown-it": "13.0.1",
+        "markdownlint-micromark": "0.1.5"
+      },
+      "engines": {
+        "node": ">=16"
+      }
+    },
+    "node_modules/markdownlint-cli2": {
+      "version": "0.8.1",
+      "resolved": "https://registry.npmjs.org/markdownlint-cli2/-/markdownlint-cli2-0.8.1.tgz",
+      "integrity": "sha512-y0Siwt+RApKxSSb0CT9p7z1DcAO+ncjrB9IpC/jflJRIet4namCFmxLTbfBBQdPF6EntPk5yyXKe7vcoPGlnXw==",
+      "dev": true,
+      "dependencies": {
+        "globby": "13.1.4",
+        "markdownlint": "0.29.0",
+        "markdownlint-cli2-formatter-default": "0.0.4",
+        "micromatch": "4.0.5",
+        "strip-json-comments": "5.0.0",
+        "yaml": "2.3.1"
+      },
+      "bin": {
+        "markdownlint-cli2": "markdownlint-cli2.js",
+        "markdownlint-cli2-config": "markdownlint-cli2-config.js",
+        "markdownlint-cli2-fix": "markdownlint-cli2-fix.js"
+      },
+      "engines": {
+        "node": ">=16"
+      }
+    },
+    "node_modules/markdownlint-cli2-formatter-default": {
+      "version": "0.0.4",
+      "resolved": "https://registry.npmjs.org/markdownlint-cli2-formatter-default/-/markdownlint-cli2-formatter-default-0.0.4.tgz",
+      "integrity": "sha512-xm2rM0E+sWgjpPn1EesPXx5hIyrN2ddUnUwnbCsD/ONxYtw3PX6LydvdH6dciWAoFDpwzbHM1TO7uHfcMd6IYg==",
+      "dev": true,
+      "peerDependencies": {
+        "markdownlint-cli2": ">=0.0.4"
+      }
+    },
+    "node_modules/markdownlint-cli2/node_modules/globby": {
+      "version": "13.1.4",
+      "resolved": "https://registry.npmjs.org/globby/-/globby-13.1.4.tgz",
+      "integrity": "sha512-iui/IiiW+QrJ1X1hKH5qwlMQyv34wJAYwH1vrf8b9kBA4sNiif3gKsMHa+BrdnOpEudWjpotfa7LrTzB1ERS/g==",
+      "dev": true,
+      "dependencies": {
+        "dir-glob": "^3.0.1",
+        "fast-glob": "^3.2.11",
+        "ignore": "^5.2.0",
+        "merge2": "^1.4.1",
+        "slash": "^4.0.0"
+      },
+      "engines": {
+        "node": "^12.20.0 || ^14.13.1 || >=16.0.0"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/markdownlint-cli2/node_modules/slash": {
+      "version": "4.0.0",
+      "resolved": "https://registry.npmjs.org/slash/-/slash-4.0.0.tgz",
+      "integrity": "sha512-3dOsAHXXUkQTpOYcoAxLIorMTp4gIQr5IW3iVb7A7lFIp0VHhnynm9izx6TssdrIcVIESAlVjtnO2K8bg+Coew==",
+      "dev": true,
+      "engines": {
+        "node": ">=12"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/markdownlint-cli2/node_modules/strip-json-comments": {
+      "version": "5.0.0",
+      "resolved": "https://registry.npmjs.org/strip-json-comments/-/strip-json-comments-5.0.0.tgz",
+      "integrity": "sha512-V1LGY4UUo0jgwC+ELQ2BNWfPa17TIuwBLg+j1AA/9RPzKINl1lhxVEu2r+ZTTO8aetIsUzE5Qj6LMSBkoGYKKw==",
+      "dev": true,
+      "engines": {
+        "node": ">=14.16"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/markdownlint-cli2/node_modules/yaml": {
+      "version": "2.3.1",
+      "resolved": "https://registry.npmjs.org/yaml/-/yaml-2.3.1.tgz",
+      "integrity": "sha512-2eHWfjaoXgTBC2jNM1LRef62VQa0umtvRiDSk6HSzW7RvS5YtkabJrwYLLEKWBc8a5U2PTSCs+dJjUTJdlHsWQ==",
+      "dev": true,
+      "engines": {
+        "node": ">= 14"
+      }
+    },
+    "node_modules/markdownlint-micromark": {
+      "version": "0.1.5",
+      "resolved": "https://registry.npmjs.org/markdownlint-micromark/-/markdownlint-micromark-0.1.5.tgz",
+      "integrity": "sha512-HvofNU4QCvfUCWnocQP1IAWaqop5wpWrB0mKB6SSh0fcpV0PdmQNS6tdUuFew1utpYlUvYYzz84oDkrD76GB9A==",
+      "dev": true,
+      "engines": {
+        "node": ">=16"
+      }
+    },
     "node_modules/marked": {
       "version": "4.3.0",
       "license": "MIT",
@@ -9825,6 +10192,12 @@
         "svelte": "3.x"
       }
     },
+    "node_modules/mdurl": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/mdurl/-/mdurl-1.0.1.tgz",
+      "integrity": "sha512-/sKlQJCBYVY9Ers9hqzKou4H6V5UWc/M59TH2dvkt+84itfnq7uFOMLpOiOS4ujvHP4etln18fmIxA5R5fll0g==",
+      "dev": true
+    },
     "node_modules/meow": {
       "version": "8.1.2",
       "resolved": "https://registry.npmjs.org/meow/-/meow-8.1.2.tgz",
@@ -14960,6 +15333,12 @@
         "node": ">=12.20"
       }
     },
+    "node_modules/uc.micro": {
+      "version": "1.0.6",
+      "resolved": "https://registry.npmjs.org/uc.micro/-/uc.micro-1.0.6.tgz",
+      "integrity": "sha512-8Y75pvTYkLJW2hWQHXxoqRgV7qb9B+9vFEtidML+7koHUFapnVJAZ6cKs+Qjz5Aw3aZWHMC6u0wJE3At+nSGwA==",
+      "dev": true
+    },
     "node_modules/uglify-js": {
       "version": "3.17.4",
       "resolved": "https://registry.npmjs.org/uglify-js/-/uglify-js-3.17.4.tgz",
@@ -15696,6 +16075,7 @@
     "packages/cli": {
       "name": "@mollify/cli",
       "version": "0.2.11",
+      "hasInstallScript": true,
       "license": "GPL",
       "dependencies": {
         "@mollify/types": "^0.2.11",
@@ -15729,7 +16109,7 @@
         "ts-node-dev": "^2.0.0"
       },
       "engines": {
-        "node": ">=14.0.0"
+        "node": ">=16.0.0"
       }
     },
     "packages/cli/node_modules/cliui": {
@@ -15788,7 +16168,7 @@
     },
     "packages/docs": {
       "name": "@mollify/docs",
-      "version": "0.2.1",
+      "version": "0.2.11",
       "license": "GPL"
     },
     "packages/flow": {
@@ -15876,6 +16256,11 @@
         "unist-util-visit": "^4.1.2",
         "vite": "^4.2.0",
         "vitest": "^0.25.3"
+      },
+      "devDependencies": {
+        "@sveltejs/adapter-node": "^1.3.1",
+        "markdownlint": "^0.29.0",
+        "markdownlint-cli2": "^0.8.1"
       }
     },
     "packages/molly": {
diff --git a/packages/cli/package.json b/packages/cli/package.json
index 032487a..e98a6b0 100644
--- a/packages/cli/package.json
+++ b/packages/cli/package.json
@@ -14,7 +14,8 @@
     "lint:fix": "eslint --fix --ext .ts src/",
     "format": "prettier --write 'src/**/*.{ts,json}'",
     "format:check": "prettier --check 'src/**/*.{ts,json}'",
-    "prepare": "npm run build"
+    "prepare": "npm run build",
+    "postinstall": "npm run build"
   },
   "keywords": [],
   "author": "",
@@ -48,7 +49,7 @@
     "yargs": "^17.7.2"
   },
   "engines": {
-    "node": ">=14.0.0"
+    "node": ">=16.0.0"
   },
   "husky": {
     "hooks": {
diff --git a/packages/cli/src/actions/markdown/migrate.ts b/packages/cli/src/actions/markdown/migrate.ts
index aa71704..33e7d50 100644
--- a/packages/cli/src/actions/markdown/migrate.ts
+++ b/packages/cli/src/actions/markdown/migrate.ts
@@ -7,7 +7,6 @@ import { EntityBase, EntityMeta, EntityType } from '@mollify/types';
 import { ENTITY_FILE } from '../../constants';
 import cliProgress from 'cli-progress';
 import { table, log, error } from 'console';
-import entity from '../entity';
 
 let cancelMigration = false; // create a flag
 
@@ -16,9 +15,23 @@ process.on('SIGINT', function () {
   console.log('Migration aborted');
 });
 
+export function migratePath(originalPath: string): string {
+  const dirname = path.dirname(originalPath);
+  const basename = path.basename(originalPath, '.md');
+  const parentDirname = path.basename(dirname);
+
+  if (basename === 'index' || basename === parentDirname) {
+    return path.join(dirname, '+page.md');
+  } else {
+    return path.join(dirname, basename, '+page.md');
+  }
+}
+
 async function getUserInput(
   existingFrontmatter: Partial<EntityMeta>,
+  file: string
 ): Promise<Partial<EntityMeta>> {
+  log(file);
   table(existingFrontmatter);
 
   return await prompt<EntityBase>([
@@ -53,40 +66,41 @@ async function getUserInput(
   ]);
 }
 
+async function generateNewFileContent(file: string) {
+  const fileContent = await fs.readFile(file, 'utf8');
+  const { data: existingFrontmatter, content } = matter(fileContent);
+  const userInput = await getUserInput(existingFrontmatter, file);
+  const frontmatter = { ...existingFrontmatter, ...userInput };
+  return matter.stringify(content, frontmatter);
+}
+
+async function writeNewFile(file: string, newFilePath: string, newFileContent: string) {
+  if (!(await fs.pathExists(newFilePath))) {
+    await fs.ensureFile(newFilePath);
+    await fs.writeFile(newFilePath, newFileContent);
+    await fs.unlink(file);
+  } else {
+    log(`Skipped ${file} as there's already a ${ENTITY_FILE} file in the folder.`);
+  }
+}
+
 export async function migrateMarkdownFile(file: string) {
   try {
-    const fileContent = await fs.readFile(file, 'utf8');
-    const { data: existingFrontmatter, content } = matter(fileContent);
-    let slug = entity.slug.create(path.parse(file).name);
-    slug = slug === 'index' ? '' : slug;
-
-    const userInput = await getUserInput(existingFrontmatter);
-
-    const frontmatter = { ...existingFrontmatter, ...userInput };
-    const newFileContent = matter.stringify(content, frontmatter);
-
-    const newDir = path.join(path.dirname(file), slug);
-    const newFilePath = path.join(newDir, ENTITY_FILE);
-
-    if (!(await fs.pathExists(newFilePath))) {
-      await fs.ensureDir(newDir);
-      await fs.writeFile(newFilePath, newFileContent);
-      await fs.unlink(file);
-    } else {
-      log(
-        `Skipped ${file} as there's already a ${ENTITY_FILE} file in the folder.`,
-      );
-    }
+    const newFileContent = await generateNewFileContent(file);
+    const newFilePath = migratePath(file);
+    await writeNewFile(file, newFilePath, newFileContent);
   } catch (err) {
     error(`Error migrating ${file}: ${err}`);
   }
 }
 
+
 export async function migrateMarkdownFiles(basePath: string) {
   const pattern = path.join(basePath, '**/!(*+page).md');
   const ignorePattern = [
     path.join('src', 'templates', '**/*'), // Ignore pattern for src/templates
     path.join('node_modules', '**/*'), // Ignore pattern for node_modules
+    '**/[Rr][Ee][Aa][Dd][Mm][Ee].md', // Ignore pattern for README.md
   ];
   const files = glob.sync(pattern, { ignore: ignorePattern });
 
diff --git a/packages/cli/src/commands/create/index.ts b/packages/cli/src/commands/create/index.ts
index c74fcda..7955703 100644
--- a/packages/cli/src/commands/create/index.ts
+++ b/packages/cli/src/commands/create/index.ts
@@ -1,6 +1,6 @@
 import yargs from 'yargs';
 import { EntityBase, EntityType } from '@mollify/types';
-import { table } from 'console';
+import { log, table } from 'console';
 import entity from '../../actions/entity';
 import prompts from '../../prompts';
 
@@ -12,7 +12,7 @@ const createCommand: yargs.CommandModule = {
       .positional('location', {
         describe: 'Location to create the entity',
         type: 'string',
-        default: process.cwd(),
+        default: process.env.INIT_CWD,
       })
       .option('type', {
         alias: 'y',
diff --git a/packages/cli/src/templates/assessment/+page.md b/packages/cli/src/templates/assessment/+page.md
index 0bec6ab..d314ec1 100644
--- a/packages/cli/src/templates/assessment/+page.md
+++ b/packages/cli/src/templates/assessment/+page.md
@@ -1,11 +1,9 @@
 ---
-title: Template Evaluation
+title: Template Assessment
 type: Assessment
 tags:
-- template
-- evaluation
+- Template
+- Assessment
 ---
 
-# Template Assessment
-
 This is a template assessment. It is used to create new assessments.
\ No newline at end of file
diff --git a/packages/cli/src/templates/course/+page.md b/packages/cli/src/templates/course/+page.md
index 15cce7c..1a6c798 100644
--- a/packages/cli/src/templates/course/+page.md
+++ b/packages/cli/src/templates/course/+page.md
@@ -2,10 +2,8 @@
 title: Template Course
 type: Course
 tags:
-- template
-- course
+- Template
+- Course
 ---
 
-# Template Course
-
 This is a template course. It is used to create new courses.
\ No newline at end of file
diff --git a/packages/cli/src/templates/institution/+page.md b/packages/cli/src/templates/institution/+page.md
index a5b0985..b011d68 100644
--- a/packages/cli/src/templates/institution/+page.md
+++ b/packages/cli/src/templates/institution/+page.md
@@ -2,10 +2,8 @@
 title: Template Institution
 type: Institution
 tags:
-- template
+- Template
 - institution
 ---
 
-# Template Institution
-
 This is a template institution. It is used to create new institutions.
\ No newline at end of file
diff --git a/packages/cli/src/templates/lesson/+page.md b/packages/cli/src/templates/lesson/+page.md
index 7bad9e6..1c0b2fc 100644
--- a/packages/cli/src/templates/lesson/+page.md
+++ b/packages/cli/src/templates/lesson/+page.md
@@ -2,10 +2,8 @@
 title: Template Lesson
 type: Lesson
 tags:
-- template
+- Template
 - lesson
 ---
 
-# Template Lesson
-
 This is a template lesson. It is used to create new lessons.
\ No newline at end of file
diff --git a/packages/cli/src/templates/module/+page.md b/packages/cli/src/templates/module/+page.md
index 363224e..7879db6 100644
--- a/packages/cli/src/templates/module/+page.md
+++ b/packages/cli/src/templates/module/+page.md
@@ -2,10 +2,8 @@
 title: Template Module
 type: Module
 tags:
-- template
+- Template
 - module
 ---
 
-# Template Module
-
 This is a template module. It is used to create new modules.
\ No newline at end of file
diff --git a/packages/cli/src/templates/programme/+page.md b/packages/cli/src/templates/programme/+page.md
index d07eb7a..0924340 100644
--- a/packages/cli/src/templates/programme/+page.md
+++ b/packages/cli/src/templates/programme/+page.md
@@ -2,6 +2,8 @@
 title: Template Programme
 type: Programme
 tags:
-- template
+- Template
 - programme
 ---
+
+This is a template programme. It is used to create new programmes.
\ No newline at end of file
diff --git a/packages/docs/package.json b/packages/docs/package.json
index 55feba6..522ee4d 100644
--- a/packages/docs/package.json
+++ b/packages/docs/package.json
@@ -8,7 +8,8 @@
     "access": "public"
   },
   "scripts": {
-    "test": "echo \"Error: no test specified\" && exit 1"
+    "test": "echo \"Error: no test specified\" && exit 1",
+    "build": "echo \"Error: no build specified\" && exit 0"
   },
   "keywords": [],
   "author": ""
diff --git a/packages/lms/search.md b/packages/docs/search.md
similarity index 100%
rename from packages/lms/search.md
rename to packages/docs/search.md
diff --git a/packages/docs/users/+page.md b/packages/docs/users/+page.md
deleted file mode 100644
index 0253f37..0000000
--- a/packages/docs/users/+page.md
+++ /dev/null
@@ -1,100 +0,0 @@
-
-
-
-
-
-
-
-
-
-
-<table>
-  <tr>
-    <td><details>
-<summary>
-<strong>Name:</strong> Jackson "Jax" McKenzie<br>
-<strong>Location:</strong> South Africa<br>
-<strong>Title:</strong> Front-end Development Coach at Noroff<br>
-<img src="Jackson.png" alt="Jackson McKenzie">
-</summary>
-<p>Hi, my name is Jackson McKenzie, but my friends call me Jax. I'm a Front-end Development Coach at Noroff, and I love sharing my coding knowledge through fun and engaging videos. When I'm not creating content, you can find me playing my favorite video games.</p>
-</details></td>
-    <td><details>
-<summary>
-<strong>Name:</strong> Trevor Strauss<br>
-<strong>Location:</strong> South Africa<br>
-<strong>Title:</strong> Front-end Development Coach at Noroff<br>
-<img src="Trevor.png" alt="Trevor Strauss">
-</summary>
-<p>I'm Trevor Strauss, a Front-end Development Coach at Noroff. I specialize in comprehensive written material and academic-style instruction. Although I love teaching, I also work as a fireman.</p>
-</details>
-</td>
-  </tr>
-  <tr>
-    <td><details>
-<summary>
-<strong>Name:</strong> Ole Henrik Johansen<br>
-<strong>Location:</strong> Norway<br>
-<strong>Title:</strong> Front-end Development Student at Noroff<br>
-<img src="Ole.png" alt="Ole Henrik Johansen">
-</summary>
-<p>I'm Ole Henrik Johansen, a full-time student at Noroff, dedicated to mastering the art of front-end development. I thrive in code-focused projects and love collaborating with my fellow students to create innovative solutions.</p>
-</details></td>
-    <td><details>
-<summary>
-<strong>Name:</strong> Annika Müller<br>
-<strong>Location:</strong> Germany<br>
-<strong>Title:</strong> Front-end Development Student at Noroff<br>
-<img src="Annika.png" alt="Annika Müller">
-</summary>
-<p>My name is Annika Müller, and I'm a part-time front-end development student at Noroff from Germany. With a background in UX design, I emphasise the importance of aesthetics and enjoy collaborating with my peers on design-focused projects. My coding skills are a work in progress, but my design expertise is invaluable.</p>
-</details></td>
-  </tr>
-  <tr>
-    <td><details>
-<summary>
-<strong>Name:</strong> Camila Ortega<br>
-<strong>Location:</strong> Ecuador<br>
-<strong>Title:</strong> Front-end Development Student at Noroff<br>
-<img src="Camila.png" alt="Camila Ortega">
-</summary>
-<p>I'm Camila Ortega, a full-time front-end development student at Noroff from Ecuador. Known for my strong work ethic and self-motivation, I excel in solo projects. Despite my intermediate English skills, I am dedicated to my studies and eager to improve my language proficiency.</p>
-</details>
-</td>
-    <td><details>
-<summary>
-<strong>Name:</strong> Oliver Harrison<br>
-<strong>Location:</strong> UK<br>
-<strong>Title:</strong> Front-end Development Student at Noroff<br>
-<img src="Oliver.png" alt="Oliver Harrison">
-</summary>
-<p>I'm Oliver Harrison, a full-time front-end development student at Noroff, based in the UK. As a small business owner, my primary goal is to enhance my understanding of front-end development in order to better manage my business. I have no plans to pursue a career in the field but value the knowledge I gain.</p>
-</details>
-</td>
-  </tr>
-  <tr>
-    <td><details>
-<summary>
-<strong>Name:</strong> Ingrid Andersen<br>
-<strong>Location:</strong> Norway<br>
-<strong>Title:</strong> Content Editor at Noroff<br>
-<img src="Ingrid.png" alt="Ingrid Andersen">
-</summary>
-<p>My name is Ingrid Andersen, and I'm a content editor at Noroff. I'm known for my impeccable punctuality and sharp attention to detail. Fluent in multiple languages, I bring a unique perspective to my editing work, ensuring that all content meets the highest standards.</p>
-</details></td>
-    <td><details>
-<summary>
-<strong>Name:</strong> Willem de Vries<br>
-<strong>Location:</strong> Netherlands<br>
-<strong>Title:</strong> Front-end Development Programme Manager at Noroff<br>
-<img src="Willem.png" alt="Willem de Vries">
-</summary>
-<p>I'm Willem de Vries, the Front-end Development Programme Manager at Noroff, based in the Netherlands. As an avid reader, I'm always exploring new ideas and concepts related to my field. My diplomatic approach has helped me successfully manage a diverse team, even though I'm often very busy juggling multiple responsibilities.</p>
-</details>
-</td>
-  </tr>
-</table>
-
-
-
-
diff --git a/packages/docs/users/Annika.png b/packages/docs/users/Annika.png
deleted file mode 100644
index 803da97..0000000
Binary files a/packages/docs/users/Annika.png and /dev/null differ
diff --git a/packages/docs/users/Camila.png b/packages/docs/users/Camila.png
deleted file mode 100644
index 869800a..0000000
Binary files a/packages/docs/users/Camila.png and /dev/null differ
diff --git a/packages/docs/users/Ingrid.png b/packages/docs/users/Ingrid.png
deleted file mode 100644
index fa3ea64..0000000
Binary files a/packages/docs/users/Ingrid.png and /dev/null differ
diff --git a/packages/docs/users/Jackson.png b/packages/docs/users/Jackson.png
deleted file mode 100644
index e518971..0000000
Binary files a/packages/docs/users/Jackson.png and /dev/null differ
diff --git a/packages/docs/users/Ole.png b/packages/docs/users/Ole.png
deleted file mode 100644
index e18a0e7..0000000
Binary files a/packages/docs/users/Ole.png and /dev/null differ
diff --git a/packages/docs/users/Oliver.png b/packages/docs/users/Oliver.png
deleted file mode 100644
index 28b74d1..0000000
Binary files a/packages/docs/users/Oliver.png and /dev/null differ
diff --git a/packages/docs/users/Trevor.png b/packages/docs/users/Trevor.png
deleted file mode 100644
index 3cca29f..0000000
Binary files a/packages/docs/users/Trevor.png and /dev/null differ
diff --git a/packages/docs/users/Willem.png b/packages/docs/users/Willem.png
deleted file mode 100644
index de9a69c..0000000
Binary files a/packages/docs/users/Willem.png and /dev/null differ
diff --git a/packages/docs/users/users.yml b/packages/docs/users/users.yml
deleted file mode 100644
index b924fab..0000000
--- a/packages/docs/users/users.yml
+++ /dev/null
@@ -1,84 +0,0 @@
-- Name: Jackson "Jax" McKenzie
-  Title: Front-end Development Coach at Noroff
-  Location: South Africa
-  Properties:
-  - Informal writing style
-  - Enjoys recording video
-  - Carpal tunnel syndrome
-  Bio: Hi, my name is Jackson McKenzie, but my friends call me Jax. I'm a Front-end Development Coach at Noroff, and I love sharing my coding knowledge through fun and engaging videos. When I'm not creating content, you can find me playing my favorite video games.
-  Image: Jackson.png
-
-- Name: Trevor Strauss
-  Title: Front-end Development Coach at Noroff
-  Location: South Africa
-  Properties:
-  - Verbose academic writing style
-  - Avoids creating video
-  - Part-time fireman
-  Bio: I'm Trevor Strauss, a Front-end Development Coach at Noroff. I specialize in comprehensive written material and academic-style instruction. Although I love teaching, I also work as a fireman.
-  Image: Trevor.png
-
-- Name: Ole Henrik Johansen
-  Title: Front-end Development Student at Noroff
-  Pace: Full Time
-  Location: Norway
-  Properties:
-  - Visually impaired
-  - Code focused
-  - Enjoys teamwork
-  Bio: I'm Ole Henrik Johansen, a full-time student at Noroff, dedicated to mastering the art of front-end development. I thrive in code-focused projects and love collaborating with my fellow students to create innovative solutions.
-  Image: Ole.png
-
-- Name: Annika Müller
-  Title: Front-end Development Student at Noroff
-  Pace: Part Time
-  Location: Germany
-  Properties:
-  - Design focused
-  - Enjoys teamwork
-  - Less code focused
-  - Prior study in UX
-  Bio: My name is Annika Müller, and I'm a part-time front-end development student at Noroff from Germany. With a background in UX design, I emphasise the importance of aesthetics and enjoy collaborating with my peers on design-focused projects. My coding skills are a work in progress, but my design expertise is invaluable.
-  Image: Annika.png
-
-- Name: Camila Ortega
-  Title: Front-end Development Student at Noroff
-  Pace: Full Time
-  Location: Ecuador
-  Properties:
-  - Enjoys solo work
-  - Intermediate English
-  - Highly self-motivated
-  Bio: I'm Camila Ortega, a full-time front-end development student at Noroff from Ecuador. Known for my strong work ethic and self-motivation, I excel in solo projects. Despite my intermediate English skills, I am dedicated to my studies and eager to improve my language proficiency.
-  Image: Camila.png
-
-- Name: Oliver Harrison
-  Title: Front-end Development Student at Noroff
-  Pace: Full Time
-  Location: UK
-  Properties:
-  - Small business owner
-  - Learning for context
-  - No intention of professional development
-  Bio: I'm Oliver Harrison, a full-time front-end development student at Noroff, based in the UK. As a small business owner, my primary goal is to enhance my understanding of front-end development in order to better manage my business. I have no plans to pursue a career in the field but value the knowledge I gain.
-  Image: Oliver.png
-
-- Name: Ingrid Andersen
-  Title: Content Editor at Noroff
-  Location: Norway
-  Properties:
-  - Punctual
-  - Polylingual
-  - Meticulous
-  Bio: My name is Ingrid Andersen, and I'm a content editor at Noroff. I'm known for my impeccable punctuality and sharp attention to detail. Fluent in multiple languages, I bring a unique perspective to my editing work, ensuring that all content meets the highest standards.
-  Image: Ingrid.png
-
-- Name: Willem de Vries
-  Title: Front-end Development Programme Manager at Noroff
-  Location: Netherlands
-  Properties:
-  - Avid reader
-  - Diplomatic
-  - Very busy
-  Bio: I'm Willem de Vries, the Front-end Development Programme Manager at Noroff, based in the Netherlands. As an avid reader, I'm always exploring new ideas and concepts related to my field. My diplomatic approach has helped me successfully manage a diverse team, even though I'm often very busy juggling multiple responsibilities.
-  Image: Willem.png
diff --git a/packages/lms/.eslintrc.cjs b/packages/lms/.eslintrc.cjs
index 3ccf435..eaf19f5 100644
--- a/packages/lms/.eslintrc.cjs
+++ b/packages/lms/.eslintrc.cjs
@@ -1,20 +1,20 @@
 module.exports = {
-	root: true,
-	parser: '@typescript-eslint/parser',
-	extends: ['eslint:recommended', 'plugin:@typescript-eslint/recommended', 'prettier'],
-	plugins: ['svelte3', '@typescript-eslint'],
-	ignorePatterns: ['*.cjs'],
-	overrides: [{ files: ['*.svelte'], processor: 'svelte3/svelte3' }],
-	settings: {
-		'svelte3/typescript': () => require('typescript')
-	},
-	parserOptions: {
-		sourceType: 'module',
-		ecmaVersion: 2020
-	},
-	env: {
-		browser: true,
-		es2017: true,
-		node: true
-	}
+  root: true,
+  parser: '@typescript-eslint/parser',
+  extends: ['eslint:recommended', 'plugin:@typescript-eslint/recommended', 'prettier'],
+  plugins: ['svelte3', '@typescript-eslint'],
+  ignorePatterns: ['*.cjs'],
+  overrides: [{ files: ['*.svelte'], processor: 'svelte3/svelte3' }],
+  settings: {
+    'svelte3/typescript': () => require('typescript')
+  },
+  parserOptions: {
+    sourceType: 'module',
+    ecmaVersion: 2020
+  },
+  env: {
+    browser: true,
+    es2017: true,
+    node: true
+  }
 };
diff --git a/packages/lms/.gitignore b/packages/lms/.gitignore
index 20231d9..6635cf5 100644
--- a/packages/lms/.gitignore
+++ b/packages/lms/.gitignore
@@ -8,4 +8,3 @@ node_modules
 !.env.example
 vite.config.js.timestamp-*
 vite.config.ts.timestamp-*
-/src/routes/content
\ No newline at end of file
diff --git a/packages/lms/.markdownlint.yaml b/packages/lms/.markdownlint.yaml
new file mode 100644
index 0000000..ae8e2e1
--- /dev/null
+++ b/packages/lms/.markdownlint.yaml
@@ -0,0 +1,19 @@
+# Default state for all rules
+default: true
+
+# MD033/no-inline-html - Inline HTML
+MD033:
+  # Allowed elements
+  allowed_elements: [iframe]
+
+# MD013/line-length - Line length
+MD013: false
+
+# MD010/no-hard-tabs - Hard tabs
+MD010:
+  # Include code blocks
+  code_blocks: true
+  # Fenced code languages to ignore
+  ignore_code_languages: []
+  # Number of spaces for each hard tab
+  spaces_per_tab: 2
diff --git a/packages/lms/.prettierrc b/packages/lms/.prettierrc
index 032c37e..1f4fafd 100644
--- a/packages/lms/.prettierrc
+++ b/packages/lms/.prettierrc
@@ -1,9 +1,10 @@
 {
-	"useTabs": true,
-	"singleQuote": true,
-	"trailingComma": "none",
-	"printWidth": 120,
-	"plugins": ["prettier-plugin-svelte"],
-	"pluginSearchDirs": ["."],
-	"overrides": [{ "files": "*.svelte", "options": { "parser": "svelte" } }]
+  "useTabs": false,
+  "singleQuote": true,
+  "trailingComma": "none",
+  "printWidth": 120,
+  "tabWidth": 2,
+  "plugins": ["prettier-plugin-svelte"],
+  "pluginSearchDirs": ["."],
+  "overrides": [{ "files": "*.svelte", "options": { "parser": "svelte" } }]
 }
diff --git a/packages/lms/package.json b/packages/lms/package.json
index 48accc3..56c3d71 100644
--- a/packages/lms/package.json
+++ b/packages/lms/package.json
@@ -1,59 +1,65 @@
 {
-	"name": "@mollify/lms",
-	"version": "0.2.11",
-	"license": "GPL",
-	"scripts": {
-		"dev": "vite dev",
-		"build": "vite build",
-		"preview": "vite preview",
-		"test": "playwright test",
-		"check": "svelte-kit sync && svelte-check --tsconfig ./tsconfig.json",
-		"check:watch": "svelte-kit sync && svelte-check --tsconfig ./tsconfig.json --watch",
-		"test:unit": "vitest",
-		"lint": "prettier --plugin-search-dir . --check . && eslint .",
-		"format": "prettier --plugin-search-dir . --write ."
-	},
-	"type": "module",
-	"dependencies": {
-		"@floating-ui/dom": "^1.2.8",
-		"@mollify/cli": "^0.2.11",
-		"@mollify/molly": "^0.2.11",
-		"@mollify/tts": "^0.2.11",
-		"@mollify/types": "^0.2.11",
-		"@playwright/test": "^1.28.1",
-		"@skeletonlabs/skeleton": "^1.5.1",
-		"@sveltejs/adapter-auto": "^2.0.0",
-		"@sveltejs/kit": "^1.5.0",
-		"@tailwindcss/forms": "^0.5.3",
-		"@tailwindcss/typography": "^0.5.9",
-		"@types/js-yaml": "^4.0.5",
-		"@typescript-eslint/eslint-plugin": "^5.45.0",
-		"@typescript-eslint/parser": "^5.45.0",
-		"autoprefixer": "^10.4.14",
-		"eslint": "^8.28.0",
-		"eslint-config-prettier": "^8.5.0",
-		"eslint-plugin-svelte3": "^4.0.0",
-		"fuse.js": "^6.6.2",
-		"graphql": "^16.6.0",
-		"gray-matter": "^4.0.3",
-		"js-yaml": "^4.1.0",
-		"mdsvex": "^0.10.6",
-		"postcss": "^8.4.23",
-		"postcss-load-config": "^4.0.1",
-		"prettier": "^2.8.0",
-		"prettier-plugin-svelte": "^2.8.1",
-		"remark-emoji-callout": "^1.0.0",
-		"remark-gfm": "^3.0.1",
-		"sass": "^1.62.0",
-		"svelte": "^3.54.0",
-		"svelte-check": "^3.0.1",
-		"svelte-preprocess": "^5.0.3",
-		"tailwindcss": "^3.3.1",
-		"tslib": "^2.4.1",
-		"typescript": "^5.0.0",
-		"unist-builder": "^3.0.1",
-		"unist-util-visit": "^4.1.2",
-		"vite": "^4.2.0",
-		"vitest": "^0.25.3"
-	}
+  "name": "@mollify/lms",
+  "version": "0.2.11",
+  "license": "GPL",
+  "scripts": {
+    "dev": "vite dev",
+    "build": "vite build",
+    "preview": "vite preview",
+    "test": "playwright test",
+    "check": "svelte-kit sync && svelte-check --tsconfig ./tsconfig.json",
+    "check:watch": "svelte-kit sync && svelte-check --tsconfig ./tsconfig.json --watch",
+    "test:unit": "vitest",
+    "lint": "prettier --plugin-search-dir . --check . && eslint . && markdownlint-cli2 '**/*.md'",
+    "lint:fix": "prettier --plugin-search-dir . --write . && eslint . --fix && markdownlint-cli2 '**/*.md' --fix",
+    "format": "prettier --plugin-search-dir . --write ."
+  },
+  "type": "module",
+  "dependencies": {
+    "@floating-ui/dom": "^1.2.8",
+    "@mollify/cli": "^0.2.11",
+    "@mollify/molly": "^0.2.11",
+    "@mollify/tts": "^0.2.11",
+    "@mollify/types": "^0.2.11",
+    "@playwright/test": "^1.28.1",
+    "@skeletonlabs/skeleton": "^1.5.1",
+    "@sveltejs/adapter-auto": "^2.0.0",
+    "@sveltejs/kit": "^1.5.0",
+    "@tailwindcss/forms": "^0.5.3",
+    "@tailwindcss/typography": "^0.5.9",
+    "@types/js-yaml": "^4.0.5",
+    "@typescript-eslint/eslint-plugin": "^5.45.0",
+    "@typescript-eslint/parser": "^5.45.0",
+    "autoprefixer": "^10.4.14",
+    "eslint": "^8.28.0",
+    "eslint-config-prettier": "^8.5.0",
+    "eslint-plugin-svelte3": "^4.0.0",
+    "fuse.js": "^6.6.2",
+    "graphql": "^16.6.0",
+    "gray-matter": "^4.0.3",
+    "js-yaml": "^4.1.0",
+    "mdsvex": "^0.10.6",
+    "postcss": "^8.4.23",
+    "postcss-load-config": "^4.0.1",
+    "prettier": "^2.8.0",
+    "prettier-plugin-svelte": "^2.8.1",
+    "remark-emoji-callout": "^1.0.0",
+    "remark-gfm": "^3.0.1",
+    "sass": "^1.62.0",
+    "svelte": "^3.54.0",
+    "svelte-check": "^3.0.1",
+    "svelte-preprocess": "^5.0.3",
+    "tailwindcss": "^3.3.1",
+    "tslib": "^2.4.1",
+    "typescript": "^5.0.0",
+    "unist-builder": "^3.0.1",
+    "unist-util-visit": "^4.1.2",
+    "vite": "^4.2.0",
+    "vitest": "^0.25.3"
+  },
+  "devDependencies": {
+    "@sveltejs/adapter-node": "^1.3.1",
+    "markdownlint": "^0.29.0",
+    "markdownlint-cli2": "^0.8.1"
+  }
 }
diff --git a/packages/lms/playwright.config.ts b/packages/lms/playwright.config.ts
index 80731be..b721978 100644
--- a/packages/lms/playwright.config.ts
+++ b/packages/lms/playwright.config.ts
@@ -1,11 +1,11 @@
 import type { PlaywrightTestConfig } from '@playwright/test';
 
 const config: PlaywrightTestConfig = {
-	webServer: {
-		command: 'npm run build && npm run preview',
-		port: 4173
-	},
-	testDir: 'tests'
+  webServer: {
+    command: 'npm run build && npm run preview',
+    port: 4173
+  },
+  testDir: 'tests'
 };
 
 export default config;
diff --git a/packages/lms/postcss.config.cjs b/packages/lms/postcss.config.cjs
index fe10e55..3a310c7 100644
--- a/packages/lms/postcss.config.cjs
+++ b/packages/lms/postcss.config.cjs
@@ -2,12 +2,12 @@ const tailwindcss = require('tailwindcss');
 const autoprefixer = require('autoprefixer');
 
 const config = {
-	plugins: [
-		//Some plugins, like tailwindcss/nesting, need to run before Tailwind,
-		tailwindcss(),
-		//But others, like autoprefixer, need to run after,
-		autoprefixer
-	]
+  plugins: [
+    //Some plugins, like tailwindcss/nesting, need to run before Tailwind,
+    tailwindcss(),
+    //But others, like autoprefixer, need to run after,
+    autoprefixer
+  ]
 };
 
 module.exports = config;
diff --git a/packages/lms/src/app.d.ts b/packages/lms/src/app.d.ts
index f59b884..899c7e8 100644
--- a/packages/lms/src/app.d.ts
+++ b/packages/lms/src/app.d.ts
@@ -1,12 +1,12 @@
 // See https://kit.svelte.dev/docs/types#app
 // for information about these interfaces
 declare global {
-	namespace App {
-		// interface Error {}
-		// interface Locals {}
-		// interface PageData {}
-		// interface Platform {}
-	}
+  namespace App {
+    // interface Error {}
+    // interface Locals {}
+    // interface PageData {}
+    // interface Platform {}
+  }
 }
 
 export {};
diff --git a/packages/lms/src/app.html b/packages/lms/src/app.html
index d541a38..b8330a3 100644
--- a/packages/lms/src/app.html
+++ b/packages/lms/src/app.html
@@ -1,19 +1,19 @@
 <!DOCTYPE html>
 <html lang="en">
-	<head>
-		<meta charset="utf-8" />
-		<link rel="icon" href="%sveltekit.assets%/favicon.png" />
-		<meta name="viewport" content="width=device-width" />
-		<link
-			rel="stylesheet"
-			href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,500,0..1,-50..200"
-		/>
-		<title>Mollify</title>
-		%sveltekit.head%
-	</head>
-	<body data-sveltekit-preload-data="hover">
-		<div style="display: contents" class="h-full overflow-hidden text-base" id="container" data-font-size-index="1">
-			%sveltekit.body%
-		</div>
-	</body>
+  <head>
+    <meta charset="utf-8" />
+    <link rel="icon" href="%sveltekit.assets%/favicon.png" />
+    <meta name="viewport" content="width=device-width" />
+    <link
+      rel="stylesheet"
+      href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,500,0..1,-50..200"
+    />
+    <title>Mollify</title>
+    %sveltekit.head%
+  </head>
+  <body data-sveltekit-preload-data="hover">
+    <div style="display: contents" class="h-full overflow-hidden text-base" id="container" data-font-size-index="1">
+      %sveltekit.body%
+    </div>
+  </body>
 </html>
diff --git a/packages/lms/src/app.postcss b/packages/lms/src/app.postcss
index 1bfd83f..df230d3 100644
--- a/packages/lms/src/app.postcss
+++ b/packages/lms/src/app.postcss
@@ -1,106 +1,106 @@
 /* Write your global styles here, in PostCSS syntax */
 html,
 body {
-	@apply h-full overflow-hidden;
+  @apply h-full overflow-hidden;
 }
 
 :root {
-	/* =~= Theme Properties =~= */
-	--theme-font-family-base: Inter, ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont,
-		'Segoe UI', Roboto, 'Helvetica Neue', Arial, 'Noto Sans', sans-serif, 'Apple Color Emoji',
-		'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';
-	--theme-font-family-heading: Inter, ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont,
-		'Segoe UI', Roboto, 'Helvetica Neue', Arial, 'Noto Sans', sans-serif, 'Apple Color Emoji',
-		'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';
-	--theme-font-color-base: 0 0 0;
-	--theme-font-color-dark: 255 255 255;
-	--theme-rounded-base: 6px;
-	--theme-rounded-container: 12px;
-	--theme-border-base: 1px;
-	/* =~= Theme On-X Colors =~= */
-	--on-primary: 255 255 255;
-	--on-secondary: 0 0 0;
-	--on-tertiary: 0 0 0;
-	--on-success: 0 0 0;
-	--on-warning: 0 0 0;
-	--on-error: 255 255 255;
-	--on-surface: 255 255 255;
-	/* =~= Theme Colors  =~= */
-	/* primary | #ff2f02 */
-	--color-primary-50: 255 224 217; /* ⬅ #ffe0d9 */
-	--color-primary-100: 255 213 204; /* ⬅ #ffd5cc */
-	--color-primary-200: 255 203 192; /* ⬅ #ffcbc0 */
-	--color-primary-300: 255 172 154; /* ⬅ #ffac9a */
-	--color-primary-400: 255 109 78; /* ⬅ #ff6d4e */
-	--color-primary-500: 255 47 2; /* ⬅ #ff2f02 */
-	--color-primary-600: 230 42 2; /* ⬅ #e62a02 */
-	--color-primary-700: 191 35 2; /* ⬅ #bf2302 */
-	--color-primary-800: 153 28 1; /* ⬅ #991c01 */
-	--color-primary-900: 125 23 1; /* ⬅ #7d1701 */
-	/* secondary | #ffffff */
-	--color-secondary-50: 255 255 255; /* ⬅ #ffffff */
-	--color-secondary-100: 255 255 255; /* ⬅ #ffffff */
-	--color-secondary-200: 255 255 255; /* ⬅ #ffffff */
-	--color-secondary-300: 255 255 255; /* ⬅ #ffffff */
-	--color-secondary-400: 255 255 255; /* ⬅ #ffffff */
-	--color-secondary-500: 255 255 255; /* ⬅ #ffffff */
-	--color-secondary-600: 230 230 230; /* ⬅ #e6e6e6 */
-	--color-secondary-700: 191 191 191; /* ⬅ #bfbfbf */
-	--color-secondary-800: 153 153 153; /* ⬅ #999999 */
-	--color-secondary-900: 125 125 125; /* ⬅ #7d7d7d */
-	/* tertiary | #0EA5E9 */
-	--color-tertiary-50: 219 242 252; /* ⬅ #dbf2fc */
-	--color-tertiary-100: 207 237 251; /* ⬅ #cfedfb */
-	--color-tertiary-200: 195 233 250; /* ⬅ #c3e9fa */
-	--color-tertiary-300: 159 219 246; /* ⬅ #9fdbf6 */
-	--color-tertiary-400: 86 192 240; /* ⬅ #56c0f0 */
-	--color-tertiary-500: 14 165 233; /* ⬅ #0EA5E9 */
-	--color-tertiary-600: 13 149 210; /* ⬅ #0d95d2 */
-	--color-tertiary-700: 11 124 175; /* ⬅ #0b7caf */
-	--color-tertiary-800: 8 99 140; /* ⬅ #08638c */
-	--color-tertiary-900: 7 81 114; /* ⬅ #075172 */
-	/* success | #84cc16 */
-	--color-success-50: 237 247 220; /* ⬅ #edf7dc */
-	--color-success-100: 230 245 208; /* ⬅ #e6f5d0 */
-	--color-success-200: 224 242 197; /* ⬅ #e0f2c5 */
-	--color-success-300: 206 235 162; /* ⬅ #ceeba2 */
-	--color-success-400: 169 219 92; /* ⬅ #a9db5c */
-	--color-success-500: 132 204 22; /* ⬅ #84cc16 */
-	--color-success-600: 119 184 20; /* ⬅ #77b814 */
-	--color-success-700: 99 153 17; /* ⬅ #639911 */
-	--color-success-800: 79 122 13; /* ⬅ #4f7a0d */
-	--color-success-900: 65 100 11; /* ⬅ #41640b */
-	/* warning | #EAB308 */
-	--color-warning-50: 252 244 218; /* ⬅ #fcf4da */
-	--color-warning-100: 251 240 206; /* ⬅ #fbf0ce */
-	--color-warning-200: 250 236 193; /* ⬅ #faecc1 */
-	--color-warning-300: 247 225 156; /* ⬅ #f7e19c */
-	--color-warning-400: 240 202 82; /* ⬅ #f0ca52 */
-	--color-warning-500: 234 179 8; /* ⬅ #EAB308 */
-	--color-warning-600: 211 161 7; /* ⬅ #d3a107 */
-	--color-warning-700: 176 134 6; /* ⬅ #b08606 */
-	--color-warning-800: 140 107 5; /* ⬅ #8c6b05 */
-	--color-warning-900: 115 88 4; /* ⬅ #735804 */
-	/* error | #D41976 */
-	--color-error-50: 249 221 234; /* ⬅ #f9ddea */
-	--color-error-100: 246 209 228; /* ⬅ #f6d1e4 */
-	--color-error-200: 244 198 221; /* ⬅ #f4c6dd */
-	--color-error-300: 238 163 200; /* ⬅ #eea3c8 */
-	--color-error-400: 225 94 159; /* ⬅ #e15e9f */
-	--color-error-500: 212 25 118; /* ⬅ #D41976 */
-	--color-error-600: 191 23 106; /* ⬅ #bf176a */
-	--color-error-700: 159 19 89; /* ⬅ #9f1359 */
-	--color-error-800: 127 15 71; /* ⬅ #7f0f47 */
-	--color-error-900: 104 12 58; /* ⬅ #680c3a */
-	/* surface | #495a8f */
-	--color-surface-50: 228 230 238; /* ⬅ #e4e6ee */
-	--color-surface-100: 219 222 233; /* ⬅ #dbdee9 */
-	--color-surface-200: 210 214 227; /* ⬅ #d2d6e3 */
-	--color-surface-300: 182 189 210; /* ⬅ #b6bdd2 */
-	--color-surface-400: 128 140 177; /* ⬅ #808cb1 */
-	--color-surface-500: 73 90 143; /* ⬅ #495a8f */
-	--color-surface-600: 66 81 129; /* ⬅ #425181 */
-	--color-surface-700: 55 68 107; /* ⬅ #37446b */
-	--color-surface-800: 44 54 86; /* ⬅ #2c3656 */
-	--color-surface-900: 36 44 70; /* ⬅ #242c46 */
+  /* =~= Theme Properties =~= */
+  --theme-font-family-base: Inter, ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto,
+    'Helvetica Neue', Arial, 'Noto Sans', sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol',
+    'Noto Color Emoji';
+  --theme-font-family-heading: Inter, ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto,
+    'Helvetica Neue', Arial, 'Noto Sans', sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol',
+    'Noto Color Emoji';
+  --theme-font-color-base: 0 0 0;
+  --theme-font-color-dark: 255 255 255;
+  --theme-rounded-base: 6px;
+  --theme-rounded-container: 12px;
+  --theme-border-base: 1px;
+  /* =~= Theme On-X Colors =~= */
+  --on-primary: 255 255 255;
+  --on-secondary: 0 0 0;
+  --on-tertiary: 0 0 0;
+  --on-success: 0 0 0;
+  --on-warning: 0 0 0;
+  --on-error: 255 255 255;
+  --on-surface: 255 255 255;
+  /* =~= Theme Colors  =~= */
+  /* primary | #ff2f02 */
+  --color-primary-50: 255 224 217; /* ⬅ #ffe0d9 */
+  --color-primary-100: 255 213 204; /* ⬅ #ffd5cc */
+  --color-primary-200: 255 203 192; /* ⬅ #ffcbc0 */
+  --color-primary-300: 255 172 154; /* ⬅ #ffac9a */
+  --color-primary-400: 255 109 78; /* ⬅ #ff6d4e */
+  --color-primary-500: 255 47 2; /* ⬅ #ff2f02 */
+  --color-primary-600: 230 42 2; /* ⬅ #e62a02 */
+  --color-primary-700: 191 35 2; /* ⬅ #bf2302 */
+  --color-primary-800: 153 28 1; /* ⬅ #991c01 */
+  --color-primary-900: 125 23 1; /* ⬅ #7d1701 */
+  /* secondary | #ffffff */
+  --color-secondary-50: 255 255 255; /* ⬅ #ffffff */
+  --color-secondary-100: 255 255 255; /* ⬅ #ffffff */
+  --color-secondary-200: 255 255 255; /* ⬅ #ffffff */
+  --color-secondary-300: 255 255 255; /* ⬅ #ffffff */
+  --color-secondary-400: 255 255 255; /* ⬅ #ffffff */
+  --color-secondary-500: 255 255 255; /* ⬅ #ffffff */
+  --color-secondary-600: 230 230 230; /* ⬅ #e6e6e6 */
+  --color-secondary-700: 191 191 191; /* ⬅ #bfbfbf */
+  --color-secondary-800: 153 153 153; /* ⬅ #999999 */
+  --color-secondary-900: 125 125 125; /* ⬅ #7d7d7d */
+  /* tertiary | #0EA5E9 */
+  --color-tertiary-50: 219 242 252; /* ⬅ #dbf2fc */
+  --color-tertiary-100: 207 237 251; /* ⬅ #cfedfb */
+  --color-tertiary-200: 195 233 250; /* ⬅ #c3e9fa */
+  --color-tertiary-300: 159 219 246; /* ⬅ #9fdbf6 */
+  --color-tertiary-400: 86 192 240; /* ⬅ #56c0f0 */
+  --color-tertiary-500: 14 165 233; /* ⬅ #0EA5E9 */
+  --color-tertiary-600: 13 149 210; /* ⬅ #0d95d2 */
+  --color-tertiary-700: 11 124 175; /* ⬅ #0b7caf */
+  --color-tertiary-800: 8 99 140; /* ⬅ #08638c */
+  --color-tertiary-900: 7 81 114; /* ⬅ #075172 */
+  /* success | #84cc16 */
+  --color-success-50: 237 247 220; /* ⬅ #edf7dc */
+  --color-success-100: 230 245 208; /* ⬅ #e6f5d0 */
+  --color-success-200: 224 242 197; /* ⬅ #e0f2c5 */
+  --color-success-300: 206 235 162; /* ⬅ #ceeba2 */
+  --color-success-400: 169 219 92; /* ⬅ #a9db5c */
+  --color-success-500: 132 204 22; /* ⬅ #84cc16 */
+  --color-success-600: 119 184 20; /* ⬅ #77b814 */
+  --color-success-700: 99 153 17; /* ⬅ #639911 */
+  --color-success-800: 79 122 13; /* ⬅ #4f7a0d */
+  --color-success-900: 65 100 11; /* ⬅ #41640b */
+  /* warning | #EAB308 */
+  --color-warning-50: 252 244 218; /* ⬅ #fcf4da */
+  --color-warning-100: 251 240 206; /* ⬅ #fbf0ce */
+  --color-warning-200: 250 236 193; /* ⬅ #faecc1 */
+  --color-warning-300: 247 225 156; /* ⬅ #f7e19c */
+  --color-warning-400: 240 202 82; /* ⬅ #f0ca52 */
+  --color-warning-500: 234 179 8; /* ⬅ #EAB308 */
+  --color-warning-600: 211 161 7; /* ⬅ #d3a107 */
+  --color-warning-700: 176 134 6; /* ⬅ #b08606 */
+  --color-warning-800: 140 107 5; /* ⬅ #8c6b05 */
+  --color-warning-900: 115 88 4; /* ⬅ #735804 */
+  /* error | #D41976 */
+  --color-error-50: 249 221 234; /* ⬅ #f9ddea */
+  --color-error-100: 246 209 228; /* ⬅ #f6d1e4 */
+  --color-error-200: 244 198 221; /* ⬅ #f4c6dd */
+  --color-error-300: 238 163 200; /* ⬅ #eea3c8 */
+  --color-error-400: 225 94 159; /* ⬅ #e15e9f */
+  --color-error-500: 212 25 118; /* ⬅ #D41976 */
+  --color-error-600: 191 23 106; /* ⬅ #bf176a */
+  --color-error-700: 159 19 89; /* ⬅ #9f1359 */
+  --color-error-800: 127 15 71; /* ⬅ #7f0f47 */
+  --color-error-900: 104 12 58; /* ⬅ #680c3a */
+  /* surface | #495a8f */
+  --color-surface-50: 228 230 238; /* ⬅ #e4e6ee */
+  --color-surface-100: 219 222 233; /* ⬅ #dbdee9 */
+  --color-surface-200: 210 214 227; /* ⬅ #d2d6e3 */
+  --color-surface-300: 182 189 210; /* ⬅ #b6bdd2 */
+  --color-surface-400: 128 140 177; /* ⬅ #808cb1 */
+  --color-surface-500: 73 90 143; /* ⬅ #495a8f */
+  --color-surface-600: 66 81 129; /* ⬅ #425181 */
+  --color-surface-700: 55 68 107; /* ⬅ #37446b */
+  --color-surface-800: 44 54 86; /* ⬅ #2c3656 */
+  --color-surface-900: 36 44 70; /* ⬅ #242c46 */
 }
diff --git a/packages/lms/src/index.test.ts b/packages/lms/src/index.test.ts
index e07cbbd..964d287 100644
--- a/packages/lms/src/index.test.ts
+++ b/packages/lms/src/index.test.ts
@@ -1,7 +1,7 @@
 import { describe, it, expect } from 'vitest';
 
 describe('sum test', () => {
-	it('adds 1 + 2 to equal 3', () => {
-		expect(1 + 2).toBe(3);
-	});
+  it('adds 1 + 2 to equal 3', () => {
+    expect(1 + 2).toBe(3);
+  });
 });
diff --git a/packages/lms/src/lib/components/cards/Card.svelte b/packages/lms/src/lib/components/cards/Card.svelte
index 7af222f..a976ab7 100644
--- a/packages/lms/src/lib/components/cards/Card.svelte
+++ b/packages/lms/src/lib/components/cards/Card.svelte
@@ -1,17 +1,22 @@
 <script lang="ts">
-	import type { EntityMeta } from "@mollify/types";
-
-	export let result: EntityMeta;
+  export let title: string;
+  export let browserPath: string | undefined;
+  export let type: string;
+  export let tags: string[];
 </script>
 
-<a class="card p-4 variant-ghost-surface no-underline dark:text-slate-100" href={result.browserPath}>
-	<header class="card-header border-b flex justify-between items-baseline gap-3 p-0">
-		<h3 class="h3">{result.title}</h3>
-		<span class="chip variant-filled">{result.type}</span>
-	</header>
-	<footer class="card-footer p-0 pt-2">
-		{#each result.tags as tag}
-			<p class="chip variant-ringed m-1 ms-0 pt-2">{tag}</p>
-		{/each}
-	</footer>
-</a>
+{#if browserPath}
+  <a class="card p-4 variant-ghost-surface no-underline dark:text-slate-100" href={browserPath}>
+    <header class="card-header border-b flex justify-between items-baseline gap-3 p-0">
+      <h3 class="h3">{title}</h3>
+      <span class="chip variant-filled">{type}</span>
+    </header>
+    {#if tags && tags.length}
+      <footer class="card-footer p-0 pt-2">
+        {#each tags as tag}
+          <p class="chip variant-ringed m-1 ms-0 pt-2">{tag}</p>
+        {/each}
+      </footer>
+    {/if}
+  </a>
+{/if}
diff --git a/packages/lms/src/lib/components/content/Main.svelte b/packages/lms/src/lib/components/content/Main.svelte
index 02e946f..7ad8e2b 100644
--- a/packages/lms/src/lib/components/content/Main.svelte
+++ b/packages/lms/src/lib/components/content/Main.svelte
@@ -2,7 +2,7 @@
 	import ProgrammeNav from '../navigation/ProgrammeNav.svelte';
 </script>
 
-<main class="p-5 w-full relative">
+<main class="px-5 py-2 w-full relative">
 	<div class="prose max-w-none" id="prose-container">
 		<ProgrammeNav>
 			<slot />
diff --git a/packages/lms/src/lib/components/content/_layout.svelte b/packages/lms/src/lib/components/content/_layout.svelte
deleted file mode 100644
index d40fd85..0000000
--- a/packages/lms/src/lib/components/content/_layout.svelte
+++ /dev/null
@@ -1,11 +0,0 @@
-<script context="module">
-	import h1 from './elements/h1.svelte';
-	import h2 from './elements/h2.svelte';
-	import h3 from './elements/h3.svelte';
-	import h4 from './elements/h4.svelte';
-	import h5 from './elements/h5.svelte';
-	import h6 from './elements/h6.svelte';
-	export { h1, h2, h3, h4, h5, h6 };
-</script>
-
-<slot />
diff --git a/packages/lms/src/lib/components/content/elements/Heading.svelte b/packages/lms/src/lib/components/content/elements/Heading.svelte
deleted file mode 100644
index 4974f45..0000000
--- a/packages/lms/src/lib/components/content/elements/Heading.svelte
+++ /dev/null
@@ -1,61 +0,0 @@
-<script>
-	import { onMount } from 'svelte';
-	import { browser } from '$app/environment';
-	import { AddRemoveBookmarks } from '$lib/utils/bookmarking/AddRemove';
-	import { bookmarks } from '$lib/stores/bookmarks';
-	import { page } from '$app/stores';
-
-	let bookmarksStore = $bookmarks;
-	let id;
-	let content;
-	let text = '';
-	let hasBookmark = false;
-	let currentUrl = '';
-
-	$: {
-		if (browser) {
-			hasBookmark = $bookmarks.some((b) => {
-				const hasMatchingUrl = b.url.split('/').pop() === currentUrl.split('/').pop();
-				const hasMatchingHeading = b.headings?.some((heading) => heading === text);
-				return hasMatchingUrl && hasMatchingHeading;
-			});
-		}
-	}
-
-	$: page.subscribe((p) => {
-		if (browser) {
-			currentUrl = decodeURIComponent(window.location.pathname);
-		}
-	});
-
-	onMount(() => {
-		if (browser) {
-			text = content.textContent;
-			id = text.toLowerCase().replace(/\s/g, '-');
-			currentUrl = decodeURIComponent(window.location.pathname);
-			hasBookmark = $bookmarks.some((b) => {
-				const hasMatchingUrl = b.url.split('/').pop() === currentUrl.split('/').pop();
-				const hasMatchingHeading = b.headings?.some((heading) => heading === text);
-				return hasMatchingUrl && hasMatchingHeading;
-			});
-		}
-	});
-
-	async function onclick() {
-		console.log('addBookmark', text);
-		const newBookmarks = await AddRemoveBookmarks(text);
-		bookmarks.set(newBookmarks);
-	}
-</script>
-
-<span bind:this={content} {id}>
-	<slot {...content} />
-</span>
-<a href="#{id}" class="text-primary-500 no-underline mx-1"><i class="icon-f">link</i></a>
-<button>
-	{#if !hasBookmark}
-		<i class="icon-f" on:click={(event) => onclick()}>bookmark_add</i>
-	{:else}
-		<i class="icon-f" on:click={(event) => onclick()}>bookmark_remove</i>
-	{/if}
-</button>
diff --git a/packages/lms/src/lib/components/content/elements/h1.svelte b/packages/lms/src/lib/components/content/elements/h1.svelte
deleted file mode 100644
index 7b1caba..0000000
--- a/packages/lms/src/lib/components/content/elements/h1.svelte
+++ /dev/null
@@ -1,9 +0,0 @@
-<script>
-	import Heading from './Heading.svelte';
-</script>
-
-<h1>
-	<Heading>
-		<slot />
-	</Heading>
-</h1>
diff --git a/packages/lms/src/lib/components/content/elements/h2.svelte b/packages/lms/src/lib/components/content/elements/h2.svelte
deleted file mode 100644
index df7cae0..0000000
--- a/packages/lms/src/lib/components/content/elements/h2.svelte
+++ /dev/null
@@ -1,9 +0,0 @@
-<script>
-	import Heading from './Heading.svelte';
-</script>
-
-<h2>
-	<Heading>
-		<slot />
-	</Heading>
-</h2>
diff --git a/packages/lms/src/lib/components/content/elements/h3.svelte b/packages/lms/src/lib/components/content/elements/h3.svelte
deleted file mode 100644
index b1c488f..0000000
--- a/packages/lms/src/lib/components/content/elements/h3.svelte
+++ /dev/null
@@ -1,9 +0,0 @@
-<script>
-	import Heading from './Heading.svelte';
-</script>
-
-<h3>
-	<Heading>
-		<slot />
-	</Heading>
-</h3>
diff --git a/packages/lms/src/lib/components/content/elements/h4.svelte b/packages/lms/src/lib/components/content/elements/h4.svelte
deleted file mode 100644
index a92a673..0000000
--- a/packages/lms/src/lib/components/content/elements/h4.svelte
+++ /dev/null
@@ -1,9 +0,0 @@
-<script>
-	import Heading from './Heading.svelte';
-</script>
-
-<h4>
-	<Heading>
-		<slot />
-	</Heading>
-</h4>
diff --git a/packages/lms/src/lib/components/content/elements/h5.svelte b/packages/lms/src/lib/components/content/elements/h5.svelte
deleted file mode 100644
index e63fd4d..0000000
--- a/packages/lms/src/lib/components/content/elements/h5.svelte
+++ /dev/null
@@ -1,9 +0,0 @@
-<script>
-	import Heading from './Heading.svelte';
-</script>
-
-<h5>
-	<Heading>
-		<slot />
-	</Heading>
-</h5>
diff --git a/packages/lms/src/lib/components/content/elements/h6.svelte b/packages/lms/src/lib/components/content/elements/h6.svelte
deleted file mode 100644
index e10d022..0000000
--- a/packages/lms/src/lib/components/content/elements/h6.svelte
+++ /dev/null
@@ -1,9 +0,0 @@
-<script>
-	import Heading from './Heading.svelte';
-</script>
-
-<h6>
-	<Heading>
-		<slot />
-	</Heading>
-</h6>
diff --git a/packages/lms/src/lib/components/footer/Footer.svelte b/packages/lms/src/lib/components/footer/Footer.svelte
index b217f06..17fc0ba 100644
--- a/packages/lms/src/lib/components/footer/Footer.svelte
+++ b/packages/lms/src/lib/components/footer/Footer.svelte
@@ -1,5 +1,3 @@
-<script lang="ts"></script>
-
 <footer class="flex gap-1 bg-surface-100-800-token">
 	<slot />
 </footer>
diff --git a/packages/lms/src/lib/components/header/Reader.svelte b/packages/lms/src/lib/components/header/Reader.svelte
index 03beb15..f856fa7 100644
--- a/packages/lms/src/lib/components/header/Reader.svelte
+++ b/packages/lms/src/lib/components/header/Reader.svelte
@@ -136,12 +136,12 @@
 				{/if}
 				<button on:click={playAudio} class="my-5 btn hover:bg-primary-hover-token p-1">Scream For Help!</button>
 				<audio bind:this={scream}>
-					<source src="/public/audio/silly_stuff/female_scream.wav" type="audio/wav" />
+					<source src="/audio/silly_stuff/female_scream.wav" type="audio/wav" />
 					Your browser does not support the audio element.
 				</audio>
 				<button on:click={playHorseAudio} class="my-5 btn hover:bg-primary-hover-token p-1">Horsing Around</button>
 				<audio bind:this={horse}>
-					<source src="/public/audio/silly_stuff/horse-neigh.mp3" type="audio/mpeg" />
+					<source src="/audio/silly_stuff/horse-neigh.mp3" type="audio/mpeg" />
 					Your browser does not support the audio element.
 				</audio>
 			</div>
diff --git a/packages/lms/src/lib/components/header/Search.svelte b/packages/lms/src/lib/components/header/Search.svelte
index b21fc3c..4003122 100644
--- a/packages/lms/src/lib/components/header/Search.svelte
+++ b/packages/lms/src/lib/components/header/Search.svelte
@@ -1,115 +1,115 @@
 <script lang="ts">
-	import { goto } from '$app/navigation';
-	import { getSearchResults } from '$lib/utils/fuseSearch/getSearchResults';
-	import { Autocomplete } from '@skeletonlabs/skeleton';
-	import type { AutocompleteOption } from '@skeletonlabs/skeleton';
-	import { parseRawSearchQuery } from '$lib/utils/fuseSearch/parseRawSearchQuery';
+  import { goto } from '$app/navigation';
+  import { getSearchResults } from '$lib/utils/fuseSearch/getSearchResults';
+  import type { AutocompleteOption } from '@skeletonlabs/skeleton';
+  import { parseRawSearchQuery } from '$lib/utils/fuseSearch/parseRawSearchQuery';
+  import type { EntityMeta } from '@mollify/types';
 
-	let searchQuery = '';
-	let searchResults: String[] = [];
-	let timer: string | number | NodeJS.Timeout | undefined;
-	let inputFocused = false;
-	let returnedResults = false;
-	let rawQuery = '';
+  type EntityResult = EntityMeta & AutocompleteOption;
 
-	function handleSubmit(event: { preventDefault: () => void }) {
-		goto(`/search?query=${encodeURIComponent(searchQuery)}`);
-		searchQuery = '';
-	}
+  let searchQuery = '';
+  let searchResults = new Array<EntityResult>();
+  let timer: number;
+  let inputFocused = false;
+  let returnedResults = false;
+  let rawQuery = '';
 
-	const debounceSearch = async () => {
-		clearTimeout(timer);
-		returnedResults = false;
-		if (searchQuery.length) {
-			await new Promise((resolve) => {
-				timer = setTimeout(async () => {
-					try {
-						const { query, filters } = parseRawSearchQuery(searchQuery);
-						rawQuery = query;
-						let results = await getSearchResults(query, filters);
-						searchResults = results.map((result: AutocompleteOption[]) => {
-							const { title, slug, ...other } = result;
-							return { label: title, value: slug, ...other };
-						});
-						console.log(query, filters);
-						console.log('results', searchResults);
-					} catch (error) {
-						console.log(error);
-					}
-				}, 500);
-			});
-		} else {
-			searchResults = [];
-		}
-	};
+  function handleSubmit(event: { preventDefault: () => void }) {
+    goto(`/search?query=${encodeURIComponent(searchQuery)}`);
+    searchQuery = '';
+  }
 
-	function handlePageChange() {
-		setTimeout(() => {
-			searchResults = [];
-			searchQuery = '';
-		}, 10);
-	}
+  const debounceSearch = async () => {
+    clearTimeout(timer);
+    returnedResults = false;
+    if (searchQuery.length) {
+      await new Promise(() => {
+        timer = window.setTimeout(async () => {
+          try {
+            const { query, filters } = parseRawSearchQuery(searchQuery);
+            rawQuery = query;
+            let results = await getSearchResults(query, filters);
+            searchResults = results.map((result: EntityResult) => {
+              const { title, slug, ...other } = result;
+			  return {
+				...result,
+				label: title,
+				value: slug,
+			  }
+            });
+          } catch (error) {
+            console.log(error);
+			alert("Search error, please check console")
+          }
+        }, 500);
+      });
+    } else {
+      searchResults = [];
+    }
+  };
 
-	function handleClickOutside(event: object) {
-		if (!event.target.closest('.wrapper') && !event.target.closest('.search-items')) {
-			handlePageChange();
-		}
-	}
+  function handlePageChange() {
+    setTimeout(() => {
+      searchResults = [];
+      searchQuery = '';
+    }, 10);
+  }
 
-	function handleSearchSelection(path) {
-		goto(path);
-	}
+  function handleClickOutside(event: Event) {
+    const target = event.target as HTMLElement;
+    if (!target.closest('.wrapper') && !target.closest('.search-items')) {
+      handlePageChange();
+    }
+  }
 
-	$: searchResults;
+  $: searchResults;
 </script>
 
 <svelte:window on:click={handleClickOutside} />
 <div class="max-w-sm relative">
-	<form
-		class="flex w-full sm:input-group sm:input-group-divider sm:grid-cols-[auto_1fr_auto]"
-		on:submit|preventDefault={handleSubmit}
-	>
-		<input
-			class="input hidden sm:block w-60"
-			type="search"
-			name="autocomplete-search"
-			placeholder="Search markdown content"
-			autocomplete="off"
-			bind:value={searchQuery}
-			on:input={async () => {
-				debounceSearch();
-			}}
-			on:focus={() => {
-				inputFocused = true;
-			}}
-			on:blur={() => {
-				inputFocused = false;
-			}}
-		/>
-		<button
-			class="btn hover:bg-primary-hover-token sm:variant-filled-primary sm:rounded-l-none sm:hover:bg-primary-active-token"
-			><i class="icon-f">search</i></button
-		>
-	</form>
-	{#if searchResults.length > 0}
-		<dl class="list-dl w-full max-h-48 p-4 overflow-y-auto absolute bg-surface-100-800-token">
-			{#each searchResults as item, i}
-				<div
-					class="hover:bg-primary-hover-token rounded-container-token"
-					on:click={() => {
-						handleSearchSelection(item.browserPath);
-					}}
-				>
-					<span class="flex-auto w-full fill-current transition-transform duration-[200ms]">
-						<dt class="truncate">{item.label}</dt>
-					</span>
-				</div>
-			{/each}
-		</dl>
-	{/if}
-	{#if searchResults.length === 0 && inputFocused && searchQuery.length >= 3 && returnedResults}
-		<div class="card w-full max-h-48 p-4 overflow-y-auto absolute">
-			<p>No Results Found</p>
-		</div>
-	{/if}
+  <form
+    class="flex w-full sm:input-group sm:input-group-divider sm:grid-cols-[auto_1fr_auto]"
+    on:submit|preventDefault={handleSubmit}
+  >
+    <input
+      class="input hidden sm:block w-60"
+      type="search"
+      name="autocomplete-search"
+      placeholder="Search markdown content"
+      autocomplete="off"
+      bind:value={searchQuery}
+      on:input={async () => {
+        debounceSearch();
+      }}
+      on:focus={() => {
+        inputFocused = true;
+      }}
+      on:blur={() => {
+        inputFocused = false;
+      }}
+    />
+    <button
+      class="btn hover:bg-primary-hover-token sm:variant-filled-primary sm:rounded-l-none sm:hover:bg-primary-active-token"
+      ><i class="icon-f">search</i></button
+    >
+  </form>
+  {#if searchResults.length > 0}
+    <dl class="list-dl w-full max-h-48 p-4 overflow-y-auto absolute bg-surface-100-800-token">
+      {#each searchResults as item, i}
+        <a
+          class="hover:bg-primary-hover-token rounded-container-token btn w-full text-left justify-content-start"
+          href={item.browserPath}
+        >
+          <span class="flex-auto w-full fill-current transition-transform duration-[200ms]">
+            <dt class="truncate">{item.label}</dt>
+          </span>
+        </a>
+      {/each}
+    </dl>
+  {/if}
+  {#if searchResults.length === 0 && inputFocused && searchQuery.length >= 3 && returnedResults}
+    <div class="card w-full max-h-48 p-4 overflow-y-auto absolute">
+      <p>No Results Found</p>
+    </div>
+  {/if}
 </div>
diff --git a/packages/lms/src/lib/components/navigation/icons/AddRemoveBookmarks.svelte b/packages/lms/src/lib/components/navigation/icons/AddRemoveBookmarks.svelte
index 90d2f16..01c6003 100644
--- a/packages/lms/src/lib/components/navigation/icons/AddRemoveBookmarks.svelte
+++ b/packages/lms/src/lib/components/navigation/icons/AddRemoveBookmarks.svelte
@@ -3,7 +3,7 @@
 	import { onMount } from 'svelte';
 	import * as storage from '$lib/utils/storage';
 	import { page } from '$app/stores';
-	import { AddRemoveBookmarks } from '$lib/utils/bookmarking/AddRemove';
+	import { type Bookmark, addRemoveBookmarks } from '$lib/utils/bookmarking/AddRemove';
 	import { bookmarks } from '$lib/stores/bookmarks';
 
 	let hasBookmarks = false;
@@ -28,8 +28,8 @@
 	});
 
 	async function onclick() {
-		const newBookmarks = await AddRemoveBookmarks();
-		bookmarks.set(newBookmarks);
+		const newBookmarks = await addRemoveBookmarks();
+		bookmarks.set(newBookmarks || new Array<Bookmark>());
 	}
 </script>
 
diff --git a/packages/lms/src/lib/components/search/SearchItem.svelte b/packages/lms/src/lib/components/search/SearchItem.svelte
deleted file mode 100644
index 8fd46ab..0000000
--- a/packages/lms/src/lib/components/search/SearchItem.svelte
+++ /dev/null
@@ -1,18 +0,0 @@
-<script lang="ts">
-	import { goto } from '$app/navigation';
-	import { createEventDispatcher } from 'svelte';
-
-	const dispatch = createEventDispatcher();
-
-	export let data: Object;
-</script>
-
-<div
-	class="py-1 hover:bg-primary-hover-token cursor-pointer"
-	on:click={() => {
-		dispatch('pageChange');
-		goto(data.browserPath);
-	}}
->
-	{data.title}
-</div>
diff --git a/packages/lms/src/lib/components/tags/Tag.svelte b/packages/lms/src/lib/components/tags/Tag.svelte
new file mode 100644
index 0000000..ccc46f3
--- /dev/null
+++ b/packages/lms/src/lib/components/tags/Tag.svelte
@@ -0,0 +1,7 @@
+<script lang="ts">
+	export let tag = "";
+</script>
+
+{#if tag}
+<a href={"/tags/" + tag} class="inline-block no-underline text-black px-1 bg-blue-200 rounded-md tag not-prose">{tag}</a>
+{/if}
\ No newline at end of file
diff --git a/packages/lms/src/lib/components/tags/Tags.svelte b/packages/lms/src/lib/components/tags/Tags.svelte
index 72968a8..a4a2607 100644
--- a/packages/lms/src/lib/components/tags/Tags.svelte
+++ b/packages/lms/src/lib/components/tags/Tags.svelte
@@ -1,23 +1,20 @@
 <script lang="ts">
-	export let data: Object;
+	import Tag from './Tag.svelte';
 
-	function handleTagClick() {
-		// Forward user to tag relevant page
-	}
+	export let tags = new Array<string>();
+	$: _tags = tags && Array.isArray(tags) ? tags.filter(Boolean) : [];
 </script>
 
-<div
-	class="tag"
-	on:click={handleTagClick}
-	on:keydown={(evt) => {
-		if (evt.key === 'Enter') handleTagClick;
-	}}
->
-	#{data}
-</div>
+{#if _tags.length}
+	<div class="tags gap-1 flex flex-wrap my-3">
+		{#each _tags as tag}
+			<Tag {tag} />
+		{/each}
+	</div>
+{/if}
 
 <style>
-	.tag {
-		color: var(--grey);
+	.tags {
+		grid-area: tags;
 	}
 </style>
diff --git a/packages/lms/src/lib/components/ui/Layout.svelte b/packages/lms/src/lib/components/ui/Layout.svelte
new file mode 100644
index 0000000..9fa7f0e
--- /dev/null
+++ b/packages/lms/src/lib/components/ui/Layout.svelte
@@ -0,0 +1,53 @@
+<script>
+	import Tags from '../tags/Tags.svelte';
+	import { TableOfContents } from '@skeletonlabs/skeleton';
+
+	export let title = '';
+	export let tags = [''];
+</script>
+
+<div class="content-grid">
+	{#if title}
+		<h1>{title}</h1>
+	{/if}
+	<Tags {tags} />
+	<div class="toc-container">
+		<TableOfContents width="w-auto" label="" target="#page" />
+	</div>
+	<div class="content">
+		<slot />
+	</div>
+</div>
+
+<style lang="scss">
+	.content-grid {
+		display: grid;
+		gap: 0 1rem;
+		grid-template-columns: minmax(0, 88ch) max-content;
+		grid-template-rows: auto auto 1fr;
+		grid-template-areas:
+			'heading toc'
+			'tags    toc'
+			'content toc';
+
+		& h1 {
+			grid-area: heading;
+		}
+
+		@media (max-width: 1200px) {
+			grid-template-columns: minmax(0, 88ch) min-content;
+		}
+
+		@media (max-width: 800px) {
+			display: block;
+		}
+	}
+
+	.content {
+		grid-area: content;
+	}
+
+	.toc-container {
+		grid-area: toc;
+	}
+</style>
diff --git a/packages/lms/src/lib/stores/bookmarks.ts b/packages/lms/src/lib/stores/bookmarks.ts
index 829abf8..24d3ba8 100644
--- a/packages/lms/src/lib/stores/bookmarks.ts
+++ b/packages/lms/src/lib/stores/bookmarks.ts
@@ -1,3 +1,4 @@
+import type { Bookmark } from '$lib/utils/bookmarking/AddRemove';
 import { writable } from 'svelte/store';
 
-export const bookmarks = writable([]);
+export const bookmarks = writable(new Array<Bookmark>());
diff --git a/packages/lms/src/lib/styles/_components.scss b/packages/lms/src/lib/styles/_components.scss
index b661413..1098500 100644
--- a/packages/lms/src/lib/styles/_components.scss
+++ b/packages/lms/src/lib/styles/_components.scss
@@ -1,24 +1,24 @@
 // icons
 @mixin icon {
-	font-family: 'Material Symbols Outlined';
-	font-style: normal;
-	font-size: 28px;
-	display: inline-block;
-	line-height: 1;
-	text-transform: none;
-	letter-spacing: normal;
-	word-wrap: normal;
-	white-space: nowrap;
-	direction: ltr;
-	font-variation-settings: 'FILL' 1, 'wght' 100, 'GRAD' -25, 'opsz' 48;
-	cursor: pointer;
+  font-family: 'Material Symbols Outlined';
+  font-style: normal;
+  font-size: 28px;
+  display: inline-block;
+  line-height: 1;
+  text-transform: none;
+  letter-spacing: normal;
+  word-wrap: normal;
+  white-space: nowrap;
+  direction: ltr;
+  font-variation-settings: 'FILL' 1, 'wght' 100, 'GRAD' -25, 'opsz' 48;
+  cursor: pointer;
 }
 
 .icon-f {
-	@include icon;
+  @include icon;
 }
 
 .icon-o {
-	@include icon;
-	font-variation-settings: 'FILL' 0;
-}
\ No newline at end of file
+  @include icon;
+  font-variation-settings: 'FILL' 0;
+}
diff --git a/packages/lms/src/lib/styles/_iframe.scss b/packages/lms/src/lib/styles/_iframe.scss
new file mode 100644
index 0000000..04b2c9e
--- /dev/null
+++ b/packages/lms/src/lib/styles/_iframe.scss
@@ -0,0 +1,3 @@
+iframe {
+  max-width: 100%;
+}
diff --git a/packages/lms/src/lib/styles/_markdown.scss b/packages/lms/src/lib/styles/_markdown.scss
index 27db6b8..270f4da 100644
--- a/packages/lms/src/lib/styles/_markdown.scss
+++ b/packages/lms/src/lib/styles/_markdown.scss
@@ -1,22 +1,22 @@
 //Custom colors
-  $primary: #2d265b;
-  $secondary: #afacc6;
-  $success: #a5dfba;
-  $info: #ebecb3;
-  $warning: #eebfbf;
-  $background: #aee6f2;
-  $white: #fff;
-  $black: #000;
-  
+$primary: #2d265b;
+$secondary: #afacc6;
+$success: #a5dfba;
+$info: #ebecb3;
+$warning: #eebfbf;
+$background: #aee6f2;
+$white: #fff;
+$black: #000;
+
 $theme-colors: (
-  "primary":    $primary,
-  "secondary":  $secondary,
-  "success":    $success,
-  "info":       $info,
-  "warning":    $warning,
-  "background": $background,
-  "white":      $white,
-  "black":      $black,
+  'primary': $primary,
+  'secondary': $secondary,
+  'success': $success,
+  'info': $info,
+  'warning': $warning,
+  'background': $background,
+  'white': $white,
+  'black': $black
 );
 
 //Custom fonts and spacing
@@ -46,19 +46,19 @@ $font-size-xl: 36px;
 .callout {
   border-radius: $border-radius-xs;
   border-left: solid $spacing-xs $primary;
-  padding: $spacing-s;  
+  padding: $spacing-s;
   margin-left: $spacing-s;
   font-style: $font-style;
   &.👍 {
     background-color: $background;
   }
-  &.💡{
+  &.💡 {
     background-color: $info;
   }
-  &.⛔{
+  &.⛔ {
     background-color: $warning;
   }
-  &.✅{
+  &.✅ {
     background-color: $success;
   }
 }
@@ -71,4 +71,4 @@ $font-size-xl: 36px;
 .callout p {
   padding-left: $spacing-xs;
   color: $black;
-}
\ No newline at end of file
+}
diff --git a/packages/lms/src/lib/styles/_permalink.scss b/packages/lms/src/lib/styles/_permalink.scss
new file mode 100644
index 0000000..5478658
--- /dev/null
+++ b/packages/lms/src/lib/styles/_permalink.scss
@@ -0,0 +1,4 @@
+.permalink {
+  margin-left: 0.5rem;
+  text-decoration: none;
+}
diff --git a/packages/lms/src/lib/styles/_toc.scss b/packages/lms/src/lib/styles/_toc.scss
new file mode 100644
index 0000000..9cec89e
--- /dev/null
+++ b/packages/lms/src/lib/styles/_toc.scss
@@ -0,0 +1,8 @@
+.toc {
+  position: sticky;
+  top: 1rem;
+
+  &-label {
+    display: none;
+  }
+}
diff --git a/packages/lms/src/lib/styles/styles.scss b/packages/lms/src/lib/styles/styles.scss
index 6395749..8d92b6b 100644
--- a/packages/lms/src/lib/styles/styles.scss
+++ b/packages/lms/src/lib/styles/styles.scss
@@ -1,2 +1,5 @@
 @import 'components';
 @import 'markdown';
+@import 'toc';
+@import 'permalink';
+@import 'iframe';
diff --git a/packages/lms/src/lib/utils/bookmarking/AddRemove.ts b/packages/lms/src/lib/utils/bookmarking/AddRemove.ts
index 056af62..206416f 100644
--- a/packages/lms/src/lib/utils/bookmarking/AddRemove.ts
+++ b/packages/lms/src/lib/utils/bookmarking/AddRemove.ts
@@ -3,69 +3,74 @@ import { toastStore } from '@skeletonlabs/skeleton';
 import type { ToastSettings } from '@skeletonlabs/skeleton';
 import * as storage from '$lib/utils/storage';
 
+export interface Bookmark {
+  url: string;
+  headings: string[];
+}
+
 /**
  * This function adds or removes a bookmark for the current page, or a specific heading
  * @param heading If provided, will add or remove a bookmark for the specific heading
  * @returns Updated bookmarks
  */
-export async function AddRemoveBookmarks(heading: string | null = null) {
-	if (!browser) return;
-	const currentUrl = decodeURIComponent(window.location.pathname);
-	let bookmarks: { url: string; headings: string[] }[] = storage.load('bookmarks') ? storage.load('bookmarks') : [];
-	// Try to find an existing bookmark for the current URL
-	let bookmark: { url: string; headings: string[] } | undefined = bookmarks.find((b) => b.url === currentUrl);
-	//deal with the usually svelte silliness fix
+export async function addRemoveBookmarks(heading: string | null = null) {
+  if (!browser) return;
+  const currentUrl = decodeURIComponent(window.location.pathname);
+  let bookmarks: Bookmark[] = storage.load('bookmarks') ? storage.load('bookmarks') : new Array<Bookmark>();
+  // Try to find an existing bookmark for the current URL
+  let bookmark: Bookmark | undefined = bookmarks.find((b) => b.url === currentUrl);
+  //deal with the usually svelte silliness fix
 
-	await new Promise<void>((resolve) => {
-		if (bookmark) {
-			if (heading === null) {
-				// If a bookmark already exists, remove it
-				bookmarks = bookmarks.filter((b) => b.url !== currentUrl);
+  await new Promise<void>((resolve) => {
+    if (bookmark) {
+      if (heading === null) {
+        // If a bookmark already exists, remove it
+        bookmarks = bookmarks.filter((b) => b.url !== currentUrl);
 
-				const toast: ToastSettings = {
-					message: 'All Bookmarks Removed For This Page.',
-					background: 'variant-filled-tertiary',
-					timeout: 2000
-				};
-				toastStore.trigger(toast);
-			} else {
-				if (bookmark.headings.includes(heading)) {
-					bookmark.headings = bookmark.headings.filter((h) => h !== heading);
-					const toast: ToastSettings = {
-						message: 'Bookmark Removed.',
-						background: 'variant-filled-tertiary',
-						timeout: 2000
-					};
-					toastStore.trigger(toast);
-				} else {
-					bookmark.headings.push(heading);
-					const toast: ToastSettings = {
-						message: 'Bookmark Added.',
-						background: 'variant-filled-success',
-						timeout: 2000
-					};
-					toastStore.trigger(toast);
-				}
-			}
-		} else {
-			// If no bookmark exists, add one
-			bookmark = {
-				url: currentUrl,
-				headings: heading === null ? [] : [heading]
-			};
-			bookmarks.push(bookmark);
-			const toast: ToastSettings = {
-				message: 'Bookmark Added.',
-				background: 'variant-filled-success',
-				timeout: 2000
-			};
-			toastStore.trigger(toast);
-		}
+        const toast: ToastSettings = {
+          message: 'All Bookmarks Removed For This Page.',
+          background: 'variant-filled-tertiary',
+          timeout: 2000
+        };
+        toastStore.trigger(toast);
+      } else {
+        if (bookmark.headings.includes(heading)) {
+          bookmark.headings = bookmark.headings.filter((h) => h !== heading);
+          const toast: ToastSettings = {
+            message: 'Bookmark Removed.',
+            background: 'variant-filled-tertiary',
+            timeout: 2000
+          };
+          toastStore.trigger(toast);
+        } else {
+          bookmark.headings.push(heading);
+          const toast: ToastSettings = {
+            message: 'Bookmark Added.',
+            background: 'variant-filled-success',
+            timeout: 2000
+          };
+          toastStore.trigger(toast);
+        }
+      }
+    } else {
+      // If no bookmark exists, add one
+      bookmark = {
+        url: currentUrl,
+        headings: heading === null ? [] : [heading]
+      };
+      bookmarks.push(bookmark);
+      const toast: ToastSettings = {
+        message: 'Bookmark Added.',
+        background: 'variant-filled-success',
+        timeout: 2000
+      };
+      toastStore.trigger(toast);
+    }
 
-		storage.save('bookmarks', bookmarks);
-		console.log('bookmarks', bookmarks);
-		resolve();
-	});
+    storage.save('bookmarks', bookmarks);
+    console.log('bookmarks', bookmarks);
+    resolve();
+  });
 
-	return bookmarks;
+  return bookmarks;
 }
diff --git a/packages/lms/src/lib/utils/fuseSearch/flattenData.ts b/packages/lms/src/lib/utils/fuseSearch/flattenData.ts
index 223b99f..853705c 100644
--- a/packages/lms/src/lib/utils/fuseSearch/flattenData.ts
+++ b/packages/lms/src/lib/utils/fuseSearch/flattenData.ts
@@ -1,13 +1,13 @@
 import type { EntityMeta } from '@mollify/types';
 
 export interface FuseItem extends Omit<EntityMeta, 'children'> {
-	parent: string | null;
-	type: string;
-	refIndex?: number;
-	score?: number;
-	children?: FuseItem[];
-	tags?: string[];
-	title: string;
+  parent: string | null;
+  type: string;
+  refIndex?: number;
+  score?: number;
+  children?: FuseItem[];
+  tags?: string[];
+  title: string;
 }
 
 /**
@@ -17,18 +17,18 @@ export interface FuseItem extends Omit<EntityMeta, 'children'> {
  * @returns The flattened data
  */
 export function flattenData(data: EntityMeta[], parent: string | null = null): FuseItem[] {
-	return data.flatMap((item) => {
-		const { children, ...itemWithoutChildren } = item;
+  return data.flatMap((item) => {
+    const { children, ...itemWithoutChildren } = item;
 
-		// Create a new array with the current item flattened
-		const flattenedItem = { ...itemWithoutChildren, parent: parent };
+    // Create a new array with the current item flattened
+    const flattenedItem = { ...itemWithoutChildren, parent: parent };
 
-		// If the item has children, recursively flatten them and add them to the flattened data
-		if (Array.isArray(children)) {
-			const flattenedChildren: FuseItem[] = flattenData(children, item.title);
-			return [flattenedItem, ...flattenedChildren];
-		}
+    // If the item has children, recursively flatten them and add them to the flattened data
+    if (Array.isArray(children)) {
+      const flattenedChildren: FuseItem[] = flattenData(children, item.title);
+      return [flattenedItem, ...flattenedChildren];
+    }
 
-		return [flattenedItem];
-	});
+    return [flattenedItem];
+  });
 }
diff --git a/packages/lms/src/lib/utils/fuseSearch/fuseSetup.ts b/packages/lms/src/lib/utils/fuseSearch/fuseSetup.ts
index e3c0b26..3c5a8df 100644
--- a/packages/lms/src/lib/utils/fuseSearch/fuseSetup.ts
+++ b/packages/lms/src/lib/utils/fuseSearch/fuseSetup.ts
@@ -4,98 +4,96 @@ import { removeStopWords } from './removeStopWords';
 import { flattenData, type FuseItem } from './flattenData';
 
 const options = {
-	includeScore: true,
-	// threshold 0 is more strict, 1 is more loose
-	threshold: 0.3,
-	limit: Infinity,
-	keys: [
-		{ name: 'title', weight: 0.7 },
-		{ name: 'tags', weight: 0.25 },
-		{ name: 'content', weight: 0.05 }
-	]
+  includeScore: true,
+  // threshold 0 is more strict, 1 is more loose
+  threshold: 0.3,
+  limit: Infinity,
+  keys: [
+    { name: 'title', weight: 0.7 },
+    { name: 'tags', weight: 0.25 },
+    { name: 'content', weight: 0.05 }
+  ]
 };
 
 export async function search(
-	searchQuery: string,
-	filters: {
-		institution?: string;
-		tags: string[];
-		types: string[];
-		exact: boolean;
-		exclusions: string[];
-	} = { institution: 'all', tags: [], types: [], exact: false, exclusions: [] }
+  searchQuery: string,
+  filters: {
+    institution?: string;
+    tags: string[];
+    types: string[];
+    exact: boolean;
+    exclusions: string[];
+  } = { institution: 'all', tags: [], types: [], exact: false, exclusions: [] }
 ) {
-	const data = getEntityMetaTree('src/routes/content', true);
+  const data = getEntityMetaTree('src/routes/content', true);
 
-	//filter institution
-	let dataInstitutionFilter = data;
-	if (filters.institution !== 'all') {
-		dataInstitutionFilter = data.filter(
-			(item) => item.title.toLowerCase() === filters.institution?.toLowerCase()
-		);
-	}
+  //filter institution
+  let dataInstitutionFilter = data;
+  if (filters.institution !== 'all') {
+    dataInstitutionFilter = data.filter((item) => item.title.toLowerCase() === filters.institution?.toLowerCase());
+  }
 
-	//flatten data
-	const flattenedData: FuseItem[] = flattenData(dataInstitutionFilter);
+  //flatten data
+  const flattenedData: FuseItem[] = flattenData(dataInstitutionFilter);
 
-	//filter type
-	let dataTypeFilter = flattenedData;
-	if (filters.types?.length > 0) {
-		dataTypeFilter = flattenedData.filter((item: FuseItem) => filters.types.includes(item.type));
-	}
+  //filter type
+  let dataTypeFilter = flattenedData;
+  if (filters.types?.length > 0) {
+    dataTypeFilter = flattenedData.filter((item: FuseItem) => filters.types.includes(item.type));
+  }
 
-	//exact search
-	if (filters.exact) {
-		options.threshold = 0;
-	}
+  //exact search
+  if (filters.exact) {
+    options.threshold = 0;
+  }
 
-	const fuse = new Fuse(dataTypeFilter, options);
+  const fuse = new Fuse(dataTypeFilter, options);
 
-	//remove stop words
-	searchQuery = removeStopWords(searchQuery);
+  //remove stop words
+  searchQuery = removeStopWords(searchQuery);
 
-	const searchResults = await fuse.search(searchQuery);
+  const searchResults = await fuse.search(searchQuery);
 
-	//filter stuff
-	const reducedData = searchResults.reduce((array: FuseItem[], item: Fuse.FuseResult<FuseItem>) => {
-		item.item.refIndex = item.refIndex;
-		item.item.score = item.score;
-		delete item.item.content;
-		delete item.item.filePath;
-		array.push(item.item);
-		return array;
-	}, []);
+  //filter stuff
+  const reducedData = searchResults.reduce((array: FuseItem[], item: Fuse.FuseResult<FuseItem>) => {
+    item.item.refIndex = item.refIndex;
+    item.item.score = item.score;
+    delete item.item.content;
+    delete item.item.filePath;
+    array.push(item.item);
+    return array;
+  }, []);
 
-	let filterExclusions = reducedData;
-	if (filters.exclusions?.length > 0) {
-		filterExclusions = reducedData.filter((item: FuseItem) => {
-			// Check for any excluded words in the title
-			filters.exclusions = filters.exclusions.map((word: string) => word.toLowerCase());
-			const titleWords = item.title.toLowerCase().split(' ');
-			if (titleWords.some((word: string) => filters.exclusions.includes(word.toLowerCase()))) {
-				return false;
-			}
-			// Check for any excluded tags
-			if (item.tags?.some((tag: string) => filters.exclusions.includes(tag.toLowerCase()))) {
-				return false;
-			}
-			return true;
-		});
-	}
+  let filterExclusions = reducedData;
+  if (filters.exclusions?.length > 0) {
+    filterExclusions = reducedData.filter((item: FuseItem) => {
+      // Check for any excluded words in the title
+      filters.exclusions = filters.exclusions.map((word: string) => word.toLowerCase());
+      const titleWords = item.title.toLowerCase().split(' ');
+      if (titleWords.some((word: string) => filters.exclusions.includes(word.toLowerCase()))) {
+        return false;
+      }
+      // Check for any excluded tags
+      if (item.tags?.some((tag: string) => filters.exclusions.includes(tag.toLowerCase()))) {
+        return false;
+      }
+      return true;
+    });
+  }
 
-	let filterTags = filterExclusions;
-	if (filters.tags?.length > 0) {
-		filterExclusions = filterExclusions.map((item) => ({
-			...item,
-			tags: item.tags?.map((tag: string) => tag.toLowerCase())
-		}));
-		filters.tags = filters.tags.map((tag: string) => tag.toLowerCase());
+  let filterTags = filterExclusions;
+  if (filters.tags?.length > 0) {
+    filterExclusions = filterExclusions.map((item) => ({
+      ...item,
+      tags: item.tags?.map((tag: string) => tag.toLowerCase())
+    }));
+    filters.tags = filters.tags.map((tag: string) => tag.toLowerCase());
 
-		console.log(filterExclusions[0]?.tags);
-		filterTags = filterExclusions.filter((item) =>
-			item.tags?.some((tag: string) => filters.tags.includes(tag.toLowerCase()))
-		);
-	}
+    console.log(filterExclusions[0]?.tags);
+    filterTags = filterExclusions.filter((item) =>
+      item.tags?.some((tag: string) => filters.tags.includes(tag.toLowerCase()))
+    );
+  }
 
-	return filterTags;
+  return filterTags;
 }
diff --git a/packages/lms/src/lib/utils/fuseSearch/generateRawSearchQuery.ts b/packages/lms/src/lib/utils/fuseSearch/generateRawSearchQuery.ts
index ff0012a..99151c0 100644
--- a/packages/lms/src/lib/utils/fuseSearch/generateRawSearchQuery.ts
+++ b/packages/lms/src/lib/utils/fuseSearch/generateRawSearchQuery.ts
@@ -12,35 +12,35 @@
  * console.log(rawSearchQuery); // "search query" !excluded type:"type, search" tags:"tag, search" institution:"institution search" title:"title search"
  */
 export function generateRawSearchQuery(
-	searchQuery: string,
-	searchExclusions: string,
-	searchTypes: string[],
-	searchTags: string[],
-	selectedInstitution: string,
-	searchQueryExact: boolean
+  searchQuery: string,
+  searchExclusions: string,
+  searchTypes: string[],
+  searchTags: string[],
+  selectedInstitution: string,
+  searchQueryExact: boolean
 ) {
-	let rawSearchQuery = searchQuery;
+  let rawSearchQuery = searchQuery;
 
-	if (searchQueryExact) {
-		rawSearchQuery = `"${rawSearchQuery}"`;
-	}
+  if (searchQueryExact) {
+    rawSearchQuery = `"${rawSearchQuery}"`;
+  }
 
-	if (searchExclusions.split(', ').length > 0 && searchExclusions.trim() !== '') {
-		searchExclusions.split(', ').forEach((exclusion) => {
-			rawSearchQuery += ` !${exclusion}`;
-		});
-	}
+  if (searchExclusions.split(', ').length > 0 && searchExclusions.trim() !== '') {
+    searchExclusions.split(', ').forEach((exclusion) => {
+      rawSearchQuery += ` !${exclusion}`;
+    });
+  }
 
-	if (searchTypes.length > 0) {
-		rawSearchQuery += ` types:"${searchTypes.join(', ')}"`;
-	}
+  if (searchTypes.length > 0) {
+    rawSearchQuery += ` types:"${searchTypes.join(', ')}"`;
+  }
 
-	if (searchTags.length > 0) {
-		rawSearchQuery += ` tags:"${searchTags.join(', ')}"`;
-	}
+  if (searchTags.length > 0) {
+    rawSearchQuery += ` tags:"${searchTags.join(', ')}"`;
+  }
 
-	if (selectedInstitution !== 'all') {
-		rawSearchQuery += ` institution:"${selectedInstitution}"`;
-	}
-	return rawSearchQuery;
+  if (selectedInstitution !== 'all') {
+    rawSearchQuery += ` institution:"${selectedInstitution}"`;
+  }
+  return rawSearchQuery;
 }
diff --git a/packages/lms/src/lib/utils/fuseSearch/getSearchResults.ts b/packages/lms/src/lib/utils/fuseSearch/getSearchResults.ts
index 93c7654..3b22736 100644
--- a/packages/lms/src/lib/utils/fuseSearch/getSearchResults.ts
+++ b/packages/lms/src/lib/utils/fuseSearch/getSearchResults.ts
@@ -1,28 +1,28 @@
 export type FiltersType = {
-	institution: string;
-	types: string[];
-	tags: string[];
-	exact: boolean;
-	exclusions: string[];
+  institution: string;
+  types: string[];
+  tags: string[];
+  exact: boolean;
+  exclusions: string[];
 };
 
 export async function getSearchResults(
-	searchQuery: string,
-	filters: FiltersType = { institution: 'all', types: [], tags: [], exact: false, exclusions: [] }
+  searchQuery: string,
+  filters: FiltersType = { institution: 'all', types: [], tags: [], exact: false, exclusions: [] }
 ) {
-	try {
-		const response = await fetch('/api/search', {
-			method: 'POST',
-			headers: {
-				'Content-Type': 'application/json'
-			},
-			body: JSON.stringify({ searchQuery, filters })
-		});
+  try {
+    const response = await fetch('/api/search', {
+      method: 'POST',
+      headers: {
+        'Content-Type': 'application/json'
+      },
+      body: JSON.stringify({ searchQuery, filters })
+    });
 
-		const data = await response.json();
+    const data = await response.json();
 
-		return await data;
-	} catch (e) {
-		console.log(e);
-	}
+    return await data;
+  } catch (e) {
+    console.log(e);
+  }
 }
diff --git a/packages/lms/src/lib/utils/fuseSearch/parseRawSearchQuery.ts b/packages/lms/src/lib/utils/fuseSearch/parseRawSearchQuery.ts
index fe3ef85..6f45800 100644
--- a/packages/lms/src/lib/utils/fuseSearch/parseRawSearchQuery.ts
+++ b/packages/lms/src/lib/utils/fuseSearch/parseRawSearchQuery.ts
@@ -13,65 +13,65 @@
  * console.log(filters.exact); // true
  */
 export function parseRawSearchQuery(rawSearchQuery: string) {
-	let query = '';
-	const filters: {
-		exclusions: string[];
-		types: string[];
-		tags: string[];
-		institution: string;
-		exact: boolean;
-	} = {
-		exclusions: [],
-		types: [],
-		tags: [],
-		institution: '',
-		exact: false
-	};
+  let query = '';
+  const filters: {
+    exclusions: string[];
+    types: string[];
+    tags: string[];
+    institution: string;
+    exact: boolean;
+  } = {
+    exclusions: [],
+    types: [],
+    tags: [],
+    institution: '',
+    exact: false
+  };
 
-	// carve out the various filters
-	const institutionMatch = rawSearchQuery.match(/institution:"([^"]*)"/);
-	if (institutionMatch) {
-		filters.institution = institutionMatch[1];
-		rawSearchQuery = rawSearchQuery.replace(/institution:"([^"]*)"/, '');
-	}
+  // carve out the various filters
+  const institutionMatch = rawSearchQuery.match(/institution:"([^"]*)"/);
+  if (institutionMatch) {
+    filters.institution = institutionMatch[1];
+    rawSearchQuery = rawSearchQuery.replace(/institution:"([^"]*)"/, '');
+  }
 
-	if (filters.institution === '') {
-		filters.institution = 'all';
-	}
+  if (filters.institution === '') {
+    filters.institution = 'all';
+  }
 
-	const typeMatch = rawSearchQuery.match(/types:"([^"]*)"/);
-	if (typeMatch) {
-		filters.types = typeMatch[1].split(', ');
-		rawSearchQuery = rawSearchQuery.replace(/types:"([^"]*)"/, '');
-	}
+  const typeMatch = rawSearchQuery.match(/types:"([^"]*)"/);
+  if (typeMatch) {
+    filters.types = typeMatch[1].split(', ');
+    rawSearchQuery = rawSearchQuery.replace(/types:"([^"]*)"/, '');
+  }
 
-	const tagsMatch = rawSearchQuery.match(/tags:"([^"]*)"/);
-	if (tagsMatch) {
-		filters.tags = tagsMatch[1].split(', ');
-		rawSearchQuery = rawSearchQuery.replace(/tags:"([^"]*)"/, '');
-	}
+  const tagsMatch = rawSearchQuery.match(/tags:"([^"]*)"/);
+  if (tagsMatch) {
+    filters.tags = tagsMatch[1].split(', ');
+    rawSearchQuery = rawSearchQuery.replace(/tags:"([^"]*)"/, '');
+  }
 
-	// Split remaining string by space to get words, but don't split spaces inside quotes
-	const words = rawSearchQuery.match(/(?:[^\s"]+|"[^"]*")+/g);
+  // Split remaining string by space to get words, but don't split spaces inside quotes
+  const words = rawSearchQuery.match(/(?:[^\s"]+|"[^"]*")+/g);
 
-	if (words) {
-		// Process each word
-		for (const word of words) {
-			if (word.startsWith('!')) {
-				filters.exclusions.push(word.slice(1));
-			} else {
-				query += word + ' ';
-			}
-		}
-		query = query.trim();
-	}
+  if (words) {
+    // Process each word
+    for (const word of words) {
+      if (word.startsWith('!')) {
+        filters.exclusions.push(word.slice(1));
+      } else {
+        query += word + ' ';
+      }
+    }
+    query = query.trim();
+  }
 
-	// Remove quotes if they exist and apply exact search??
-	const startsAndEndsWithQuotes = /^".*"$/;
-	if (query.match(startsAndEndsWithQuotes)) {
-		query = query.slice(1, -1);
-		filters.exact = true;
-	}
+  // Remove quotes if they exist and apply exact search??
+  const startsAndEndsWithQuotes = /^".*"$/;
+  if (query.match(startsAndEndsWithQuotes)) {
+    query = query.slice(1, -1);
+    filters.exact = true;
+  }
 
-	return { query, filters };
+  return { query, filters };
 }
diff --git a/packages/lms/src/lib/utils/fuseSearch/removeStopWords.ts b/packages/lms/src/lib/utils/fuseSearch/removeStopWords.ts
index f4534db..0639a05 100644
--- a/packages/lms/src/lib/utils/fuseSearch/removeStopWords.ts
+++ b/packages/lms/src/lib/utils/fuseSearch/removeStopWords.ts
@@ -1,8 +1,8 @@
 import { stopWords } from './stopWords';
 
 export function removeStopWords(text: string) {
-	return text
-		.split(' ')
-		.filter((word) => !stopWords.has(word.toLowerCase()))
-		.join(' ');
+  return text
+    .split(' ')
+    .filter((word) => !stopWords.has(word.toLowerCase()))
+    .join(' ');
 }
diff --git a/packages/lms/src/lib/utils/fuseSearch/stopWords.ts b/packages/lms/src/lib/utils/fuseSearch/stopWords.ts
index 36f78a2..aaba5e5 100644
--- a/packages/lms/src/lib/utils/fuseSearch/stopWords.ts
+++ b/packages/lms/src/lib/utils/fuseSearch/stopWords.ts
@@ -1,177 +1,177 @@
 // Probably need a more comprehensive list of stop words
 export const stopWords = new Set([
-	'a',
-	'about',
-	'above',
-	'after',
-	'again',
-	'against',
-	'all',
-	'am',
-	'an',
-	'and',
-	'any',
-	'are',
-	"aren't",
-	'as',
-	'at',
-	'be',
-	'because',
-	'been',
-	'before',
-	'being',
-	'below',
-	'between',
-	'both',
-	'but',
-	'by',
-	"can't",
-	'cannot',
-	'could',
-	"couldn't",
-	'did',
-	"didn't",
-	'do',
-	'does',
-	"doesn't",
-	'doing',
-	"don't",
-	'down',
-	'during',
-	'each',
-	'few',
-	'for',
-	'from',
-	'further',
-	'had',
-	"hadn't",
-	'has',
-	"hasn't",
-	'have',
-	"haven't",
-	'having',
-	'he',
-	"he'd",
-	"he'll",
-	"he's",
-	'her',
-	'here',
-	"here's",
-	'hers',
-	'herself',
-	'him',
-	'himself',
-	'his',
-	'how',
-	"how's",
-	'i',
-	"i'd",
-	"i'll",
-	"i'm",
-	"i've",
-	'if',
-	'in',
-	'into',
-	'is',
-	"isn't",
-	'it',
-	"it's",
-	'its',
-	'itself',
-	"let's",
-	'me',
-	'more',
-	'most',
-	"mustn't",
-	'my',
-	'myself',
-	'no',
-	'nor',
-	'not',
-	'of',
-	'off',
-	'on',
-	'once',
-	'only',
-	'or',
-	'other',
-	'ought',
-	'our',
-	'ours',
-	'ourselves',
-	'out',
-	'over',
-	'own',
-	'same',
-	"shan't",
-	'she',
-	"she'd",
-	"she'll",
-	"she's",
-	'should',
-	"shouldn't",
-	'so',
-	'some',
-	'such',
-	'than',
-	'that',
-	"that's",
-	'the',
-	'their',
-	'theirs',
-	'them',
-	'themselves',
-	'then',
-	'there',
-	"there's",
-	'these',
-	'they',
-	"they'd",
-	"they'll",
-	"they're",
-	"they've",
-	'this',
-	'those',
-	'through',
-	'to',
-	'too',
-	'under',
-	'until',
-	'up',
-	'very',
-	'was',
-	"wasn't",
-	'we',
-	"we'd",
-	"we'll",
-	"we're",
-	"we've",
-	'were',
-	"weren't",
-	'what',
-	"what's",
-	'when',
-	"when's",
-	'where',
-	"where's",
-	'which',
-	'while',
-	'who',
-	"who's",
-	'whom',
-	'why',
-	"why's",
-	'with',
-	"won't",
-	'would',
-	"wouldn't",
-	'you',
-	"you'd",
-	"you'll",
-	"you're",
-	"you've",
-	'your',
-	'yours',
-	'yourself',
-	'yourselves'
+  'a',
+  'about',
+  'above',
+  'after',
+  'again',
+  'against',
+  'all',
+  'am',
+  'an',
+  'and',
+  'any',
+  'are',
+  "aren't",
+  'as',
+  'at',
+  'be',
+  'because',
+  'been',
+  'before',
+  'being',
+  'below',
+  'between',
+  'both',
+  'but',
+  'by',
+  "can't",
+  'cannot',
+  'could',
+  "couldn't",
+  'did',
+  "didn't",
+  'do',
+  'does',
+  "doesn't",
+  'doing',
+  "don't",
+  'down',
+  'during',
+  'each',
+  'few',
+  'for',
+  'from',
+  'further',
+  'had',
+  "hadn't",
+  'has',
+  "hasn't",
+  'have',
+  "haven't",
+  'having',
+  'he',
+  "he'd",
+  "he'll",
+  "he's",
+  'her',
+  'here',
+  "here's",
+  'hers',
+  'herself',
+  'him',
+  'himself',
+  'his',
+  'how',
+  "how's",
+  'i',
+  "i'd",
+  "i'll",
+  "i'm",
+  "i've",
+  'if',
+  'in',
+  'into',
+  'is',
+  "isn't",
+  'it',
+  "it's",
+  'its',
+  'itself',
+  "let's",
+  'me',
+  'more',
+  'most',
+  "mustn't",
+  'my',
+  'myself',
+  'no',
+  'nor',
+  'not',
+  'of',
+  'off',
+  'on',
+  'once',
+  'only',
+  'or',
+  'other',
+  'ought',
+  'our',
+  'ours',
+  'ourselves',
+  'out',
+  'over',
+  'own',
+  'same',
+  "shan't",
+  'she',
+  "she'd",
+  "she'll",
+  "she's",
+  'should',
+  "shouldn't",
+  'so',
+  'some',
+  'such',
+  'than',
+  'that',
+  "that's",
+  'the',
+  'their',
+  'theirs',
+  'them',
+  'themselves',
+  'then',
+  'there',
+  "there's",
+  'these',
+  'they',
+  "they'd",
+  "they'll",
+  "they're",
+  "they've",
+  'this',
+  'those',
+  'through',
+  'to',
+  'too',
+  'under',
+  'until',
+  'up',
+  'very',
+  'was',
+  "wasn't",
+  'we',
+  "we'd",
+  "we'll",
+  "we're",
+  "we've",
+  'were',
+  "weren't",
+  'what',
+  "what's",
+  'when',
+  "when's",
+  'where',
+  "where's",
+  'which',
+  'while',
+  'who',
+  "who's",
+  'whom',
+  'why',
+  "why's",
+  'with',
+  "won't",
+  'would',
+  "wouldn't",
+  'you',
+  "you'd",
+  "you'll",
+  "you're",
+  "you've",
+  'your',
+  'yours',
+  'yourself',
+  'yourselves'
 ]);
diff --git a/packages/lms/src/lib/utils/fuseSearch/updateQueryString.ts b/packages/lms/src/lib/utils/fuseSearch/updateQueryString.ts
index 8053e52..5fb1b7b 100644
--- a/packages/lms/src/lib/utils/fuseSearch/updateQueryString.ts
+++ b/packages/lms/src/lib/utils/fuseSearch/updateQueryString.ts
@@ -1,7 +1,7 @@
 export function updateQueryString(newQuery: { [key: string]: string }) {
-	const newUrl = new URL(window.location.href);
-	newUrl.search = new URLSearchParams(newQuery).toString();
+  const newUrl = new URL(window.location.href);
+  newUrl.search = new URLSearchParams(newQuery).toString();
 
-	// Modify the URL without refreshing the page
-	window.history.pushState({ path: newUrl.href }, '', newUrl.href);
+  // Modify the URL without refreshing the page
+  window.history.pushState({ path: newUrl.href }, '', newUrl.href);
 }
diff --git a/packages/lms/src/lib/utils/getCurrentPageEntityMeta.ts b/packages/lms/src/lib/utils/getCurrentPageEntityMeta.ts
index a6298e6..1458dab 100644
--- a/packages/lms/src/lib/utils/getCurrentPageEntityMeta.ts
+++ b/packages/lms/src/lib/utils/getCurrentPageEntityMeta.ts
@@ -7,37 +7,37 @@ import type { EntityMeta } from '@mollify/types';
  * @param stopAtCourse whether to stop at type course or not
  */
 export function getCurrentPageEntityMeta(
-	contentArray: EntityMeta[],
-	keys: string[],
-	stopAtCourse = true
+  contentArray: EntityMeta[],
+  keys: string[],
+  stopAtCourse = true
 ): EntityMeta | undefined {
-	if (!contentArray || !keys || keys.length === 0 || !contentArray.length) {
-		return undefined;
-	}
+  if (!contentArray || !keys || keys.length === 0 || !contentArray.length) {
+    return undefined;
+  }
 
-	const currentObject = contentArray.filter((item) => item.title === keys[0]);
+  const currentObject = contentArray.filter((item) => item.title === keys[0]);
 
-	if (currentObject.length === 0 || currentObject.length > 1) {
-		return undefined;
-	}
+  if (currentObject.length === 0 || currentObject.length > 1) {
+    return undefined;
+  }
 
-	// If the current object is a course, module, or lesson, return it
-	if (currentObject[0].type == 'Course' && stopAtCourse) {
-		return currentObject[0];
-	}
+  // If the current object is a course, module, or lesson, return it
+  if (currentObject[0].type == 'Course' && stopAtCourse) {
+    return currentObject[0];
+  }
 
-	if (currentObject[0].foldername === keys[0] && keys.length !== 1) {
-		if (currentObject[0].children) {
-			const rest = keys.slice(1);
-			const child = currentObject[0].children.filter((child) => child.title === rest[0]);
-			if (child.length === 0 || child.length > 1) {
-				return undefined;
-			}
-			return getCurrentPageEntityMeta(child, rest);
-		}
-	} else if (currentObject[0].foldername === keys[0]) {
-		return currentObject[0];
-	}
+  if (currentObject[0].foldername === keys[0] && keys.length !== 1) {
+    if (currentObject[0].children) {
+      const rest = keys.slice(1);
+      const child = currentObject[0].children.filter((child) => child.title === rest[0]);
+      if (child.length === 0 || child.length > 1) {
+        return undefined;
+      }
+      return getCurrentPageEntityMeta(child, rest);
+    }
+  } else if (currentObject[0].foldername === keys[0]) {
+    return currentObject[0];
+  }
 
-	return undefined;
+  return undefined;
 }
diff --git a/packages/lms/src/lib/utils/getEntityFrontmatter.ts b/packages/lms/src/lib/utils/getEntityFrontmatter.ts
index bace51f..4dffe52 100644
--- a/packages/lms/src/lib/utils/getEntityFrontmatter.ts
+++ b/packages/lms/src/lib/utils/getEntityFrontmatter.ts
@@ -3,28 +3,28 @@ import matter from 'gray-matter';
 import type { EntityBase } from '@mollify/types';
 
 export function getEntityFrontmatter(entityPath: string, textBody = false): EntityBase {
-	if (!fs.existsSync(entityPath)) {
-		throw new Error(`Content file does not exist: ${entityPath}`);
-	}
+  if (!fs.existsSync(entityPath)) {
+    throw new Error(`Content file does not exist: ${entityPath}`);
+  }
 
-	const rawContent = fs.readFileSync(entityPath, 'utf-8');
-	const { data, content } = matter(rawContent);
-	const contentString = Array.isArray(content) ? content.join('') : content;
+  const rawContent = fs.readFileSync(entityPath, 'utf-8');
+  const { data, content } = matter(rawContent);
+  const contentString = Array.isArray(content) ? content.join('') : content;
 
-	const Entity: EntityBase = {
-		...data,
-		title: data.title,
-		type: data.type,
-		tags: data.tags,
-		previous: data.previous,
-		content: contentString
-	};
+  const Entity: EntityBase = {
+    ...data,
+    title: data.title,
+    type: data.type,
+    tags: data.tags,
+    previous: data.previous,
+    content: contentString
+  };
 
-	if (!textBody) {
-		delete Entity.content;
-	}
+  if (!textBody) {
+    delete Entity.content;
+  }
 
-	return Entity;
+  return Entity;
 }
 
 export default getEntityFrontmatter;
diff --git a/packages/lms/src/lib/utils/getEntityMeta.ts b/packages/lms/src/lib/utils/getEntityMeta.ts
index 22f9877..a7b7866 100644
--- a/packages/lms/src/lib/utils/getEntityMeta.ts
+++ b/packages/lms/src/lib/utils/getEntityMeta.ts
@@ -9,4 +9,4 @@ export default function getEntityMeta(address: string): EntityMeta {
   const children = getEntityChildren(address);
 
   return { ...metadata, children, address, slug };
-}
\ No newline at end of file
+}
diff --git a/packages/lms/src/lib/utils/getEntityMetaTree.ts b/packages/lms/src/lib/utils/getEntityMetaTree.ts
index 8d773be..b4c6a59 100644
--- a/packages/lms/src/lib/utils/getEntityMetaTree.ts
+++ b/packages/lms/src/lib/utils/getEntityMetaTree.ts
@@ -11,50 +11,50 @@ import getEntitySlug from './getEntitySlug';
  * @returns A nested object containing the parsed markdown files
  */
 export function getEntityMetaTree(dir: string, content = false) {
-	function walkSync(currentDir: string) {
-		let currentObject = {} as EntityMeta;
-		const children: EntityMeta[] = [];
-		// Get the files in the current directory
-		const files = fs.readdirSync(currentDir);
-		files.forEach((filename) => {
-			// Create the full file path check if it is a directory or a markdown file.
-			const filePath = path.join(currentDir, filename);
-			const stat = fs.statSync(filePath);
-			if (stat.isDirectory()) {
-				// Recursively call walkSync with the current directory and the current object
-				children.push(walkSync(filePath));
-			} else if (path.extname(filename) === '.md') {
-				// If the current item is a markdown file, read the file and parse the frontmatter
-				const Entity = getEntityFrontmatter(filePath, content);
-				const slug = getEntitySlug(filePath);
-				// browserPath is the path relative to the browser
-				const browserPath = filePath
-					.replaceAll('\\', '/')
-					.replace('src/routes/content', '/content')
-					.replace('+page.md', '');
-				currentObject = {
-					...Entity,
-					slug,
-					address: filePath,
-					foldername: path.basename(currentDir),
-					browserPath,
-					children: []
-				};
-			}
-		});
+  function walkSync(currentDir: string) {
+    let currentObject = {} as EntityMeta;
+    const children: EntityMeta[] = [];
+    // Get the files in the current directory
+    const files = fs.readdirSync(currentDir);
+    files.forEach((filename) => {
+      // Create the full file path check if it is a directory or a markdown file.
+      const filePath = path.join(currentDir, filename);
+      const stat = fs.statSync(filePath);
+      if (stat.isDirectory()) {
+        // Recursively call walkSync with the current directory and the current object
+        children.push(walkSync(filePath));
+      } else if (path.extname(filename) === '.md') {
+        // If the current item is a markdown file, read the file and parse the frontmatter
+        const Entity = getEntityFrontmatter(filePath, content);
+        const slug = getEntitySlug(filePath);
+        // browserPath is the path relative to the browser
+        const browserPath = filePath
+          .replaceAll('\\', '/')
+          .replace('src/routes/content', '/content')
+          .replace('+page.md', '');
+        currentObject = {
+          ...Entity,
+          slug,
+          address: filePath,
+          foldername: path.basename(currentDir),
+          browserPath,
+          children: []
+        };
+      }
+    });
 
-		if (children.length > 0 || currentObject.type != 'Institution') {
-			currentObject.children = sortChildrenByDependency(children);
-		}
+    if (children.length > 0 || currentObject.type != 'Institution') {
+      currentObject.children = sortChildrenByDependency(children);
+    }
 
-		return currentObject;
-	}
+    return currentObject;
+  }
 
-	const institutes = fs.readdirSync(dir);
-	const data = institutes.map((institute) => {
-		const instituteDir = path.join(dir, institute);
-		return walkSync(instituteDir);
-	});
+  const institutes = fs.readdirSync(dir);
+  const data = institutes.map((institute) => {
+    const instituteDir = path.join(dir, institute);
+    return walkSync(instituteDir);
+  });
 
-	return data;
+  return data;
 }
diff --git a/packages/lms/src/lib/utils/getEntitySlug.ts b/packages/lms/src/lib/utils/getEntitySlug.ts
index fe44947..04342c7 100644
--- a/packages/lms/src/lib/utils/getEntitySlug.ts
+++ b/packages/lms/src/lib/utils/getEntitySlug.ts
@@ -1,17 +1,15 @@
 import path from 'path';
 
 export default function getEntitySlug(address: string): string {
-	const fullPath = path.resolve(address);
-	const pageFileName = '+page.md';
+  const fullPath = path.resolve(address);
+  const pageFileName = '+page.md';
 
-	if (!fullPath.endsWith(pageFileName)) {
-		throw new Error(
-			`Entity file does not have the expected file name: ${fullPath} [${pageFileName}]`
-		);
-	}
+  if (!fullPath.endsWith(pageFileName)) {
+    throw new Error(`Entity file does not have the expected file name: ${fullPath} [${pageFileName}]`);
+  }
 
-	const entityFolder = path.dirname(fullPath);
-	const slug = path.basename(entityFolder);
+  const entityFolder = path.dirname(fullPath);
+  const slug = path.basename(entityFolder);
 
-	return slug;
+  return slug;
 }
diff --git a/packages/lms/src/lib/utils/remarkPlugins/addHeadingIds.js b/packages/lms/src/lib/utils/remarkPlugins/addHeadingIds.js
deleted file mode 100644
index 97c3a3a..0000000
--- a/packages/lms/src/lib/utils/remarkPlugins/addHeadingIds.js
+++ /dev/null
@@ -1,22 +0,0 @@
-//might need this sometimes I think the id isn't added quick enough in the layout for heading links to work.
-export function addHeadingIds() {
-	return function (tree) {
-		try {
-			tree.children.forEach((node) => {
-				if (node.type === 'heading') {
-					// Assume the id of the section is the same as the text of the heading
-					const id = node.children[0].value.toLowerCase().replace(/\s/g, '-');
-
-					// Add the id attribute to the h element
-					node.data = {
-						hProperties: {
-							id: id
-						}
-					};
-				}
-			});
-		} catch (e) {
-			console.error(e);
-		}
-	};
-}
diff --git a/packages/lms/src/lib/utils/remarkPlugins/createTagLinks.js b/packages/lms/src/lib/utils/remarkPlugins/createTagLinks.js
deleted file mode 100644
index d4b331c..0000000
--- a/packages/lms/src/lib/utils/remarkPlugins/createTagLinks.js
+++ /dev/null
@@ -1,40 +0,0 @@
-import yaml from 'js-yaml';
-import { u } from 'unist-builder';
-
-/**
- * This plugin creates a container for tags and appends all the tags into it and places it after the first heading on the page.
- */
-export function createTagLinks() {
-	return function (tree) {
-		try {
-			const doc = yaml.load(tree.children[0].value);
-			const tags = doc.tags;
-
-			if (tags && Array.isArray(tags)) {
-				// Find the first h1 node
-				const h1Index = tree.children.findIndex((node) => node.type === 'heading' && node.depth === 1);
-
-				if (h1Index !== -1) {
-					// Create a container for the tags
-					let tagContainer = '<div class="flex flex-wrap">';
-
-					// Convert tags to markdown links and add them to the container
-					tags.forEach((tag, i) => {
-						tagContainer += `<a href="/tags/${tag}" class="no-underline text-black leading-8 px-1 bg-blue-200 rounded-md m-1">${tag}</a>`;
-					});
-
-					// Close the container
-					tagContainer += '</div>';
-
-					// Create a node for the tag container
-					const tagContainerNode = u('html', tagContainer);
-
-					// Insert the tag container after the h1
-					tree.children.splice(h1Index + 1, 0, tagContainerNode);
-				}
-			}
-		} catch (e) {
-			console.error(e);
-		}
-	};
-}
diff --git a/packages/lms/src/lib/utils/sortChildrenByDependency.ts b/packages/lms/src/lib/utils/sortChildrenByDependency.ts
index c56d8ac..a89b8e6 100644
--- a/packages/lms/src/lib/utils/sortChildrenByDependency.ts
+++ b/packages/lms/src/lib/utils/sortChildrenByDependency.ts
@@ -6,24 +6,24 @@ import type { EntityMeta } from '@mollify/types';
  * @returns Sorted array of children
  */
 export function sortChildrenByDependency(children: EntityMeta[]): EntityMeta[] {
-	const sortedChildren: EntityMeta[] = children.filter((child) => !child.previous);
-	const unsortedChildren: EntityMeta[] = children.filter((child) => child.previous);
-	//guard against infinite loop
-	let i = 0;
-	while (unsortedChildren.length > 0 && i < children.length) {
-		unsortedChildren.forEach((child, index) => {
-			if (sortedChildren.some((sortedChild) => sortedChild.title === child.previous)) {
-				sortedChildren.push(child);
-				unsortedChildren.splice(index, 1);
-			}
-		});
-		i++;
-	}
+  const sortedChildren: EntityMeta[] = children.filter((child) => !child.previous);
+  const unsortedChildren: EntityMeta[] = children.filter((child) => child.previous);
+  //guard against infinite loop
+  let i = 0;
+  while (unsortedChildren.length > 0 && i < children.length) {
+    unsortedChildren.forEach((child, index) => {
+      if (sortedChildren.some((sortedChild) => sortedChild.title === child.previous)) {
+        sortedChildren.push(child);
+        unsortedChildren.splice(index, 1);
+      }
+    });
+    i++;
+  }
 
-	// If there are still unsorted children, add them to the end of the array, not ideal but better than an infinite loop.
-	if (unsortedChildren.length > 0) {
-		sortedChildren.push(...unsortedChildren);
-	}
+  // If there are still unsorted children, add them to the end of the array, not ideal but better than an infinite loop.
+  if (unsortedChildren.length > 0) {
+    sortedChildren.push(...unsortedChildren);
+  }
 
-	return sortedChildren;
+  return sortedChildren;
 }
diff --git a/packages/lms/src/lib/utils/storage/index.js b/packages/lms/src/lib/utils/storage/index.js
deleted file mode 100644
index a43b29d..0000000
--- a/packages/lms/src/lib/utils/storage/index.js
+++ /dev/null
@@ -1,6 +0,0 @@
-export * from "./load.js";
-export * from "./remove.js";
-export * from "./save.js";
-export * from "./update.js";
-
-// import * as storage from "../storage/index.js"
diff --git a/packages/lms/src/lib/utils/storage/index.ts b/packages/lms/src/lib/utils/storage/index.ts
new file mode 100644
index 0000000..7e5c723
--- /dev/null
+++ b/packages/lms/src/lib/utils/storage/index.ts
@@ -0,0 +1,6 @@
+export * from './load';
+export * from './remove';
+export * from './save';
+export * from './update';
+
+// import * as storage from "../storage"
diff --git a/packages/lms/src/lib/utils/storage/load.js b/packages/lms/src/lib/utils/storage/load.js
deleted file mode 100644
index 8ffe11d..0000000
--- a/packages/lms/src/lib/utils/storage/load.js
+++ /dev/null
@@ -1,9 +0,0 @@
-import * as storage from "./index.js";
-
-export const load = (key) => {
-    let item = JSON.parse(localStorage.getItem(key)) || null;
-    if (!item) {
-        item = storage.save(key, []);
-    }
-    return item;
-};
diff --git a/packages/lms/src/lib/utils/storage/load.ts b/packages/lms/src/lib/utils/storage/load.ts
new file mode 100644
index 0000000..886e95e
--- /dev/null
+++ b/packages/lms/src/lib/utils/storage/load.ts
@@ -0,0 +1,9 @@
+import * as storage from './index.js';
+
+export const load = (key: string) => {
+  let item = JSON.parse(localStorage[key] || null);
+  if (!item) {
+    item = storage.save(key, []);
+  }
+  return item;
+};
diff --git a/packages/lms/src/lib/utils/storage/remove.js b/packages/lms/src/lib/utils/storage/remove.js
deleted file mode 100644
index 4569752..0000000
--- a/packages/lms/src/lib/utils/storage/remove.js
+++ /dev/null
@@ -1 +0,0 @@
-export const remove = (key) => localStorage.removeItem(key);
diff --git a/packages/lms/src/lib/utils/storage/remove.ts b/packages/lms/src/lib/utils/storage/remove.ts
new file mode 100644
index 0000000..f558302
--- /dev/null
+++ b/packages/lms/src/lib/utils/storage/remove.ts
@@ -0,0 +1 @@
+export const remove = (key: string) => localStorage.removeItem(key);
diff --git a/packages/lms/src/lib/utils/storage/save.js b/packages/lms/src/lib/utils/storage/save.js
deleted file mode 100644
index ea6700b..0000000
--- a/packages/lms/src/lib/utils/storage/save.js
+++ /dev/null
@@ -1,3 +0,0 @@
-export const save = (key, value) => {
-    localStorage.setItem(key, JSON.stringify(value));
-};
diff --git a/packages/lms/src/lib/utils/storage/save.ts b/packages/lms/src/lib/utils/storage/save.ts
new file mode 100644
index 0000000..31cde92
--- /dev/null
+++ b/packages/lms/src/lib/utils/storage/save.ts
@@ -0,0 +1,3 @@
+export const save = (key: string, value: unknown) => {
+  localStorage.setItem(key, JSON.stringify(value));
+};
diff --git a/packages/lms/src/lib/utils/storage/update.js b/packages/lms/src/lib/utils/storage/update.ts
similarity index 67%
rename from packages/lms/src/lib/utils/storage/update.js
rename to packages/lms/src/lib/utils/storage/update.ts
index 7d3cd2f..279eab5 100644
--- a/packages/lms/src/lib/utils/storage/update.js
+++ b/packages/lms/src/lib/utils/storage/update.ts
@@ -1,4 +1,4 @@
-import * as storage from "./index.js";
+import * as storage from './index.js';
 
 /**
  * Updates a key/value pair in localStorage
@@ -11,8 +11,8 @@ import * as storage from "./index.js";
  * // Expect the function to change the value of the property in the key you specify.
  * ```
  */
-export function update(key, property, value) {
-    const obj = storage.load(key);
-    obj[property] = value;
-    storage.save(key, obj);
+export function update(key: string, property: string, value: unknown) {
+  const obj = storage.load(key);
+  obj[property] = value;
+  storage.save(key, obj);
 }
diff --git a/packages/lms/src/lib/utils/tts/createAudio.ts b/packages/lms/src/lib/utils/tts/createAudio.ts
index 743c1db..011b3d6 100644
--- a/packages/lms/src/lib/utils/tts/createAudio.ts
+++ b/packages/lms/src/lib/utils/tts/createAudio.ts
@@ -1,17 +1,17 @@
 export async function createAudio(slug: string, content: string, path: string, replace = false) {
-	try {
-		const response = await fetch(`/api/tts/createAudio`, {
-			method: 'POST',
-			headers: {
-				'Content-Type': 'application/json'
-			},
-			body: JSON.stringify({ slug, content, path, replace })
-		});
+  try {
+    const response = await fetch(`/api/tts/createAudio`, {
+      method: 'POST',
+      headers: {
+        'Content-Type': 'application/json'
+      },
+      body: JSON.stringify({ slug, content, path, replace })
+    });
 
-		const data = await response.json();
-		return data;
-	} catch (error) {
-		console.log(error);
-		return { error: 'An error occurred', errorContent: error };
-	}
+    const data = await response.json();
+    return data;
+  } catch (error) {
+    console.log(error);
+    return { error: 'An error occurred', errorContent: error };
+  }
 }
diff --git a/packages/lms/src/lib/utils/tts/fetchAudio.ts b/packages/lms/src/lib/utils/tts/fetchAudio.ts
index bb725d8..f4cfd14 100644
--- a/packages/lms/src/lib/utils/tts/fetchAudio.ts
+++ b/packages/lms/src/lib/utils/tts/fetchAudio.ts
@@ -1,11 +1,11 @@
 export async function fetchAudio(slug: string) {
-	const response = await fetch(`/api/tts/getAudio`, {
-		method: 'POST',
-		headers: {
-			'Content-Type': 'application/json'
-		},
-		body: JSON.stringify({ slug })
-	});
-	const data = await response.json();
-	return data;
+  const response = await fetch(`/api/tts/getAudio`, {
+    method: 'POST',
+    headers: {
+      'Content-Type': 'application/json'
+    },
+    body: JSON.stringify({ slug })
+  });
+  const data = await response.json();
+  return data;
 }
diff --git a/packages/lms/src/routes/+layout.server.ts b/packages/lms/src/routes/+layout.server.ts
index 3fd3a3a..963fc66 100644
--- a/packages/lms/src/routes/+layout.server.ts
+++ b/packages/lms/src/routes/+layout.server.ts
@@ -1,8 +1,8 @@
-import { getEntityMetaTree } from "$lib/utils/getEntityMetaTree";
-import type { LayoutServerLoad } from "./$types";
+import { getEntityMetaTree } from '$lib/utils/getEntityMetaTree';
+import type { LayoutServerLoad } from './$types';
 
 export const load: LayoutServerLoad = () => {
-    return {
-        sitemap: getEntityMetaTree("src/routes/content")
-    }
-}
\ No newline at end of file
+  return {
+    sitemap: getEntityMetaTree('src/routes/content')
+  };
+};
diff --git a/packages/lms/src/routes/api/getCurrentPage/+server.ts b/packages/lms/src/routes/api/getCurrentPage/+server.ts
index 331f123..c08de0d 100644
--- a/packages/lms/src/routes/api/getCurrentPage/+server.ts
+++ b/packages/lms/src/routes/api/getCurrentPage/+server.ts
@@ -1,18 +1,19 @@
 import getEntityFrontmatter from '$lib/utils/getEntityFrontmatter.js';
 import getEntitySlug from '$lib/utils/getEntitySlug.js';
+import type { RequestHandler } from './$types';
 
 /**
  * Returns the frontmatter for the current page
  */
-export async function POST({ request }) {
-	try {
-		const req = await request.json();
-		const { url } = req;
-		const matter = await getEntityFrontmatter(`src/routes/${url}/+page.md`, true);
-		matter.slug = await getEntitySlug(`src/routes/${url}/+page.md`);
-		return new Response(JSON.stringify(matter));
-	} catch (err) {
-		//console.error('Error getting page:', err);
-		return new Response(JSON.stringify({ error: String(err), url: '/no_audio/no-audio' }));
-	}
+export const POST: RequestHandler = async ({ request }) => {
+  try {
+    const req = await request.json();
+    const { url } = req;
+    const matter = getEntityFrontmatter(`src/routes/${url}/+page.md`, true);
+    matter.slug = getEntitySlug(`src/routes/${url}/+page.md`);
+    return new Response(JSON.stringify(matter));
+  } catch (err) {
+    //console.error('Error getting page:', err);
+    return new Response(JSON.stringify({ error: String(err), url: '/no_audio/no-audio' }));
+  }
 }
diff --git a/packages/lms/src/routes/api/getEntityMetaTree/+server.ts b/packages/lms/src/routes/api/getEntityMetaTree/+server.ts
index 1b4b665..0552acb 100644
--- a/packages/lms/src/routes/api/getEntityMetaTree/+server.ts
+++ b/packages/lms/src/routes/api/getEntityMetaTree/+server.ts
@@ -5,7 +5,7 @@ import { getEntityMetaTree } from '$lib/utils/getEntityMetaTree';
  * @returns The entity meta tree
  */
 export async function GET(): Promise<object> {
-	const files = getEntityMetaTree('src/routes/content');
+  const files = getEntityMetaTree('src/routes/content');
 
-	return new Response(JSON.stringify(files));
+  return new Response(JSON.stringify(files));
 }
diff --git a/packages/lms/src/routes/api/molly/+server.ts b/packages/lms/src/routes/api/molly/+server.ts
index 0ef9012..47215f9 100644
--- a/packages/lms/src/routes/api/molly/+server.ts
+++ b/packages/lms/src/routes/api/molly/+server.ts
@@ -1,7 +1,7 @@
 import { OPENAI_API_KEY, OPENAI_TOKEN_LIMIT } from '$env/static/private';
 import { MollyAI } from '@mollify/molly';
 
-const molly = new MollyAI(OPENAI_API_KEY, OPENAI_TOKEN_LIMIT)
+const molly = new MollyAI(OPENAI_API_KEY, OPENAI_TOKEN_LIMIT);
 
 export const POST = molly.handlers.chatCompletion.POST;
 
diff --git a/packages/lms/src/routes/api/search/+server.ts b/packages/lms/src/routes/api/search/+server.ts
index 80a5886..006732d 100644
--- a/packages/lms/src/routes/api/search/+server.ts
+++ b/packages/lms/src/routes/api/search/+server.ts
@@ -1,8 +1,8 @@
 import { search } from '$lib/utils/fuseSearch/fuseSetup';
 
 export async function POST({ request }) {
-	const req = await request.json();
-	const { searchQuery, filters } = req;
-	const response = await search(searchQuery, filters);
-	return new Response(JSON.stringify(response));
+  const req = await request.json();
+  const { searchQuery, filters } = req;
+  const response = await search(searchQuery, filters);
+  return new Response(JSON.stringify(response));
 }
diff --git a/packages/lms/src/routes/api/tags/+server.ts b/packages/lms/src/routes/api/tags/+server.ts
index ca357a7..60f37ca 100644
--- a/packages/lms/src/routes/api/tags/+server.ts
+++ b/packages/lms/src/routes/api/tags/+server.ts
@@ -6,13 +6,13 @@ import { flattenData } from '$lib/utils/fuseSearch/flattenData';
  * @returns Returns an array of entities that match the tag in the request body
  */
 export async function POST({ request }): Promise<object> {
-	const files = getEntityMetaTree('src/routes/content');
-	if (!files) return new Response(JSON.stringify({ error: 'No files found' }));
-	const flatFiles = flattenData(files);
-	const req = await request.json();
-	const { tag } = req;
-	const filteredFiles = flatFiles.filter((file) =>
-		file.tags?.some((fileTag) => fileTag.toLowerCase() === tag.toLowerCase())
-	);
-	return new Response(JSON.stringify(filteredFiles));
+  const files = getEntityMetaTree('src/routes/content');
+  if (!files) return new Response(JSON.stringify({ error: 'No files found' }));
+  const flatFiles = flattenData(files);
+  const req = await request.json();
+  const { tag } = req;
+  const filteredFiles = flatFiles.filter((file) =>
+    file.tags && file.tags?.some((fileTag) => fileTag.toLowerCase() === tag.toLowerCase())
+  );
+  return new Response(JSON.stringify(filteredFiles));
 }
diff --git a/packages/lms/src/routes/api/tts/createAudio/+server.ts b/packages/lms/src/routes/api/tts/createAudio/+server.ts
index 80549f5..60c03af 100644
--- a/packages/lms/src/routes/api/tts/createAudio/+server.ts
+++ b/packages/lms/src/routes/api/tts/createAudio/+server.ts
@@ -4,13 +4,13 @@ import { error } from '@sveltejs/kit';
 import type { RequestHandler } from './$types';
 
 export const POST: RequestHandler = async ({ request }) => {
-	const { content, slug, filepath, replace } = await request.json();
-	try {
-		// Convert text to audio using ElevenLabs API
-		const audio = await tts.generateAudio(slug, content, filepath, ELEVENLABS_API_KEY, replace);
-		return new Response(audio);
-	} catch (err) {
-		console.error('Error converting text to speech:', err);
-		throw error(500, String(err));
-	}
+  const { content, slug, filepath, replace } = await request.json();
+  try {
+    // Convert text to audio using ElevenLabs API
+    const audio = await tts.generateAudio(slug, content, filepath, ELEVENLABS_API_KEY, replace);
+    return new Response(audio);
+  } catch (err) {
+    console.error('Error converting text to speech:', err);
+    throw error(500, String(err));
+  }
 };
diff --git a/packages/lms/src/routes/api/tts/getAudio/+server.ts b/packages/lms/src/routes/api/tts/getAudio/+server.ts
index 9946318..a3b4d55 100644
--- a/packages/lms/src/routes/api/tts/getAudio/+server.ts
+++ b/packages/lms/src/routes/api/tts/getAudio/+server.ts
@@ -3,13 +3,13 @@ import { error } from '@sveltejs/kit';
 import type { RequestHandler } from './$types';
 
 export const POST: RequestHandler = async ({ request }) => {
-	const { slug } = await request.json();
-	try {
-		// Convert text to audio using ElevenLabs API
-		const audio = await tts.getAudio(slug);
-		return new Response(audio);
-	} catch (err) {
-		console.error('Error converting text to speech:', err);
-		throw error(500, String(err));
-	}
+  const { slug } = await request.json();
+  try {
+    // Convert text to audio using ElevenLabs API
+    const audio = await tts.getAudio(slug);
+    return new Response(audio);
+  } catch (err) {
+    console.error('Error converting text to speech:', err);
+    throw error(500, String(err));
+  }
 };
diff --git a/packages/lms/src/routes/content/feu1/+page.md b/packages/lms/src/routes/content/feu1/+page.md
new file mode 100644
index 0000000..3d3fc04
--- /dev/null
+++ b/packages/lms/src/routes/content/feu1/+page.md
@@ -0,0 +1,6 @@
+---
+title: FEU1
+tags:
+  - Programme
+type: Programme
+---
diff --git a/packages/lms/src/routes/content/feu1/agency-1/+page.md b/packages/lms/src/routes/content/feu1/agency-1/+page.md
new file mode 100644
index 0000000..3c65c7e
--- /dev/null
+++ b/packages/lms/src/routes/content/feu1/agency-1/+page.md
@@ -0,0 +1,10 @@
+---
+title: Agency 1
+type: Course
+tags:
+  - Agency 1
+  - Agency
+previous: JavaScript 1
+---
+
+This is a template course. It is used to create new courses.
diff --git a/packages/lms/src/routes/content/feu1/design/+page.md b/packages/lms/src/routes/content/feu1/design/+page.md
new file mode 100644
index 0000000..3413c5f
--- /dev/null
+++ b/packages/lms/src/routes/content/feu1/design/+page.md
@@ -0,0 +1,6 @@
+---
+title: Design
+tags: Design
+type: Course
+previous: Introduction
+---
diff --git a/packages/lms/src/routes/content/feu1/design/ca/+page.md b/packages/lms/src/routes/content/feu1/design/ca/+page.md
new file mode 100644
index 0000000..e3fbb25
--- /dev/null
+++ b/packages/lms/src/routes/content/feu1/design/ca/+page.md
@@ -0,0 +1,64 @@
+---
+title: Course Assignment
+tags:
+  - Design
+type: Assessment
+previous: Module 4
+---
+
+## Goal
+
+To put into practice what you have learned about design and wireframing, build a working prototype of your website. They should be high-fidelity interactive prototypes.
+
+## Brief
+
+You have been tasked with creating a working prototype using Figma. Each brief has a 'site architecture' that will show you which pages to create for your chosen brief.
+
+Choose one of the following briefs:
+
+- [https://github.com/NoroffFEU/first-year-cross-course-assignment-brief-one](https://github.com/NoroffFEU/first-year-cross-course-assignment-brief-one)
+
+- [https://github.com/NoroffFEU/first-year-cross-course-assignment-brief-two](https://github.com/NoroffFEU/first-year-cross-course-assignment-brief-two)
+
+- [https://github.com/NoroffFEU/first-year-cross-course-assignment-brief-three](https://github.com/NoroffFEU/first-year-cross-course-assignment-brief-three)
+
+The prototype should be interactive, and it should be possible to click links and move between pages. If you have multiple pages where the layout look the same (for example, product pages), you only need to create one version of that page for the prototype.
+
+If you are using the free Figma plan, you can share 3 Figma files and prototypes.
+
+## Level 1 Process
+
+- Take the feedback you received from your Peers as well as Teacher, and consider if you need to make any changes.
+
+- Draw up wireframes of the various pages - you can do this on paper or use your computer, whatever works best for you. _(This is not graded, but can be included in your report for reference)_
+
+- Make a desktop and mobile-view prototype using Figma - you can make them in the same project so that you can deliver one link.
+
+- Create a shareable link for your prototype. [How to share your Figma file](https://www.captain-design.com/blog/how-to-share-figma-files/)
+
+- Write a report explaining your decisions and thinking behind your final delivery.
+
+## Submission
+
+- A link to your prototype/s shared submitted on Moodle for feedback.
+
+- Please include a PDF report on the process you went through to complete this CA and the final product.
+
+- Your report should include a reflection on your submission and must have at least the following main sections:
+
+– introduction
+
+– body
+
+– conclusion
+
+– references (if applicable).
+
+Your report must be 700 - 1000 words. [Download the report](../resources/FEU1reporttemplate.docx)
+
+See an example of what we expect to see.
+_Please note this is a visual representation of the content_
+
+![Square Eyes example](../images/design-1/CA/SquareEyesUI*desktop.jpg\) \_Figure 1: A visual representation of Square Eyes*
+
+![Square Eyes example](../images/design-1/CA/SquareEyesUI*mobile.jpg\) \_Figure 2: A visual representation of Square Eyes*
diff --git a/packages/lms/src/routes/content/feu1/design/ca/marking-criteria/+page.md b/packages/lms/src/routes/content/feu1/design/ca/marking-criteria/+page.md
new file mode 100644
index 0000000..e110120
--- /dev/null
+++ b/packages/lms/src/routes/content/feu1/design/ca/marking-criteria/+page.md
@@ -0,0 +1,122 @@
+---
+title: Marking Criteria
+tags:
+  - Design
+type: Lesson
+---
+
+<table style="max-width: 100%">
+  <tr>
+    <th>Assessment Criteria</th>
+    <th>Learning Outcomes</th>
+    <th>Completed</th>
+  </tr>
+  <tr>
+    <td>User Interface Design
+      <ul>
+        <li>The submission has taken design principles into consideration.</li>
+        <li>The submission is consistent and well crafted.</li>
+        <li>The submission uses competitor benchmarking and problem-solving skills.</li>
+      </ul>
+    </td>
+    <td>
+      <ul>
+        <li>has basic knowledge of identity elements and the concepts typography, colour, graphical
+elements</li>
+        <li>has knowledge of tools and techniques for image editing and design</li>
+        <li>can apply basic knowledge about identity elements such as typography, colour and
+graphic elements and perform simple development or editing of visual elements for onscreen
+use</li>
+        <li>can carry out or process simple identity elements and put them together into a layout for
+use in screen-based solutions and services</li>
+      </ul>
+    </td>
+    <td>
+      <input type="checkbox">
+    </td>
+  </tr>
+  <tr>
+    <td>User Experience Design
+      <ul>
+        <li>has knowledge of the concepts composition, grid and the basic design principles used for
+screen-based solutions</li>
+        <li>The submission has taken User Experience  principles into consideration.</li>
+        <li>The submission has functional prototypes.</li>
+        <li>The submission has taken user testing and Accessibility into consideration.</li>
+      </ul>
+    </td>
+    <td>
+      <ul>
+        <li>has knowledge of the central concepts and processes used in visual design of useroriented
+solutions and services for web and mobile devices</li>
+        <li>has basic knowledge about the structure of websites and interactive products</li>
+        <li>can update their vocational knowledge of visual designing user-oriented solutions for
+web and mobile devices</li>
+        <li>can apply knowledge about basic design principles and perform development of simple
+layouts for web-based solutions and services</li>
+        <li>understands the ethical principles that apply for using visual means in the development
+of user-friendly web solutions</li>
+        <li>has developed an ethical attitude in relations to using visual means</li>
+      </ul>
+    </td>
+    <td>
+      <input type="checkbox">
+    </td>
+  </tr>
+  <tr>
+    <td>Deliverables and features
+      <ul>
+        <li>The submission features functional prototypes.</li>
+        <li>The submission features mobile and desktop screens.</li>
+        <li>The submission has taken user testing into consideration.</li>
+        <li>The submission features all the pages according to the Site Architecture.</li>
+      </ul>
+    </td>
+    <td>
+      <ul>
+        <li>has insight into relevant standards and current design processes from idea to finished
+product</li>
+        <li>has insight into relevant quality requirements for text content on web pages and how it
+is produced and structured</li>
+        <li>has insight into methods, techniques and tools for elaboration and presentation of ideas,
+sketches, prototypes and simple visual elements</li>
+        <li>understands the importance of how good visual design can support value creation for
+businesses, organizations or individuals</li>
+        <li>can apply knowledge of the central concepts and processes for visual designing userfriendly
+solutions and services for web and mobile devices</li>
+        <li>can find information and material regarding visual design for screen-based solutions and
+services</li>
+        <li>can develop work methods from a progress plan for design processes and visual design
+from idea to finished product</li>
+        <li>can build relations with their peers and with graphic designers and content developers</li>
+      </ul>
+    </td>
+    <td>
+      <input type="checkbox">
+    </td>
+  </tr>
+   <tr>
+    <td colspan="2">
+    </td>
+    <td class="grade">
+    </td>
+  </tr>
+</table>
+
+<script>
+  const checkboxes = document.querySelectorAll("input[type='checkbox']");
+  const grade = document.querySelector(".grade");
+  let criteriaPassed = 0;
+  checkboxes.forEach(item => item.onclick = function(e){
+    if(e.target.checked === true){
+      criteriaPassed++;
+      if(criteriaPassed === checkboxes.length){
+        grade.innerHTML = "Passed";
+      }
+    }
+    else {
+      criteriaPassed--;
+      grade.innerHTML = "";
+    }
+  })
+</script>
diff --git a/packages/lms/src/routes/content/feu1/design/module-1/+page.md b/packages/lms/src/routes/content/feu1/design/module-1/+page.md
new file mode 100644
index 0000000..c23a906
--- /dev/null
+++ b/packages/lms/src/routes/content/feu1/design/module-1/+page.md
@@ -0,0 +1,13 @@
+---
+title: Module 1
+tags: Design
+type: Module
+---
+
+In this module, you will be introduced to the universal fundamentals of graphic design. We will explore core elements of graphic design and why it is necessary to understand these basic principles and how can you use this knowledge working as a front-end developer.
+
+If anything is unclear, check your progression plan, and/or contact a tutor on the forums.
+
+**Tools:**
+
+- Figma [Figma Essential Training: The Basics](https://www.linkedin.com/learning/figma-essential-training-the-basics/the-basics-of-figma?autoplay=true&resume=false&u=43268076)
diff --git a/packages/lms/src/routes/content/feu1/design/module-1/content-management/+page.md b/packages/lms/src/routes/content/feu1/design/module-1/content-management/+page.md
new file mode 100644
index 0000000..2cc44f2
--- /dev/null
+++ b/packages/lms/src/routes/content/feu1/design/module-1/content-management/+page.md
@@ -0,0 +1,370 @@
+---
+title: Content management
+tags:
+  - Design
+type: Lesson
+---
+
+## Introduction
+
+It is vital to have on a website the correct images for the target audience, icons that are appealing, and call-to-action buttons that draw the viewer’s attention to specific actions. In this lesson, we discuss how to choose the right content for a website not only for aesthetics, but also to ensure the website is relatable to the target audience and assists them in reaching the end goal.
+
+> **NOTE:** This lesson contains 5 activities that you should complete.
+
+## Content
+
+### Content is king
+
+When we consume content, whether it is in a magazine or on our favourite website or social media platform, we want what we are looking for immediately and without much effort. It is essential to ensure that content is of the highest quality, easy to comprehend, and aesthetically pleasing. Not only will a website that is appealing leave a memorable impression, but it will also come across as credible. Credibility is a fundamental attribute in the ever-changing world of online content. Without engaging and credible content, a business will go unnoticed.
+
+### What is content on a website?
+
+Visual language is a form of communication that is constantly spoken around us and to us. Just as you would verbally tell a family member a story about an incident that happened at a social gathering, so should a good web design do the same, but only visually. It should communicate the essential information quickly and effortlessly to the online user and guide them to finish the journey they have started. Content is information and, on a website, it consists of photographs, text (written information), colour, typefaces, navigation graphics (such as icons and call- to-action buttons), and brand identity elements (such as the logo of a company).
+
+### Designing for the target audience
+
+Before we explore the vast and ever-changing realm of website content, let's first start with the who. An inexperienced designer may not understand why it is important to design with the target audience in mind. When focusing on the fundamentals, all that seems to matter is good design, interaction, and satisfying the client requirements. But to satisfy the client requirements, you need to understand the fundamental needs of the client. One aspect of this is to understand who the target audience is.
+
+You need to have a good understanding of who your client's target audience is before you can even start to think of what elements to use on the company's website. Think about it like this; say you are tasked to design a website for children advertising a play park. You then decide to go for colours that are dark - consisting of black, grey and to add some emphasis you choose white. There, you have a colour palette consisting of three colours. You should be good to go. Not quite. How do you think your target audience, which is mainly children of about 7 years old, would feel when accessing your website? Would they feel excited about visiting your venue? Unfortunately, not. They would ask their parents to take them somewhere else, because the colours on the website didn't excite them.
+
+Look at the example below; which photo would you use for a website selling activewear to young adults aged 20 – 35 years old? You would probably use the photo on the right because the woman is most likely of the same age as the target audience. Therefore, she would be more relatable to the audience your client wants to reach.
+
+![Target audience](../images/design-1/Contentmanagement-1.jpeg\) _Figure 1. An example of photo choice according to the target audience._
+
+### Good knowledge of the key demographics and psychographics of a target audience is vital in getting to know them better
+
+- Demographics refers to the physical, like age, race, and gender.
+- Psychographics refers to psychological factors such as a persons' beliefs, values, spending habits, and motivations.
+
+![Target audience](../images/design-1/Contentmanagement-2.jpeg) _Figure 2. An example of the target audience for an athletic shoe brand (Santo, 2019)_
+
+## Choosing photographs for a website
+
+Photos are vital elements to create appealing and engaging websites. Choosing the right images to use on your webpage is essential in the planning and design of your page. Not only does the photo need to look appealing, but it also needs to have meaning. Lastly, the image needs to fit the overall design and colour palette of the brand.
+
+### Key aspects when choosing photos
+
+### Quality is important
+
+Photos with a low resolution or grainy and out of focus images should not be used. Images may be scaled to a smaller size, but never larger as this may lead to pixilation. Furthermore, images should be scaled at a fixed aspect ratio to avoid stretching and distortion. The selected images should clearly illustrate the brand or website topic.
+
+![Stretched image](../images/design-1/Contentmanagement-3.jpeg) _Figure 3. When images are of bad quality and stretched out of proportion_
+
+![Good quality](../images/design-1/Contentmanagement-4.jpeg) _Figure 4. Good quality images that are in perfect proportion is more attractive._
+
+### Unique and original
+
+Look for original photos and avoid photos that look too much like stock imagery or ones that are commonly used. Think of what you are trying to portray and do not go for the obvious photo. As a rule of thumb, avoid any images in the first couple of pages of stock library search results since most people will select these. Find images that are unique with a twist on what you are looking for, so try to be imaginative.
+
+![Unique image](../images/design-1/Contentmanagement-5.jpeg\) _Figure 5. This image is unique and tells a story between pet and owner._
+
+### Use believable and appropriate people
+
+Use people in the photos that are believable examples of your target audience. The users should feel that these are real, everyday people using your brand. Use people that your target audience can relate to. For example, a young hip clothing company wouldn't have images of senior people on their website.
+
+![Bean bags](../images/design-1/Contentmanagement-6.jpeg\) _Figure 6. The company sells bean bags for children. A good example of showcasing the target audience interacting with the product._
+
+### Think of the emotional response to the photo
+
+Photos of people smiling, for example, give a happy, positive feeling.
+
+![Happy moment](../images/design-1/Contentmanagement-7.jpeg\) _Figure 7. A good example of a happy moment captured by the camera lens._
+
+### Employ images with utility
+
+Useful photos help the user better understand how a product is used, showing them the product, so the user can get a feel for how it looks and works. The image of the website below contains a photo showing the product and the app used with the product. Users can quickly see how they work together:
+
+![Garmin](../images/design-1/Contentmanagement-8.jpeg\) _Figure 8. Garmin Connect providing useful information with regards to their downloadable app (garmin.com, 2020)_
+
+### Composition
+
+The layout of the elements in a photo or image is known as composition. Photos can be busy with many different features / subjects in the picture; or they can be simple with just one subject in the photo and a lot of white or empty space.
+
+The benefits of white space in photos are that it is easier for the user to focus on the main subject, and in design, the white space can be used for text and headings.
+
+![White space](../images/design-1/Contentmanagement-9.png\) _Figure 9. An example of white space used for a logo, text, and a call to action button._
+
+### Crop images to show what is essential
+
+There may be distracting parts of the background that are unnecessary. Also, pick colours that go with the colour palette of the website when choosing images.
+
+![Colour palette](../images/design-1/Contentmanagement-10.jpeg\) _Figure 10. The colour palette and image work together perfectly._
+
+### Avoid using busy background images
+
+These will bring a cluttered, overcrowded feel to a website. It's also best to avoid placing written text on a very busy photo. If the design needs writing to be placed on an image, use a colour with the opacity levels adjusted to make the text stand out more. This ensures that the user can clearly see what the message is.
+
+![Cluttered image](../images/design-1/Contentmanagement-11.jpeg\) _Figure 11. The information on this design is hardly visible because the background image is too cluttered._
+
+![Overlay image](../images/design-1/Contentmanagement-12.jpeg\) _Figure 12. The black colour overlay makes the information more visible._
+
+### Use the Rule of Thirds
+
+The rule of thirds in photography is a composition rule, and as mentioned previously, layout and composition are the placement of individual elements on a page or screen. It's no different when it comes to the rule of thirds. With this rule, a photo is evenly divided into thirds (three columns and three rows). The focal point of the photo, which would be the subject, is then placed either along one of the lines or at the intersection of the dividing lines. The rule of thirds makes for more attractive looking photos.
+
+![Rule of thirds](../images/design-1/Contentmanagement-13.jpeg\) _Figure 13. An example of the rule of thirds in photography._
+
+### Photography resources
+
+Sometimes photography can be quite intimidating. That is why useful resources for photography can assist in getting high-quality images that are produced by professional photographers. These websites are all well-known for their free stock images. But before downloading any photos, make sure you understand what is required from you with regards to the licencing and the use of photos.
+
+Free stock sites: [www.freepik.com](http://www.freepik.com/), [www.pixabay.com](http://www.pixabay.com/), [www.unsplash.com](http://www.unsplash.com/) and [www.librestock.com](http://www.librestock.com/)
+
+Websites that sell photographs can be quite expensive, but the images will probably be of a higher quality and you would have a bigger selection to choose from. With some free stock sites, you have the option to subscribe as a premium member, meaning certain photos are regarded as ‘premium selection’ and the only way for you to download those is by paying for them.
+
+Paid stock sites: [www.shutterstock.com](http://www.shutterstock.com/), [www.gettyimages.com](http://www.gettyimages.com/), [www.istockphoto.com](http://www.istockphoto.com/) and [www.stocksy.com](http://www.stocksy.com/)
+
+### Image optimisation
+
+In web design, we measure the resolution of an image in pixels. Pixels are small dots that make up an image. The more pixels per square inch, the better quality of the photo. The fewer pixels per square inch, the lower the quality of the photo and the smaller the file size. The standard resolution for a web image is 72 dpi (dot per inch) often referred to as screen resolution. In print, the number is much higher and would be 300 dpi, making the file size of the photo much bigger that it would be for web.
+
+It's vital to ensure the photos that will be used on a website is appropriately optimised for the web. When images are big in file size, they will take longer to load and in return create much frustration with the online user. This would result in an overall poorer user experience. Photos should be of high quality, but not bigger than a file size of 200kb - 500kb. Adobe Photoshop is an excellent tool for the resizing of images, but many free online tools would also be able to resize pictures effortlessly.
+
+In the image below the picture on the left has a file size of 113mb, whereas the picture on the right has a file size of only 556,4kb after being optimised for the web. Other than the file size, not much difference is noticeable between the two. [Compressor](https://compressor.io/) reduce the size of your images whilst maintaining the quality thereof.
+
+![Image optimization](../images/design-1/Contentmanagement-14.jpeg\) _Figure 14. Image optimisation in Adobe Photoshop._
+
+### Raster graphics
+
+Image editing software, such as Adobe Photoshop, is software known as raster graphics editor, meaning it is mainly designed to edit photos - whether it is resizing them, adding a filter, or adding and eliminating certain elements. Raster graphics, also known as bitmap graphics, are composed of pixels and use file formats such as JPEG, PNG, GIF, TIFF and BMP.
+
+## Copy tells the story in written word
+
+As a web developer, you would most probably not be required to write the copy of a website, but it is good to know the basics:
+
+- What you write and tell the user should be well researched, honest, and to the point.
+- Avoid jargon, as this might confuse the user and would not provide them with the needed information.
+- Talk more about the clients' experience and less about yourself.
+- The user would also be more trustworthy of you when there are no grammatical errors in the copy. It's best to run the copy through a word processing program to ensure no spelling mistakes crept in by accident. Microsoft Word and Grammarly are good word processing software packages to use in this regard.
+
+## Icons - a universal language
+
+In web design, an icon refers to a symbol that represents an action. It's useful because it doesn't take up much space on a screen and brings a lot of appeal to a website. More importantly, icons are universal. It doesn't matter what language the user speaks; they would be able to understand what is being conveyed. Therefore, icons are vital for good navigation on any website. But icon design is far more intricate and complicated than just adding a symbol to circle and giving it colour. Icons should be clear as to what they represent, and they should be recognisable. They should help, rather than confuse the user.
+
+### Key aspects when choosing icons
+
+#### Use icons that are relevant to the genre of the website
+
+If you are tasked to design a website for a pharmaceutical company, for example, you will use icons that are more corporate in style than the more playful icons that might be used on a lifestyle website. The icons shouldn't be seen as a separate entity but should form a unity with the overall genre and design of the website.
+
+![Various icons](../images/design-1/Contentmanagement-15.png\) _Figure 15. Different style icons for different type of websites._
+
+#### Icons should be in line with the corporate identity of a business
+
+It wouldn't make sense to use icons that don't reflect the corporate identity. For example, the colour palette for your clients' brand consists of red, dark blue, light blue, and white. The icon set you want to use on the site should be the same colour as that of the brand. If an icon includes text, the font used should be the same as that of the company's corporate identity.
+
+![Icons used](../images/design-1/Contentmanagement-16.jpeg\) _Figure 16. The icons used for this company’s website consist of a colour present in their corporate identity._
+
+#### Size matters
+
+Creating icons for smaller (mobile) as well as bigger (desktop) screens are critical. That's where the saying 'the simpler, the better' comes in handy. Imagine you use a set of icons that are so intricate in detail that when scaled down, the user can hardly see what the icon represents. How would they know where it would lead them? Would they even be bothered to find out? The short answer is no. Always make sure that icons are simple enough but informative and self-explanatory to guide the user in the direction they wish to go.
+
+![Various icons](../images/design-1/Contentmanagement-17.jpeg\) _Figure 17. The icon at the top is to intricate in detail that some detail gets lost when scaled down. The icon at the bottom consist of a simple design style and scale better and is more recognisable._
+
+#### Similar in style
+
+It's crucial to be consistent and use icons that have similar visual characteristics. The icons on your website should almost feel like a family. For example, if you decide to go for a more rounded shape icon, it should be consistent across. If one icon has an outline border, then all of them should have the same outline border. In the end, all icons should be consistent in style, colour, and size.
+
+![Ways of using icons](../images/design-1/Contentmanagement-18.jpeg\) _Figure 18. The icon set at the top is inconsistent in style, size, and shape. The icon set at the bottom are consistent in style, size, and shape._
+
+#### Quality control
+
+As with everything in design, high-quality work is vital in achieving visually appealing designs. Icons should be of high quality and not pixelate. It's, therefore, best to design and edit icons in software intended specifically for that purpose. Tools such as Adobe Illustrator and Figma are helpful in this regard. These programs assist the user in producing high-quality original icons or in editing ones that have been found online.
+
+Good places to find free icons are [www.fontawesome.com](https://fontawesome.com/), [www.iconfinder.com](http://www.iconfinder.com/) and [icons8.com](https://icons8.com/). When reusing images, make sure you understand what is required from you in terms of the licencing before you use icons from these websites.
+
+![Use of icons](../images/design-1/Contentmanagement-19.png\) _Figure 19. Bad vs Good. The icons to the left is pixelated and stretch out of proportion. The icons to the right is of high quality and have a good aspect ratio._
+
+### Vector graphics
+
+As discussed earlier, Adobe Photoshop is a good tool to use when editing photos. With icons, you would use a vector-based program such as Adobe Illustrator. Adobe XD also can edit and design icons. A vector graphic consists of points and paths; thus, it has the ability to be increased and decreased in size without the graphic losing quality. That is not the case when it comes to raster graphics. The more a photo is increased in size, the more quality it will lose. Vector graphics use file formats such as .ai (Adobe Illustrator), .crd (Coral Draw), .svg (Scalable Vector Graphics) and .eps (Encapsulated PostScript). Although this may seem more daunting at first, it becomes easier once you learn how to use these file formats in a software package such as Adobe XD.
+
+## Call-to-action buttons to motivate
+
+Call to action buttons (CTA) are visible on almost any modern-day website and are mainly used to motivate the online user to take action and guide them to the end goal. A goal is the one thing you want them to do, such as buy a product or sign up for a newsletter.
+
+### Shape and clickability
+
+A CTA should attract attention, and it should be designed in a way that would be irresistible for the user to not click on it. Some might say a CTA that looks like an actual button might attract more attention than one that is flat. Others would say a button that has more of flat design style is more elegant. Regardless whether it is designed to have square or rounded corners, it should fit in with the overall style of your website. Keep it simple and stay consistent with the shape of the button across the site.
+
+![Buttons style](../images/design-1/Contentmanagement-20.jpeg\) _Figure 20. Different style of buttons._
+
+### Choose colour carefully
+
+Colour matters and will ultimately be the one thing that would make the buttons stand out and attract attention. If you take a couple of steps back from your screen, the CTA should be clearly visible. Contrasting colours often work best, but make sure the chosen colour still forms part of the overall design of the site.
+
+![CTA button](../images/design-1/Contentmanagement-21.jpeg\) _Figure 21. The CTA is clearly visible and draw the attention of the user._
+
+### On hover
+
+A call-to-action button should change on hover to show the user that they are about to perform an action. It doesn't have to be a significant change. The more subtle the change the better.
+
+![Default state](../images/design-1/Contentmanagement-22.jpeg\) _Figure 22. A CTA in its default state and on hover._
+
+### Action text
+
+A successful CTA tells the user precisely what to do. They should be clear, simple and short and sweet. It shouldn't be intimidating but rather instil confidence in the user and do precisely what they say. Therefore, using action text on a button is best. These include: “Add to cart”, “Sign up”, “Free sample” or “Join now” just to name a few. See how short these are, but still, they are telling the user exactly what will happen when the button is clicked. The font used on a button should be easy to read and still be consistent with the fonts used on the website. Don't use a fancy script-like font as they are often hard to read.
+
+![Action text](../images/design-1/Contentmanagement-23.png\) _Figure 23. Good action text being used on buttons._
+
+![Font choice](../images/design-1/Contentmanagement-24.jpeg\) _Figure 24. The choice in font used on a CTA is crucial for the user to easily understand what the action is they need to take._
+
+## Form
+
+Forms are handy tools to use on a website to encourage user interaction and to gather information. A form is often the one thing that stands between the user and their goal and also the last step in the user's journey in completing their goal ((Babich, 2017)). A form should be straightforward for a user to complete them quickly and without confusion. A form consists of, among others, the following components: Labels, Input fields, Action buttons, Help and Validation.
+
+### Labels
+
+As the name suggests these labels your input fields. So, in short, tell the user what information you need them to place in each input field.
+
+### Input Fields
+
+Allow your user to fill in the form. It is the information you intend to receive from the user such as name, surname, and date of birth, for example.
+
+### Action Buttons
+
+These are the buttons that the user clicks to submit the information requested.
+
+### Help
+
+This provides support on how to fill out the form. It usually comes in the form of written text and a message 'what is this?' above the input field and next to the label, for example.
+
+### Validation
+
+These give the user feedback on the inputs they have submitted. Submission validations occur after the user completed the request and live inline validation occurs during the process of completing the form.
+
+![Form example](../images/design-1/Contentmanagement-25.png\) _Figure 25. An example of a form._
+
+Poorly designed forms can discourage users from completing and submitting.
+
+**The following tips will help you to create good forms:**
+
+- Ensure input fields are correctly aligned and spaced out with a decent amount of white space in between input field boxes.
+- Don't ask the user to submit a lot of information that would make the form long. Instead focus on only the most essential information needed.
+- Use fonts that are easy to read. Don't complicate things by using fonts that are harder to read, such as script fonts.
+- A form should have appeal but needs to be as simple as possible. When a submission is successful, think of using colour to indicate success.
+- The same goes for an unsuccessful submission. For instance, people often relate well to green being successful and red being unsuccessful.
+- Avoid using dark, heavy drop shadows on any elements in a form. Not only will it take away from the overall appeal but might make it difficult to read and understand certain information. If there is a need for drop shadows use them in a subtle manner.
+
+## Colour evokes emotion
+
+We will discuss colour in more detail as we go along to the next module. But for now, think about what colour does to you. How does red, for example, make you feel? Would you use the colour pink on a law firm’s website? How would the target audience react when entering such a site? Colour forms a vital element on any website and even though it’s not actual information the user reads, it still evokes emotion the same way a photo would.
+
+![Colour](../images/design-1/Contentmanagement-26.jpeg\) _Figure 26. Colour and emotion (Hauff, 2018)_
+
+## Typography is powerful
+
+Typography is another topic that needs discussion and that we will more carefully explore in the following module. But for now, it’s important to note that typography is one more vital element to website content. Like colour, it’s not actual information that a user would learn from, but it would make the overall user experience pleasant if done correctly and also bring more appeal to a website. If not, the message to the user will get lost. Think of it like this, would you take Thor, the Marvel superhero seriously if the producers of the movie decided on a font like the one below?
+
+![Thor movie](../images/design-1/Contentmanagement-27.jpeg\) _Figure 27. A movie poster of the Marvel superhero, Thor. The chosen font makes the movie poster seem fake and not credible (DaNmArK, 2015)_
+
+Probably not. Typography plays a significant role in communicating a brand message to the user. If done right, the user will understand, relate, and most certainly return for more. Thor is a strong character, physically and emotionally, and the chosen typography should communicate that message to the audience. You would probably use a more robust font that better expresses Thor’s personality.
+
+![Font choice](../images/design-1/Contentmanagement-28.jpeg\) _Figure 28. The chosen font for the Thor movie poster is strong and communicates Thor’s personality to the viewer (Disney, 2011)_
+
+Now that you have a clear idea of what to look for with regards to website content, undoubtedly, the most important take away from all of this is the target audience, and how you want to communicate the brand message to them. Every choice you make should be with them in mind; how you want them to feel about the brand and how you want them to interact with the brand.
+
+## Summary
+
+- Keep your design choices consistent across all platforms, forms, and pages.
+- Decide on an image and continue with that throughout.
+- Make sure that icons are similar in style and provide clarity on what they represent.
+- Call-to-action buttons should stand out and carry a definite action.
+- Forms should be short and easy to complete with a validation message telling the user if they were successful or not.
+- Colour should evoke the right emotion.
+- Fonts should be easy to read and assist all other elements in expressing the brand message to the online user.
+
+---
+
+## Activities
+
+### Activity 1
+
+The following video from Linkedin Learning is a short introduction into determining the target audience.
+
+**Video:** [Determining the target audience](https://www.linkedin.com/learning/layout-and-composition-marketing-collateral/determining-the-target-audience?autoplay=true&u=43268076) (2m 40s) by Sean Adams.
+
+### Activity 2
+
+**Video:** [Website Photos 101: The Photos You SHOULD Be Using & Where to Get Them](https://www.youtube.com/watch?v=hLAB69iCjg4) (12m 45) by Wes McDowell.
+
+### Activity 3
+
+The following video from Linkedin Learning on using images in Figma.
+
+**Video section:** [2. Working with images in Figma](https://www.linkedin.com/learning/figma-for-ux-research-presentations-that-stand-out/working-with-images-in-figma?autoplay=true&u=43268076) (8m 45s) by Eric Nordquist.
+
+### Activity 4
+
+**Video:** [How to Design a Login Form in Figma](https://www.youtube.com/watch?v=-iEyGY4zONY) (10m 47s) by Adrian Twarog.
+
+### Activity 5
+
+**Video:** [Form Design in Figma with Interactive Components](https://www.youtube.com/watch?v=ZWwE0GWEXDc&t=184s) (36m 32s) by DesignCourse.
+
+---
+
+## Lesson Task
+
+### Goal
+
+Get to know Adobe Figma better and practise the design and use of various design elements.
+
+### Brief
+
+The Winery is the name of the company that contacted you for the design of their website. They are looking for a website where their customers will be able to buy their special selection of wines online. Your task is to search for the various elements that will be present on their website. The target audience for the Winery:
+
+### Key demographics and psychographics
+
+- Age range: 30 – 40-year-old
+- Gender: 40% male, 60% female
+- The audience loves socialising with friends and family.
+- They like to shop online and buy most non-essential items online.
+- Feel loyalty to brands with values similar to theirs.
+
+### Some challenges
+
+- Struggle to find good quality wine that would age well.
+
+### Preferred channels
+
+- Follow lifestyle influencers’ accounts on Instagram.
+- Enjoy watching YouTube videos about wine making.
+
+### Preferred content types
+
+- Social media posts.
+- Event marketing.
+- Videos.
+
+### For this task create the following design elements
+
+- Find photos that would speak to the target audience and showcase the brand’s products.
+- Create a colour palette for the brand.
+- Choose some fonts that will relate to the target audience and that are relevant to the brand.
+- Find icons that are informative and will assist the online user to buy products online. These can be a search, cart, location, message and contact for example.
+- Create a CTA for the online user to ‘add to cart’.
+- Create a page (1920 x 1080px) in Figma.
+- Create a grid and place the design elements neatly on the page.
+- Make sure your elements are properly aligned and spaced out evenly. Each element should have its own space on the page.
+
+![The Winery](../images/design-1/CMS/Winery*Example.png\) \_Figure 29. The Winery example, 2022*
+
+Here is an example of what the end result could look like. **Please use this as inspiration only, and try not to copy this design:**
+
+## Bibliography
+
+garmin.com. (2020, July 3). _Your day at a glance_. Retrieved from connect: <https://connect.garmin.com/>
+
+Babich, N. (2017, July 1). _Designing Efficient Web Forms: On Structure, Inputs, Labels And Actions_. Retrieved from Smashing Magazine: <https://www.smashingmagazine.com/2017/06/designing-efficient-web-forms/>
+
+Hauff, A. (2018). _The Know It All Guide To Color Psychology In Marketing + The Best Hex Chart_. Retrieved July 2020, from CoSchedule: <https://coschedule.com/blog/color-psychology-marketing/>
+
+DaNmArK, P. A. (2015). _Thor 2 Wallpaper HD_. Retrieved July 2020, from 7 Themes: <http://7-themes.com/6931240-thor-2-wallpaper-hd.html>
+
+Santo, A. (2019). _6 real-life target audience examples to help you define your own (B2B and B2C)_. Retrieved July 2020, from Brafton fuel your Brand: <https://www.brafton.com/blog/strategy/6-real-life-target-audience-examples-to-help-you-define-your-own-b2b-and-b2c/>
+
+Disney. (2011). _Thor Collection_. Retrieved July 2020, from themoviedb.org: <https://www.themoviedb.org/collection/131296-thor-collection/images/posters>
+
+The Winery Example.(2022) Images courtesy of: <https://gabrielskloof.co.za/>
+<https://spier.co.za> (Accessed: 01 September 2022)
diff --git a/packages/lms/src/routes/content/feu1/design/module-1/fundamentals-layout/+page.md b/packages/lms/src/routes/content/feu1/design/module-1/fundamentals-layout/+page.md
new file mode 100644
index 0000000..d89c803
--- /dev/null
+++ b/packages/lms/src/routes/content/feu1/design/module-1/fundamentals-layout/+page.md
@@ -0,0 +1,228 @@
+---
+title: Fundamentals of layout
+tags:
+  - Design
+type: Lesson
+---
+
+## Introduction
+
+Planning and structuring when placing elements on a web page do not only achieve an appealing design. These tasks also help the online user to comprehend information. In this lesson, we will discuss the principles of layout/composition and have a look at the anatomy of a grid structure.
+
+> **NOTE:** This lesson contains 4 activities for your completion.
+
+## Basics of layout/composition
+
+In the design industry, the terms "layout" and "composition" are used interchangeably. This is because they refer to the same concept.
+
+Composition in artwork refers to the placement and combination of these elements that create the finished piece. Like a puzzle, all the pieces must perfectly fit together to form the final picture. If the different elements are placed smartly, they will enhance/draw attention to one another, and you'll create an impactful design. Different elements are organised according to the principles of art (line, shape, colour, value, form, texture, and space).
+
+![Website layouts](../images/design-1/Layout/Thefundamentalsoflayout-1.jpeg\) _Figure 1. Example of website layouts_
+
+Composition not only applies to visual art. The term composition means "putting together" and can be applied to any form of art – from music and writing to sculpting, and photography. It can also be applied to the world of graphic design and desktop publishing.
+
+In the visual arts, the word "composition" can be replaced with various terms such as design, form, visual ordering, or formal structure (depending on the context). In graphic design and desktop publishing, composition is commonly referred to as page layout.
+
+## The history and use of layout
+
+The history of layout correlates with the history of communication itself - once communication started in written form, layout naturally followed. For this reason, each culture has its own interpretation and development thereof. Although common principles extend across all cultures, it will be useful for you to study and observe specific cultures and their interpretation of layout. Designers often find inspiration in the different approaches of other cultures. It is important to remember, though, that the audience must still be able to easily understand what is being communicated.
+
+Layout has its roots in the hand-copied books of the Middle Ages. The principles in layout were further developed once the printing press was created in the 1400s. Today, layout is a vast field that includes complex designs, like magazine and catalogue layouts. Proper page design is required for print design and web design. Both print and screen-based media elements usually consist of type (text), images (pictures), and place-holder graphics.
+
+![Elements](../images/design-1/Layout/Thefundamentalsoflayout-2.jpeg\) _Figure 2. Example of elements used on a website (pinchofyum.com, 2020)_
+
+As technology developed, our approach to layout progressed. We are now able to use advanced equipment to produce many different effects which previously had to be done by hand. Visual and audible communication has also developed – we are now able to use a combination of picture and sound to communicate our message. In fact, we are able to interact with the viewer in more ways than ever before! This impacts on our understanding of and the possibilities of layout and the conveying of information.
+
+When working with layout, consider whether the design will eventually be produced in print, such as magazines and newspapers, digitally such as online, or as a combination of both print and digital media. It will help you to decide on the different elements you need to add, for example, interactive elements (which will only work on digital media). Also, look at how these elements will influence the layout. For example, where you would have to use written type or visuals and graphs to communicate extensive data in print. You could make this more expansive on digital media, using interactive animations of graphs that reveal data in layers and at the viewer’s own pace.
+
+Bear in mind the digital or electronic page is better known as a "graphical user interface" (GUI) when interactive elements are included. It usually includes interactive elements and multimedia that are added to the usual elements (text and still images). What makes interactivity relevant is that it gives designers the chance to take page layout to another level. You now must do more than just attract the viewer's eye; you need to create a user experience.
+
+It is best to create rough pencil sketches before your design is produced on the computer. It is also important when it comes to layout, whether it is for print or website design. It doesn't mean you have to limit yourself - as the different production methods branch out, so do the many possibilities of communication. So, if you have new ideas while you design, especially when it comes to interactive media, explore them!
+
+![Simple sketch](../images/design-1/Layout/Thefundamentalsoflayout-3.jpeg\) _Figure 3. A simple sketch before work on the computer starts (Pexels, 2016)_
+
+It is essential to know that the fundamentals we discuss in this lesson will always apply and help you to organise information in a way that is easy for the viewer to understand.
+
+## The principles of layout
+
+Good design is CRAP. CRAP is an acronym of the basics of design - contrast, repetition, alignment, and proximity. These practices can improve visual hierarchy, readability, appeal, and order to the overall design.
+
+### Contrast
+
+All visual elements looking the same on a web page can make a design come across as dull or uninspired. Imagine a website where there is no contrast between images, or the only visible colour is black and the text is the same size throughout with no headings, subheadings, or body text. Contrast creates visual interest and helps to attract the viewer’s attention to vital information. There are methods that can help to achieve contrast in a design – these include size, shape, direction, and colour.
+
+![Contrast](../images/design-1/Layout/Thefundamentalsoflayout-4.jpeg\) _Figure 4. Methods to achieve contrast (Archibald, 2012)_
+
+### Repetition
+
+Repetition allows for consistency in design. It refers to the reusing of similar design elements, such as a specific font, or a border around an image, or even a colour. If those elements are continuously used, repetition occurs. Not only does repetition bring consistency to a design, but it also helps the designer to create a design style that will hopefully be remembered by the user.
+
+![Repetition](../images/design-1/Layout/Thefundamentalsoflayout-5.jpeg\) _Figure 5. An example of repetition in layout and composition (Archibald, 2012)_
+
+### Alignment
+
+Alignment refers to text and design elements - such as images and icons - that are placed on a page so that they line up in relation to each other, or in relation to the page on which they are placed. Proper alignment creates order and helps organise visual elements to increase readability. Elements can be left-aligned, right-aligned, centre aligned (horizontally), centre aligned (vertically), bottom aligned and top aligned.
+
+![Alignment](../images/design-1/Layout/Thefundamentalsoflayout-6.jpeg\) _Figure 6. The different alignment methods (Archibald, 2012)_
+
+### Proximity
+
+The principle of proximity is practised when related design elements are placed together or close to each other. Proximity creates visual unity in design and helps to organise elements to increase comprehension for the viewer.
+
+![Proximity](../images/design-1/Layout/Thefundamentalsoflayout-7.jpeg\) _Figure 7. An example of proximity (Archibald, 2012)_
+
+## Grids
+
+Now that we have discussed the importance of the basic principles of layout and composition, knowing how to organise these is equally important. A building plan is shown as a blue piece of paper with a superimposed white grid. The grid demonstrates the alignment of walls on the plan. Grids serve a similar purpose for a web designer, guiding the designer where to place content on a page, and ensuring consistency and hierarchy (Babich, 2017).
+
+Let's take a look at the different parts of a grid system.
+
+### Format
+
+Just as an artist uses a canvas to paint on, the format is the area or space where you would place your design elements. In this area, you would use the principles of layout to bring together the visual aspects of your design. In print, this space is called a page and in web design a browser window (Velarde, 2018).
+
+![Blank page](../images/design-1/Creating-prototypes/Figure%202*Figma_DesignMode.png\) \_Figure 8. Example of a blank page in Figma.*
+
+### Margins
+
+A margin is the outside space around the border area that would contain the content. Margins and padding are often confused since both are used to add space to design. The difference is that margins are the outside space, whereas padding would be the inside space.
+
+![Margins](../images/design-1/Layout/Thefundamentalsoflayout-9.jpeg\) _Figure 9. Example of a margin, border, and padding._
+
+### Columns
+
+Columns are the vertical parts of a grid. Some might say the more columns in the grid, the more flexible the website design will be (Coyle, 2014).
+
+![Columns](../images/design-1/Layout/Thefundamentalsoflayout-10.jpeg\) _Figure 10. Example of a column._
+
+### Rows
+
+Unlike columns that go from top to bottom, rows are the horizontal parts of a grid that stretch from left to right.
+
+![Rows](../images/design-1/Layout/Thefundamentalsoflayout-11.jpeg\) _Figure 11. Example of a row._
+
+### Modules
+
+In the same way that streets intersect and create intersections, modules are the space where columns and rows overlap each other and create intersections.
+
+![Modules](../images/design-1/Layout/Thefundamentalsoflayout-12.jpeg\) _Figure 12. Example of a module._
+
+### Gutters
+
+Gutters are the white space in between columns and rows. The smaller the gutter area, the less breathing space the visual elements will have and the greater the tension between them would be. With gutters that are bigger, you'll find a more calming layout, because the visual elements would have more breathing space. White space can also be seen as an essential principle of layout and composition since it helps you to separate different sections from each other and provides some design elements room to breathe (Coyle, 2014).\*
+
+![Gutters](../images/design-1/Layout/Thefundamentalsoflayout-13.jpeg\) _Figure 13. Example of the gutter._
+
+### Flowlines
+
+Flowlines help to lead the eye from one side of the page to another. They are also used to break up content in horizontal parts. Flowlines can also be used to align images and text. There are two primary types of flowlines called hang lines and baselines (Bradley, 2011). Hang lines refer to the top of a flowline, whereas baselines refer to the bottom.
+
+![Flowlines](../images/design-1/Layout/Thefundamentalsoflayout-14.jpeg\) _Figure 14. An example of flowlines on a page._
+
+### Spatial Zones or Regions
+
+Regions or spatial zones are when columns, rows, or modules are combined to form a space for composition (Coyle, 2014). For example, a horizontal zone can hold a photo or video, and a vertical area can be used to hold a paragraph of text. Knowing how to work with regions and spatial zones can help you to organise content (Velarde, 2018).
+
+![Regions](../images/design-1/Layout/Thefundamentalsoflayout-15.jpeg\) _Figure 15. An example of spatial zones or regions._
+
+## Types of grids
+
+Now that you have knowledge of the anatomy of a grid, the ability to identify the different types of grids will enable you to use various design elements and create flowing layouts that will make navigation for the user effortless. There are four main grid types, namely the manuscript grid, hierarchical grid, column grind, and the modular grid.
+
+### Manuscript grid
+
+The manuscript grid is the simplest grid structure of them all. It is basically a singular grid structure consisting of one column which takes up most of the space on a format or page. These are often made up of large blocks of text and are commonly used in blog posts and books. Microsoft Word, for example, will always use of the manuscript grid structure. So basically put, if the primary purpose is to have text, this structure is the best one to use.
+
+![Manuscript grids](../images/design-1/Layout/Thefundamentalsoflayout-16.jpeg\) _Figure 16. An example of the manuscript grid._
+
+### Hierarchical grid
+
+The hierarchical grid structure is often used on websites. As the name suggests, the most important elements are placed strategically so the user can notice them at first glance (Coyle, 2014). This type of grid is also often used when the content is not standardised.
+
+![Hierarchical grid](../images/design-1/Layout/Thefundamentalsoflayout-17.jpeg\) _Figure 17. An example of a hierarchical grid._
+
+### Column grid
+
+The column grid is probably the most common grid structure in website design. Magazines use them as well since this grid structure helps organise text and images in evenly spaced columns across the page. The number of columns can be anything from as little as two to as many as twelve. There are two types of column grids, namely symmetrical and asymmetrical column grids.
+
+![Column Grid](../images/design-1/Layout/Thefundamentalsoflayout-18.jpeg\) _Figure 18. An example of a column grid._
+
+### Modular grid
+
+As mentioned earlier, a module is situated where columns and rows intersect with each other. Simply put, a module is the result of columns and rows that overlap. The overlapping parts form a space called a module. A modular grid is used when a column grid is inadequate and when more structure is needed to organise content. Two are better than one, so columns and rows are used for organising content. Newspapers often use this grid structure to give structure to articles.
+
+![Modular grid](../images/design-1/Layout/Thefundamentalsoflayout-19.jpeg\) _Figure 19. An example of a modular grid._
+
+Grids are everywhere you look. Our whole world is built on grids since they add structure to art, design, and our daily lives. With time and experience, you can learn to work outside the grid. But before you can break the rules, you need to know them. Often when designers know how to break the rules, they manage to create art that would set them apart in the industry of design.
+
+![Layout](../images/design-1/Layout/Thefundamentalsoflayout*20.png\) \_Figure 20. An example of a layout and grids.*
+
+---
+
+## Activities
+
+### Activity 1
+
+> 🎥 **WATCH**
+>
+> Video: [Introduction to Layout: Free Web Design Course](https://www.youtube.com/watch?v=TDRhwSfxYkg) (15m 21s) by Flux Academy
+
+### Activity 2
+
+> 📚 **READ**
+>
+> Article: [A Quick Look at Types of Grids for Creating Professional Designs](https://visme.co/blog/layout-design/) by Orana Velarde.
+
+### Activity 3
+
+> 📚 **READ**
+>
+> Article: [How to Use C.R.A.P. Design Principles For Better UX?](https://vwo.com/blog/crap-design-principles/) by Nitin Deshdeep.
+
+### Activity 4
+
+> 🎥 **WATCH**
+>
+> Video: [Figma Tutorial: Setup a Responsive Grid Layout for UI & Web Design](https://www.youtube.com/watch?v=_w-iYiEXrl0) (11m) by Mizko
+
+---
+
+## Lesson Task
+
+### Goal
+
+Practise how to use grids in Figma for layouts that are easy to comprehend and easy to follow.
+
+### Brief
+
+Every website is unique but there are some common components that we can recognize in nearly every webpage. Some of the elements are so important that exclusion can cause confusion for users. Also, use of the grid is one of the most important components that you can find in almost every webpage. Many websites use the same grid, but they still wind up looking unique.
+
+Do a brief analysis of three websites of your choice and try to identify the various elements on each website, by answering the following questions for each site:
+
+- Does the website have a grid? If so, what grid structure is being used?
+- Which layout principles can be identified in the design? See if you can recognise all of them.
+- What design elements are present on the site? Remember, design elements are items such as a logo, video, text and/or images.
+- Look at the images, text, and other elements. What alignment technique (left align, centre, or right align) is being used to align these elements?
+
+### Level 1 Process
+
+- Open Figma and create a new page (1920 x 1080px).
+- Make sure your page consists of a proper grid structure.
+- Lay the various elements out on your page. Use shapes such as squares, circles, and lines to represent design elements. For example, a square with a play button can represent a video and horizontal lines can represent text.
+- Make sure you employ proper alignment and spacing for the various elements on your page.
+
+## Bibliography
+
+Babich, N., 2017. _Building Better UI Designs With Layout Grids._ [Online] Available at: <https://www.smashingmagazine.com/2017/12/building-better-ui-designs-layout-grids/> [Accessed 23 June 2020].
+
+Velarde, O., 2018. _A Quick Look at Types of Grids for Creating Professional Designs._ [Online] Available at: <https://visme.co/blog/layout-design/>[Accessed 23 June 2020].
+
+Coyle, A., 2014. _The Anatomy of a Grid._ [Online] Available at: <https://uxdesign.cc/the-anatomy-of-a-grid-c955d5355fae> [Accessed 23 June 2020].
+
+Bradley, S., 2011. _Anatomy of a Modular Typographic Grid._ [Online] Available at: <https://vanseodesign.com/web-design/grid-anatomy/> [Accessed 23 June 2020].
+
+pinchofyum.com, 2020. _Pinch of Yum._ [Online] Available at: <https://pinchofyum.com/> [Accessed 1 July 2020].
+
+Pexels, 2016. _pixabay.com._ [Online] Available at: <https://pixabay.com/no/photos/planer-design-webdesign-designer-1867745/> [Accessed 1 July 2020].
+
+Archibald, J., 2012. _Paper Leaf._ [Online] Available at: <https://paper-leaf.com/blog/2012/10/principles-of-design-quick-reference-poster/> [Accessed 1 July 2020].
diff --git a/packages/lms/src/routes/content/feu1/design/module-1/intro-branding/+page.md b/packages/lms/src/routes/content/feu1/design/module-1/intro-branding/+page.md
new file mode 100644
index 0000000..de775d2
--- /dev/null
+++ b/packages/lms/src/routes/content/feu1/design/module-1/intro-branding/+page.md
@@ -0,0 +1,201 @@
+---
+title: Introduction to branding
+tags:
+  - Design
+type: Lesson
+---
+
+## Introduction
+
+Does design matter? In order to understand why the answer to this question is undoubtedly _yes,_ an in-depth understanding of the fundamentals of design is necessary.
+
+> **NOTE:** This lesson contains 4 activities for your completion.
+
+## Design fundamentals
+
+There is always an alternative website offering a similar type of service or product that may be more appealing to users. To ensure that the websites that you design are appealing, ensure that you incorporate the basic fundamentals of good designing.
+
+Below describes the fundamentals of good design.
+
+### Good design considers the target audience
+
+Front-end developers must design the look and feel of a website in a manner that is appealing and user-friendly for the target audience. This includes the consideration of factors such as user age group, overall theme, and category of the website. Thus, the designer’s ability and skill are not all that matter. The front-end web developer must be skilled in (apart from design techniques) analysing the target audience so that web development tools such as HTML5 and CSS3, and languages such as JavaScript, can create websites that users want to view on a daily basis.
+
+**Example:** A developer wants to build a website for Minecraft, a decade-old, computer-based video game. 70% of Minecraft players fall within the 12 to 17-year age bracket. Thus, the developer should choose design elements wisely that young gamers would find it appealing.
+
+![Minecraft characters](../images/design-1/Introductiontobranding-1.jpg\) _Figure 1. Pixel-art style graphics. One of the most characteristic elements of the game Minecraft (Nintendo, 2018)_
+
+### Good design is user-friendly
+
+Users should not be expected to spend time figuring out the navigation and other aspects of the websites that you design. A fundamental principle to designing a website is to ensure it is user-friendly.
+
+### Good design is simple
+
+Maintaining simplicity is one of the most important aspects front-end web development. No-one wants to spend too much time on a website that is cluttered with links, buttons, and text. As you may have experienced yourself, this tends to become very frustrating.
+
+Keep things simple by:
+
+- Displaying only essential information on each page.
+- Providing a link to lead the user quickly to further, more detailed, information.
+- Presenting information in a clear manner (this is discussed further in the following tab)
+
+### Good design takes typography, colour, and composition skills into consideration
+
+Everything on the website must be readable and obvious. This means being skilled in choosing the right typography, colour combinations, graphic elements, and design patterns. The chosen typeface must be easy to read, appear well-rendered, and well-placed. Images and backgrounds, as well as the combination of the icons and symbols used, must be of good quality. For all businesses, but especially those who are fully website-based, a website with zero flaws is fundamental to success. It is thus vital that the front-end developer not only master the languages and tools with which to design websites, but also develop a sense of quality, decency, simplicity, and beauty in the work he/she produces.
+
+You will be expected to lead your clients in fleshing out the:
+
+- target audience
+- own market segment
+- KSPs (Key Selling Points)
+- overall goals for the website
+- identity
+
+Once you have worked with your client on these aspects, you must then decide how to include these aspects so that the client’s business goals are reached in a way that creates an appealing website for the user. Choosing factors such as decent animations, transitions, typefaces, colours, and images plays a vital role at this point.
+
+Incorporating these fundamentals of good design is essential, and not doing so can have far-reaching consequences. An example that highlights the importance of good design, and the catastrophic impact that poor design choices can have on a business, is the case of [the $300 Million Button.](https://articles.uie.com/three_hund_million_button/) It is thus an inseparable part of a front-end web developer’s responsibility to remain adept not only at coding, but also at making various design decisions. A developer who understands design principles well has powerful tools to create websites that can attract more customers and encourage them to use the same site repeatedly. A front-end developer should think of knowledge in design as mandatory.
+
+## What is branding?
+
+In this section, we will look at brand identity fundamentals and explore the functions of different brand assets.
+
+### Definition of branding
+
+According to Wheeler (2020), _branding is a disciplined process used to build awareness and extend customer loyalty. It requires a mandate from the top and readiness to invest in the future. Branding is about seizing every opportunity to express why people should choose one brand over another. A desire to lead, outpace the competition and give employees the best tools to reach customers are some of the reasons why companies invest a lot of money in good branding._
+
+The physical appearance of a person includes the clothes that they wear, their physical body and their facial features. These are aspects to an individual that are visual. Along with these aspects comes how the individual interacts with the world through sense of humour, tone of voice, personality and manner of expression. A person is thus a mix of physical appearance and manner or style of communicating. The branding of a product is similar. The product has a physical appearance in the form of a logo (visual identity). However, this logo communicates and interacts with the world, impacting people differently based on their perceptions, emotions and backgrounds (brand identity).
+
+![Adidas brand](../images/design-1/Introductiontobranding-2.jpeg\) _Figure 2. Adidas doing a fine job at showcasing their brand to the world (adsoftheworld.com, 2016)_
+
+### Visual identity: the brand logo
+
+In most cases, the logo is the essential building block of the brand. Adam, et al. (2006, p 16) notes that a logo “is a mark on the bottom of the television screen, the top of a cereal box, or the side of a letterhead”.
+
+It is also worth noting that the word “logo” has multiple meanings. There are also different words to describe this thing we call a "logo". It´s rare that you, as a front-end developer, will work with logo design, but it can be useful to understand some of the fundamental ideas and principles.
+
+![Adidas Logos](../images/design-1/Introductiontobranding-3.png\) _Figure 3. The adidas logo through the years. Notice how it has change, but is still recognisable (1000logos.com, 2019)_
+
+### Brand identity
+
+It is usually much easier to create a brand identity on paper than bring it to life (Budelmann, et al., 2010). In other words, for the developer, promising a good brand is simple, but delivering on what was promised is a whole new ball game.
+
+To create a brand identity, the developer must consider:
+
+- the brand’s elements and actions that are recognised by customers.
+- the business’ or company’s core value plans and positioning.
+- the business strategy.
+- the nature of the business or company.
+- the type of marketplace.
+- the target market.
+
+> **NOTE:** Budelmann, et al. (2010) further outlines that once a business strategy is in place; other factors such as the company’s audience, play a role in its brand identity (p. 90). There is interaction and cross-referencing between design, business strategy, and the result of brand identity. For now, this is all you need to know about this.
+
+Through the process of problem solving, designers often land on a better understanding of the meaning and values of the brand. Often the work of building the brand helps for the brand’s strengths to come forward.
+
+### Brand consistency
+
+Budelmann, et al. (2010) emphasises the role of the designer by stating that the key to brand identity is consistency. Consistency protects the brand promise made by the company to the client and ensures it is easily understood. The brand promise is essential – it is what the company promises to achieve. The brand promise needs to become second nature to everyone working on the brand. Customers also need to understand the brand promise. Just as we are able to identify quickly when someone we know well is acting out of character, so is it easier to identify brand _inconsistency_ than brand _consistency._ This is why corporate missteps create such public relations nightmares.
+
+Successful brands build a personality with consistent behaviour. Decisions about what is appropriate — that is to say, ‘in character’ or ‘on brand’ — for advertising, promotions, products, websites, and selling environments, has the power to build up or damage brand identity.
+
+### Brand integration
+
+The ultimate purpose of a designer is to make every brand element work independently, but also to make them work together as a whole. This is brand integration. Remember, you are not only the designer but also the creator of the brand identity. That means that visual integration lies with you. You have great power - you can decide how the brand is shown to the world. Collaboration with the client is, of course, vital.
+
+---
+
+## Activities
+
+> _"Making every page or screen self-evident is like having good lighting in a store: it just makes everything seem better. Using a site that doesn't make us think about unimportant things feels effortless, whereas puzzling over things that don't matter to us tends to sap our energy and enthusiasm and time." – Steve Krug in ‘Don’t Make Me Think’_
+
+### Activity 1
+
+> 📚 **READ**
+>
+> The following chapters from the book _Don't Make Me Think_ by Steve Krug (p.10-28):
+>
+> - Chapter 1: Don't Make Me Think
+> - Chapter 2: How We Really Use the Web
+> - Chapter 3: Billboard Design 101 (Design for scanning, not reading) (1h)
+
+### Activity 2
+
+> 📚 **READ**
+>
+> From the book _Design for Hackers_ by David Kadavy:
+>
+> - Chapter 2: The Purpose of Design (p.19-33) (1h)
+
+### Activity 3
+
+> 🎥 **WATCH**
+>
+> The following LinkedIn Learning videos from Brad Batesole (remember to be logged into your account) as a short introduction to brand touch points.
+>
+> - Video: [The influence of touchpoints](https://www.linkedin.com/learning/advanced-branding/the-influence-of-touch-points?u=43268076) (3m 40s).
+> - Video: [Branding through storytelling](https://www.linkedin.com/learning/advanced-branding/branding-through-storytelling-2?u=43268076) (3m 1s).
+> - Video: [Exploring the customer journey](https://www.linkedin.com/learning/advanced-branding/exploring-the-customer-journey-2?u=43268076) (3m 4s).
+
+### Activity 4
+
+> 🎥 **WATCH**
+>
+> - Video: [The 3 Rules of Good Logo Design](https://www.youtube.com/watch?v=VnBUOjxmn1g) (2m 4s) by The Futur Academy.
+> - Video: [What Is Branding? 4 Minute Crash Course](https://www.youtube.com/watch?v=sO4te2QNsHY) (3m 48s) by The Futur Academy.
+
+---
+
+## Lesson Task
+
+### Goal
+
+Learn to observe, analyse, and evaluate design solutions from a user's point of view, and recognize the difference between good and bad design.
+
+### Brief
+
+> "In most people's vocabularies, design is a veneer. It`s interior decorating. It’s the fabric of the curtains or sofa. But to me, nothing could be further from the meaning of design. Design is the fundamental soul of human-made creation that ends up expressing itself in successive outer layers of a human-made creation that ends up expressing itself in successive outer layers of the product" - Steve Jobs
+
+Your task is to do a brief visual evaluation and look at three websites from a user's point of view.
+
+Below are some questions that can help you to evaluate the webpages. After answering these questions, write a summarizing report (300-500 words) about each of the websites.
+
+1. [www.arngren.net](http://www.arngren.net)
+
+2. [www.norsk-tipping.no](http://www.norsk-tipping.no)
+
+3. [www.norwegian.no](https://www.norwegian.no/)
+
+> **NOTE:** Lesson Tasks do not get submitted on Moodle and are not assessed by tutors. They are mainly there for you to practise what you have learned in the lesson.
+
+### Level 1 Process
+
+- Is there a clear statement of purpose of the site? The purpose must be clear within a few seconds.
+- Is the site’s design aesthetically appealing?
+- Is the website copy succinct but informative?
+- Does the copywriting style suit the website’s purpose and speak to its target audience?
+- Are bodies of text broken into easy-to-read chunks?
+- Do the colours work in harmony?
+- Is the design appropriate for the target audience?
+- Do clickable items stylistically indicate that they are clickable?
+- How intuitive is it to navigate? Are signs obvious or obscured?
+- Is it readable? Consider typeface, font size, colour contrast.
+
+### Level 2 Process
+
+- Is the content structurally separate from the navigational elements?
+- Is the website optimized for mobile devices?
+- Does the site load quickly - even (especially) for mobile device users?
+
+## Bibliography
+
+Nintendo, 2018. _Minecraft: New Nintendo 3DS Edition._ [Online] Available at: <https://www.nintendo.co.za/Games/New-Nintendo-3DS/Minecraft-New-Nintendo-3DS-Edition-1275925.html> [Accessed 3 July 2020].
+
+Spool, J. M., 2009. _UIE._ [Online] Available at: <https://articles.uie.com/three_hund_million_button/> [Accessed 3 July 2020].
+
+Wheeler, A., 2020. _Ignyte._ [Online] Available at: <http://www.ignytebrands.com/what-is-a-brand/#:~:text=The%20Takeaway&text=%E2%80%9CBranding%20is%20a%20disciplined%20process,to%20invest%20in%20the%20future.&text=A%20desire%20to%20lead%2C%20outpace,reasons%20why%20companies%20leverage%20branding.%E2%80%9D> [Accessed 13 July 2020].
+
+Budelmann, K., Yang, K. & Wozniak, C., 2010. _Brand Identity Essentials: 100 Principles for Designing Logos and Building Brands._ s.l.:Rockport Publishers.adsoftheworld.com, 2016. _Running._ [Online] Available at: <https://www.adsoftheworld.com/media/print/adidas_running_0> [Accessed 1 July 2020].
+
+1000logos.com, 2019. _Adidas logo._ [Online] Available at: <https://1000logos.net/adidas-logo/> [Accessed 2020 July 2020].
+
+Adam, S., Morioka, N. & Stone, T. L., 2006. _Logo Design Workbook: A Hands-On Guide to Creating Logos._ s.l.:Rockport Publishers.
diff --git a/packages/lms/src/routes/content/feu1/design/module-1/visual-hierarchy/+page.md b/packages/lms/src/routes/content/feu1/design/module-1/visual-hierarchy/+page.md
new file mode 100644
index 0000000..e94cb48
--- /dev/null
+++ b/packages/lms/src/routes/content/feu1/design/module-1/visual-hierarchy/+page.md
@@ -0,0 +1,184 @@
+---
+title: Organising visual language and establishing visual hierarchy
+tags:
+  - Design
+type: Lesson
+---
+
+## Introduction
+
+This lesson presents an introduction in establishing visual hierarchy in design. It presents an overview on how to organise visual elements to guide online users in knowing which actions to take when entering a website.
+
+> **NOTE:** This lesson contains 3 activities that you should complete.
+
+## What is visual hierarchy?
+
+In design, visual hierarchy is achieved when elements are arranged and placed in spaces according to their rank of importance. For example, on a website, the logo and menu items would be at the top, because they are the first elements a user would see when entering the site. The logo tells the story of the business and the menu directs the user to where they want to go and helps guide them to reach the end goal. The goal may be to purchase a product or read a news article that sparks their interest. In short, visual hierarchy is achieved when elements are logically and strategically placed to guide the user to perform the desired action.
+
+## Organising visual language
+
+One needs to understand the importance of visual language before starting to design (Malamed, 2009, p. 10). A picture is more than just a two-dimensional image on a flat surface. It reflects the creator's intent and it communicates information. It is the result of creative play and thoughtful decisions. It gives the viewer a visual experience. In other words, each picture has a purpose. Designers assume that viewers will understand their message. They believe that when the viewer looks at the colours, shapes, and lines, a form of communication will take place. Designers also assume that the viewer will look at the picture in a set sequence (in other words, the viewer's eye will travel to the most important parts first and to the least essential elements last). The designer has control over this sequence.
+
+When you plan your design, you need to decide what you want the viewer to focus on first. What are the most important parts of the design? The viewer might have to read the headline first before the picture or the body copy would make sense.
+
+![Visual hierarchy](../images/design-1/Visual-Language/Organisingvisuallanguageandestablishingvisualhierarchy-1.png\) _Figure 1. Visual hierarchy is achieved with different font sizes, widths, and colour_
+
+To complicate the matter even further, certain cultures (and even age groups) see things in different ways. That means that you can't simply assume that everyone will see the image in the same way you do. As a designer, you will most probably have a better understanding of perception because you work with visuals every day. Because of this, you will also understand the concept of visual language better. So, what comes naturally to you might have to be spelled out to the viewer.
+
+This does not mean that your viewer is unintelligent and should be treated that way (you can't add an instruction manual along with each design to explain the concept). All it means is that you should use the tools of perception to your advantage. The viewer should be able to take in the message easily and comfortably.
+
+It demands us to merge information and knowledge and to use it imaginatively to create purpose in the search for fresh information. This highlights the importance of being able to use information (from a client brief) and take it to new heights in your design. The message should be clearly understood and the viewer should feel enriched when consuming information. To achieve this, each element of your design should have intent and purpose; never add something simply because you want to fill a space with visuals.
+
+Fortunately, the ability to perceive is naturally strong in most viewers. That means that designers don't have to use intricate tools and complicated methods to express information. They should simply understand the underlying principles at work when visual language is being perceived. And then, of course, as with all forms of creativity, designers should also make their own observations. This will help them to think logically, use the design fundamentals wisely, and gain an individual understanding of the process.
+
+Our eyes are remarkably alert and responsive (Malamed, 2009). This helps us perform tasks that are necessary for survival in our environment. At the same time, we can use our sight to see and understand pictures. For example, without even thinking about it, we constantly scan our surroundings to extract information about what is "out there". If there is anything important or unusual, we notice it.
+
+Similarly, without even thinking about it, we scan a picture or design to gain information. We immediately notice if there is anything important or interesting. All of this happens effortlessly before we have consciously focused our attention. The following print advert by the Agency Network JWT serves as an excellent example of how a well-designed advert can immediately capture the imagination of the audience (JWT, 2010).
+
+![Hierarchy](../images/design-1/Visual-Language/Organisingvisuallanguageandestablishingvisualhierarchy-2.jpeg\) _Figure 2. Band-aid Hulk. A good example of visual hierarchy achieved by the agency network JWT (JWT, 2010)_
+
+So how does one communicate using a visual language? How do you know where to place all the different elements? Let's take a look at the most important mechanics of perception and how the designer can use these to make perception easier for viewers:
+
+The first rule of thumb is to direct the eyes of the viewer. The importance of this becomes clear when considering this quote by Jack Frederick Meyers:
+
+> _"If the viewer's eyes are permitted to wander at will through a work, then the artist has lost control." - Meyers (1989)_
+
+The designer needs to decide what the order of perception will be. This means that the designer has to decide what the viewer will see first, and what the viewer will see last, which parts of the design should be emphasised and which parts are relevant, but not crucial.
+
+So how does one do this? How do you direct someone else's eyes? We will now look at the fundamentals of visual language. These fundamentals are useful tools that will help you achieve a good visual balance. Apart from using these fundamentals, it is also important to make your own observations. Scroll through a website. What draws your attention? What colours and layouts do you notice first? If possible, get feedback from the people who view your designs. Did they react in the way you intended?
+
+## The fundamentals of visual language
+
+The most common way to communicate is verbally. When you tell a friend a story, you are communicating verbally by making use of spoken words in a certain language. The same thing happens when visual communication takes place. But instead of spoken words, we use visuals to communicate certain information to our audience. Visual communication can complicate getting the message across. That is why these fundamentals of visual language can assist in storytelling and exhibiting the most essential information.
+
+**_Position_**
+
+The boundaries that form the edges of a graphic, also known as the frame, have a powerful effect on a composition. Whether it is a postcard, a page, a poster, or a screen, the frame creates meaning for the elements inside it. It is generally accepted that the position of an object within a frame creates a certain tension. This tension affects the perceived importance of an object and thus where we place our attention. Look at this webpage with a big splat of colour near the edge of the screen:
+
+![Position](../images/design-1/Visual-Language/Organisingvisuallanguageandestablishingvisualhierarchy-3.png\) _Figure 3. Paint splash in near the edge of the page_
+
+Now look at the same splat of colour right in the centre of the screen. Which would be more comfortable to focus on?
+
+![Colour](../images/design-1/Visual-Language/Organisingvisuallanguageandestablishingvisualhierarchy-4.png\) _Figure 4. Paint splash in the centre of the page._
+
+Most people would find the paint splat in the middle of the screen more comfortable to look at because there is plenty of white space in-between the image and the frame of the screen.
+
+If you think carefully about where you place each element, you can create a visual hierarchy to direct the viewer's eyes. The position of each element conveys its importance. Start with the most important element and work your way down to the least important element. For example, in a magazine spread, the information graphic might be the most dominant element, followed by a headline and then body copy.
+
+## A standard visual hierarchy consists of three levels - primary, secondary, and tertiary
+
+- The primary level of a design refers to the visual that draws the reader’s attention to the most important information of the design. This can be a bold headline or a striking image, for example.
+- The secondary level refers to information that is still important, but not as important as the headline or the main graphic. Scannable information like sub-headlines and infographics that help the reader to stay with the design and get more information about the product.
+- The tertiary level is the main text or body text of your designs. Here the reader will get all the necessary information about the product. It’s the smallest type in the design, but it still needs to be large enough to be completely readable.
+
+Our understanding of positioning in a frame is a metaphor for how we view hierarchies in the world. We speak of people who have important positions as being at the top. Likewise, we expect the same in pictures. We anticipate that elements at the top of a page will be the most important. In fact, research shows that objects in the top half of a picture are considered more active, dynamic, and potent. In other words, they have more visual weight. Think of where the call-to-action button of a webpage normally appears. The best place would be above the fold so that the user immediately sees it when he/she enters the website. Above the fold refers to the upper half of a webpage that is instantly visible to the online user without them scrolling down. Research also shows that viewers spend more time viewing the left upper half of the page than the right lower half. Placing a company’s logo on the left upper hand of the screen, for example, would give it more visual power. The user would remember the brand more clearly. There's one thing we can be sure of: changing the position of an object in a frame changes its impact on the viewer.
+
+Look at the following layouts. What feeling arise when you look at them?
+
+![Gestalt](../images/design-1/Visual-Language/Organisingvisuallanguageandestablishingvisualhierarchy-5.png\) _Figure 5. Gestalt compositions (Iott, 2012)_
+
+Now view the following images one at a time and consider if you agree with the descriptions given below.
+
+![Composition](../images/design-1/Visual-Language/Organisingvisuallanguageandestablishingvisualhierarchy-6.png\) _Figure 6. An example of compositions comfort and playfulness (Iott, 2012)_
+
+The first image (left) brings a feeling of comfort to the viewer as the different elements are placed in the form of a hammock. The second image (right) is more playful because the elements are placed in the middle and their orientation is unpredictable and more carefree.
+
+![Tension](../images/design-1/Visual-Language/Organisingvisuallanguageandestablishingvisualhierarchy-7.png\) _Figure 7. An example of compositions tension and congestion (Iott, 2012)_
+
+The layout on the left can be described as tension in a sense. There is no room to breathe because there is no white space present between the various elements. The layout on the right represents a feeling of congestion as the elements are placed to represent somewhat of a bottleneck effect.
+
+![Order](../images/design-1/Visual-Language/Organisingvisuallanguageandestablishingvisualhierarchy-8.png\) _Figure 8. An example of compositions order and tension (Iott, 2012)_
+
+The layout to the left brings a feeling of order. If you look closely you would notice that the elements are in perfect balance with each other. The layout to the right creates tension as the biggest element are placed on top of a smaller element. It almost feels as if the smaller element would break at any given time.
+
+**_Emphasis_**
+
+Creating energy and life in design is achieved by variation and emphasis. Making everything of the same importance or strength will weaken the design or render it so monotonous that the viewer loses interest. An important aspect of captivating design is the balance between elements in composition – the strategic use of emphasis and balance.
+
+Emphasis can be created by size, weight, position, colour, shape, and style. Contrast and emphasis are often confused and seen as the same thing, but in reality, they are a bit different from each other. Contrast is the difference between two objects whereas emphasis is the impact on an object and how that object forms a focal point in the overall design. Think of a pattern of black dots, and now imagine one dot being red. Your eye would immediately go to the red dot. That would be your focal point, created by emphasis (Invision, 2020).
+
+![Emphasis](../images/design-1/Visual-Language/Organisingvisuallanguageandestablishingvisualhierarchy-9.jpeg\) _Figure 9. An example of emphasis in design._
+
+**_Movement_**
+
+When a design has a dynamic sense of movement, our eyes seem to glide across its screen. Movement can be explained as an energetic force or tension between the lines, textures, shapes, and forms of a graphic. Movement is more than just the repetition of patterns. It sweeps the viewer's attention over a picture. It is a powerful way for designers to direct the viewer's eye to the important elements in a graphic.
+
+Consider your design and how you would like the viewer's eyes to move through this. Do you want the viewer to move across and off your page or do you want the viewer to return his or her eyes back onto the composition?
+
+Look at the example below. Notice how the motion in the image draws your eyes to the call to action button.
+
+![Motion in a website](../images/design-1/Visual-Language/Organisingvisuallanguageandestablishingvisualhierarchy-10.jpeg\) _Figure 10. An example of motion on a website._
+
+The Nielsen Norman Group describes visual hierarchy as having control of delivering the experience. It goes on to say that if the user has a hard time in figuring out where to look on a page, it’s more than likely that the layout is missing a clear visual hierarchy. This is 100% accurate. Therefore, it’s essential for you as a designer to think clearly about where to place elements and which elements you what your user to see first. What would make them stay and continue their journey to reach the end goal? (Group, 2020)
+
+---
+
+## Activities
+
+### Activity 1
+
+> 📚 **READ**
+>
+> To get a better understanding of emphasis in design read the following article by Mads Soegaard: [Emphasis: Setting up the focal point of your design](https://www.interaction-design.org/literature/article/emphasis-setting-up-the-focal-point-of-your-design) (12m\) _"For a user to be able to navigate through all the information in a website or application, that information needs to be clearly presented and have a clear hierarchy"._ - David Kadavy
+
+### Activity 2
+
+> 📚 **READ**
+>
+> In David Kadavy's book, _Design for Hackers_, explore some useful tips and techniques for establishing good layouts and visual hierarchies.
+>
+> Chapter 7: Enlivening Information: Establishing a Visual Hierarchy (p.168-190) (3 hours)
+
+In 2014 Google developed a new design language - Material Design. Expanding upon the "card" motifs that debuted in Google Now, Material Design makes more liberal use of grid-based layouts, responsive animations and transitions, padding, and depth effects such as lighting and shadows. On their webpage they write:
+
+> _"We challenged ourselves to create a visual language for our users that synthesises the classic principles of good design with the innovation and possibility of technology and science. This is material design. This spec is a living document that will be updated as we continue to develop the tenets and specifics of material design.”_
+
+### Activity 3
+
+> 🎥 **WATCH**
+>
+> Video: [The Intricate and Beautiful World of Material Design](https://www.youtube.com/watch?v=VqJm8Xqgmq8) (8m 26s) by XDA.
+
+---
+
+## Lesson Task
+
+### Goal
+
+To practise achieving visual hierarchy in design using typography.
+
+### Brief
+
+To learn the importance of size and weight in achieving visual hierarchy with regards to fonts, use the following for a headline, sub-headline and body copy:
+
+- Headline: Are you still watching?
+- Sub headline: It’s been half a day and you are still wearing your pjs.
+- Body text: Your loved ones are worried about your mental state because you have been binge watching Game of Thornes for the past 12 hours and they have found you with Cheeto dust on your face. Continue watching or get some fresh air. Either way, we won’t go anywhere.
+
+You can use any font of your choice, but make sure it is easy to read and visually appealing. The headline should draw the user’s attention, the sub-headline should give vital information and the body copy should tell the user exactly what the product is used for and where they can get access.
+
+## Level 1 Process
+
+- Open Figma and create a new page (1920 x 1080px).
+- Create a headline.
+- Create a sub headline.
+- Add the body text.
+- Style the headline, sub headline and body text to form a proper visual hierarchy that will draw the viewer’s attention and give them the information required to make an informed decision.
+
+## Level 2 Process
+
+- Create an action button for ‘continue watching’ and place it underneath the body text or where it will be clearly visible for the online user to see
+
+## Bibliography
+
+Malamed, C. (2009). _Visual Language for Designers: Principles for Creating Graphics that People Understand._ Rockport Publishers.
+
+JWT. (2010). _Band Aid Hulk_. Retrieved July 2020, from adsoftheworld.com: <https://www.adsoftheworld.com/media/print/band_aid_hulk>
+
+Meyers, J. F. (1989). _The language of visual art: Perception as a basis for design._ Houghton Mifflin Harcourt School.
+
+Iott, A. (2012). _Gestalt Composition_. Retrieved July 2020, from aliciaiott: <https://aliciaiott.wordpress.com/gestalt-composition/>
+
+Invision. (2020). _Principles of design_. Retrieved July 2020, from invisionapp.com: <https://www.invisionapp.com/design-defined/principles-of-design/>
+
+Group, N. N. (2020). _5 Principles of Visual Design in UX_. Retrieved July 2020, from Nielsen Norman Group: <https://www.nngroup.com/articles/principles-visual-design/>
diff --git a/packages/lms/src/routes/content/feu1/design/module-2/+page.md b/packages/lms/src/routes/content/feu1/design/module-2/+page.md
new file mode 100644
index 0000000..c4cfca9
--- /dev/null
+++ b/packages/lms/src/routes/content/feu1/design/module-2/+page.md
@@ -0,0 +1,9 @@
+---
+title: Module 2
+tags:
+  - Design
+type: Module
+previous: Module 1
+---
+
+Here we learn more about using Colour in Online Design.
diff --git a/packages/lms/src/routes/content/feu1/design/module-2/colors-of-the-web/+page.md b/packages/lms/src/routes/content/feu1/design/module-2/colors-of-the-web/+page.md
new file mode 100644
index 0000000..9aac81d
--- /dev/null
+++ b/packages/lms/src/routes/content/feu1/design/module-2/colors-of-the-web/+page.md
@@ -0,0 +1,198 @@
+---
+title: Understanding the colors of the web
+tags:
+  - Design
+type: Lesson
+---
+
+## Introduction
+
+Understanding the colours of the web and knowing how they work is fundamental for any web developer. In the previous lesson, we’ve touched on the RGB colour system and looked at the differences between CMYK and RGB values; specifically, which is used for print and which is used for the web. In this lesson, we will further discuss the colours of the web. We will also have a look at Web Content Accessibility Guidelines (WCAG) and how colour should be applied to meet these guidelines.
+
+> **NOTE:** This lesson contains 2 activities that you should complete.
+
+## Hex and RGB colour codes
+
+Hexadecimal colour codes are used in web design for the colours in a website and are often referred to as hex. Hex can be used in your CSS styling and are supported in all browsers.
+
+![Hex codes](../images/design-1/Colours-of-web/Understandingthecoloursoftheweb-1.jpeg\) _Figure 1. An example of HEX and RGB colour codes in Adobe Photoshop._
+
+RGB (red-green-blue) is also used on the web to represent colours, but they are written in different ways in the code.
+
+## RGB colours
+
+RGB define all colours as a combination of three different values for Red, Green and Blue:
+
+- RGB (0, 0, 0) - this is black
+
+![Black](../images/design-1/Colours-of-web/Understandingthecoloursoftheweb-2.jpeg\) _Figure 2. RGB 000 – black._
+
+- RGB (255, 255, 255) - this is white
+
+![White](../images/design-1/Colours-of-web/Understandingthecoloursoftheweb-3.jpeg\) _Figure 3. RGB 255, 255, 255 – white._
+
+Each parameter (red, green, and blue) defines the intensity of the colour as an integer between 0 and 255. Play around with different RGB values to create a colour here.
+
+### Hexadecimal
+
+Hexadecimal uses 16 unique digits (0-F). Decimal only consists of the numbers 0 to 9, so in order to have 16 unique numbers or digits, the letters A to F are used for the extra 6 digits in hexadecimal:
+
+![Hex digits](../images/design-1/Colours-of-web/Understandingthecoloursoftheweb-4.png\) _Figure 4. Hex digits._
+
+A hexadecimal colour code is a 6-digit colour code prefixed with #. They look like this:
+
+![Hex codes](../images/design-1/Colours-of-web/Understandingthecoloursoftheweb-5.png\) _Figure 5. #CC3300._
+
+To understand the letters and numbers used after the #, a hexadecimal colour is specified as:
+
+![Hexadecimal colour](../images/design-1/Colours-of-web/Understandingthecoloursoftheweb-6.png\) _Figure 6. #RRGGBB a hexadecimal colour._
+
+In the #RRGGBB above: the first two digits denote red, the second two digits is for green, while the last two digits represent the blue shade. The hex colour system converts each value to hexadecimal. In reality, it’s still representing the same RGB value, just in another form. You may have heard it mentioned that RGB is a 24-bit colour. Since each of the three colours needs to have an equal portion of the 24-bits, it means that each of the three colours is represented by 8 bits. Otherwise known as a byte. This explains why the value range for each of the colours in RGB is 0 to 255 since 0 is the lowest value you can store in a byte and 255 is the highest.
+
+How does this relate to hexadecimal? Every hexadecimal digit is represented by four bits, which means that every byte of an RGB value can be represented by two hexadecimal digits, for instance:
+
+- 255 is 11111111 when written as a byte (a binary bit string)
+
+- If that byte is divided into two separate bit strings, it becomes 1111 and 1111
+
+- When the bit string 1111 is converted to hexadecimal, it becomes the digit F.
+
+- So that means, when written next to another, the bit strings 1111 and 1111 becomes FF.
+
+- This makes a decimal value of 255 equal to a hexadecimal value of FF.
+
+- So an RGB value of 255, 255, 255 would get converted to FF, FF, FF which is written in hexadecimal colour notation as #FFFFFF.
+
+With this logic, you’ll define how much red, green, and blue are in a colour by defining hexadecimal values between 00 and FF for each of the 3 parameters, instead of values in the decimal range of 0 to 255 like in RGB.
+
+For the hex symbols going from 00 to Ff, 00 is dark/min colour/or black, and FF is bright/max colour/or white.
+
+For example:
+
+`#0000FF` - is displayed as blue, because the blue component is set to its highest value (FF), and the others are set to 00.
+
+![Blue colourtone](../images/design-1/Colours-of-web/Understandingthecoloursoftheweb-7.jpeg\) _Figure 7. `#0000FF` displayed as blue._
+
+Each number denotes the intensity of that particular colour, some other examples:
+
+![Red colourtone](../images/design-1/Colours-of-web/Understandingthecoloursoftheweb-8.jpeg\) _Figure 8. #FF0000 only red (no green, no blue)_
+
+![Green colourtone](../images/design-1/Colours-of-web/Understandingthecoloursoftheweb-9.jpeg)\) _Figure 9. #00FF00 -- only green (no red, no blue)_
+
+`#FFFFFF` -- if all colours are in equal intensity, you get white.
+
+![White colourtone](../images/design-1/Colours-of-web/Understandingthecoloursoftheweb-10.png\) _Figure 10. `#FFFFFF` all white text._
+
+`#000000` -- if no colour is present, you get full black.
+
+![Black colourtone](../images/design-1/Colours-of-web/Understandingthecoloursoftheweb-11.png\) _Figure 11. `#000000` all black text._
+
+#### Abbreviated hex codes
+
+Hex codes like #FFF, #000, #0F0 or even #ABC are hex codes that use three digits. This is the shorter way of writing a code which is three pairs of identical digits: #FFFFFF, #000000, #00FF00 or #AABBCC.
+
+### Which one should you choose when coding?
+
+Many developers find hex values easier to read, so they use hex. Most design programs also provide the colour values in hex. At times, RGB is also used in CSS, as you can add an alpha value which is helpful when wanting to change the opacity of the colour. Bear in mind that when an alpha value is added to RGB, it becomes ARGB, which is a 32-bit colour and no longer a 24-bit colour. An extra byte of information is added to define the opacity/transparency of the colour.
+
+See the infographic below for a better understanding of the use of the different colour system and when to use each one.
+
+![Colours explained](../images/design-1/Colours-of-web/Understandingthecoloursoftheweb-12.jpeg\) _Figure 12. PMS, CMYK, RGB and HEX explained (Kiss, 2020)_
+
+## Web Content Accessibility Guidelines (WCAG)
+
+Most restaurants, universities, shopping malls, and other public spaces cater for people with disabilities. Specifically individuals that cannot walk and are bound to a wheelchair. Have you ever noticed the wheelchair sign or the ramp outside a shopping mall that gives access to these individuals? Just as the architects and builders took them into consideration by providing them specialised access, so too does a front end developer need to do when designing and developing a website.
+
+### What is WCAG
+
+As mentioned earlier, WCAG stands for Web Content Accessibility Guidelines and was put into practice to make web content more user friendly for those with disabilities. Disabilities include, among others, colour blindness, low vision, or no vision at all, individuals with hearing problems, and individuals that are sensitive to flashing lights.
+
+People with disabilities are trying to accomplish the same things daily as people without a disability. They just need specialised tools to achieve their goals. Think of individuals with a colour-blind disability. Will they be able to distinguish between the call to action (CTA) button if it was green and the background if it was red? Probably not, they would have a hard time figuring out where the CTA is to add that pair of shoes to the cart. Will the flashing animation cause a problem with hypersensitive individuals? What about those individuals that suffer from low vision? Will they be able to see the physical address hosted in the footer if the text is small? These are all things that you as a front-end developer need to take into consideration. Your website needs to cater to these people just like it would for individuals without disabilities.
+
+For this lesson, we will take a closer look at the different types of colour blindness and what tools you as a developer can use to design a website with these individuals in mind.
+
+## Colour Blindness
+
+Colour blindness affects approximately 300 million people worldwide. The most common colour blindness is known as the ‘red/green colour blindness . Individuals that suffer from red-green colour blindness struggle to tell the difference between red and green.
+
+According to the National Eye Institute the different types of colour blindness are red-green colour blindness, blue-yellow colour blindness and complete colour blindness (National Eye Institute, 2019).
+
+### Red-green colour blindness
+
+**Deuteranomaly.** The most common type of red-green colour blindness. It makes green look more red. This type is mild and doesn’t usually get in the way of normal activities.
+
+**Protanomaly.** Makes red look more green and less bright. This type is also mild and usually does not get in the way of normal activities.
+
+**Protanopia and Deuteranopia.** Both of these make individuals unable to tell the difference between red and green.
+
+![Normal vision differentiation](../images/design-1/Colours-of-web/Understandingthecoloursoftheweb-13.jpeg\) _Figure 13. The difference between normal vision and Deuteranopia._
+
+![Normal vision comparision](../images/design-1/Colours-of-web/Understandingthecoloursoftheweb-14.jpeg\) _Figure 14. The difference between normal vision and Protanopia._
+
+### Blue-yellow colour blindness
+
+The National Eye Institute (2019) further explains that the blue-yellow colour blindness is the less-common type of colour blindness. For individuals suffering from this type of disability it’s hard to tell the difference between blue and green and between yellow and red.
+
+Tritanomaly makes it hard to tell the difference between blue and green, and between yellow and red.
+
+Tritanopia makes it hard to tell the difference between blue and green, purple and red, and yellow and pink. It also makes colours look less bright.
+
+![Normal vision and Tritanopia](../images/design-1/Colours-of-web/Understandingthecoloursoftheweb-15.jpeg\) _Figure 15. The difference between normal vision and Tritanopia._
+
+### Complete colour blindness
+
+Monochromacy is when someone is completely colour blind, they can’t see colour at all. This deficiency is quite rare.
+
+![Normal vs. blindness](../images/design-1/Colours-of-web/Understandingthecoloursoftheweb-16.jpeg\) _Figure 16. The difference between normal vision and someone who is completely colour blind._
+
+### Tools to ensure good colour
+
+To ensure there is a good contrast between colour you can use the following online tools:
+
+[Contrast Checker](https://contrastchecker.com/)
+
+[WebAIM](https://webaim.org/resources/contrastchecker/)
+
+It’s vital that your website that caters for everybody’s needs. For instance, individuals with a colour blind deficiency are not able to tell red and green apart, but they need to be able to see the difference between the colours on your website. Use tools such as these to check whether it is possible to differentiate the various colours used on the website, before deploying to the public.
+
+---
+
+## Activities
+
+### Activity 1
+
+> 🎥 **WATCH**
+>
+> Video course: [Accessibility for Web Design](https://www.linkedin.com/learning/accessibility-for-web-design/making-the-digital-world-accessible?autoplay=true&u=43268076) (1h 58m) by Derek Featherstone. He uses real scenarios to explain how a website can cater for individuals with disabilities.
+
+### Activity 2
+
+> 📚 **READ**
+>
+> From David Kadavy's book _Design for Hackers_: Section: 'How the visual system works' (pages 201-206) (1h)
+
+---
+
+## Lesson Task
+
+### Goal
+
+Explore the selected colour-blind simulator, Toptal. Get to know the tool, and become familiar with how the visually impaired see colour.
+
+### Brief
+
+Go to Toptal's Colorblind Web Page Filter and enter any three websites of your choice. Now do a colour-blindness check on different web pages and see the results.
+
+- Are there distinct differences?
+
+- Can you spot potential difficulties for colour-blind users?
+
+- Do a search and test other online colour-blindness simulators to find the best tool for you.
+
+### Bibliography
+
+Kiss, E. (2020). What’s the difference between PMS, CMYK, RGB and HEX? Retrieved July 2020, from Neglia Design: <https://negliadesign.com/ask-a-designer/whats-the-difference-between-pms-cmyk-rgb-and-hex/>
+
+colourblindawareness.org. (2020). Colour Blindness. Retrieved July 2020, from colourblindawareness.org: <http://www.colourblindawareness.org/colour-blindness/types-of-colour-blindness/>
+
+National Eye Institute. (2019). Types of Color Blindness. Retrieved July 2020, from National Eye Institute: <https://www.nei.nih.gov/learn-about-eye-health/eye-conditions-and-diseases/color-blindness/types-color-blindness>
diff --git a/packages/lms/src/routes/content/feu1/design/module-2/font-pairings/+page.md b/packages/lms/src/routes/content/feu1/design/module-2/font-pairings/+page.md
new file mode 100644
index 0000000..197ce7d
--- /dev/null
+++ b/packages/lms/src/routes/content/feu1/design/module-2/font-pairings/+page.md
@@ -0,0 +1,232 @@
+---
+title: Font pairings
+tags:
+  - Design
+type: Lesson
+---
+
+## Introduction
+
+Typography is when letters and text are arranged that makes information legible, clear and aesthetically pleasing. One needs to consider the role typography plays, and choose fonts for the headings and body content text that works well together.
+
+In this lesson, we will:
+
+- take a look at pairing different fonts
+
+- see how to use custom web fonts for your design
+
+- take a look at the style tile where we will take everything discussed in the previous lessons and put it all together in one design deliverable.
+
+> **NOTE:** This lesson contains 2 activities that you should complete.
+>
+> **NOTE:** The right choice for your typography on your website is essential. Not only from an aesthetic point of view (if it looks good and suits the genre of the site) but also from a functional and usable point of view (is it easy to read for users and clear enough). Aesthetics and usability need to work together to form the perfect fit for the brand and the target audience.
+
+## Headings
+
+For headings, one can choose expressive, unique fonts to add personality to the website. These fonts should stand out to the user and be prominent on the page. There should be a distinction between the headings and the body text. Often, decorative fonts are used for headings, as they can be fun and artistic.
+
+But before you go crazy with the decorative fonts, make sure they are:
+
+- Easy to read.
+
+- In-line with the corporate identity of the client.
+
+- Relevant to the target audience the client wants to reach.
+
+Keep in mind that most online users scan through information. If a headline consists of a font that is too intricate and hard to read, the user may be confused and, in the end, waste time trying to figure out what the headline is communicating. It’s never a good idea to let the user think too long about information.
+
+![Font pairings](../images/design-1/Fonts/Fontpairingsusabilityandthestyletile-1.png\) _Figure 1. An example of a decorative font._
+
+Serif fonts are usually used for headings as they have small lines on the letters giving the font character. They stand out more and are a good choice for headings. But again, it’s crucial to consider the brand. Would a serif font appeal to a company selling dirt bikes or would it be better suited to a bookstore? The bookstore would most likely be the best fit.
+
+![Serif fonts](../images/design-1/Fonts/Fontpairingsusabilityandthestyletile-2.png\) _Figure 2. The serif font fits the genre of the brand better._
+
+## Body text
+
+The content text for your website should be clean and legible with proper spacing between letters and lines. Sans serif fonts are the right choice as they are quite readable and simple fonts.
+
+Cursive and handwriting fonts can be harder to read in more significant blocks of text. Reserve these fonts for specific areas or use them for only a select few words, such as for quotations.
+
+![Cursive and script fonts](../images/design-1/Fonts/Fontpairingsusabilityandthestyletile-3.png\) _Figure 3. Cursive and handwriting fonts are harder to read._
+
+## Font pairings
+
+Choose fonts that:
+
+- complement each other.
+
+- appeal to your target audience.
+
+- match the genre of the website.
+
+Often sans serif fonts are used for the content text of the page, and serif fonts used for the headings. Contrast is useful, for example, if you are using a decorative font for headings, it would be good to use a simple sans serif font for the body text.
+
+You can pair a subtle, simple typeface for the body text with a bold font for the headings. [See more here](https://fontjoy.com/)
+
+Using too many fonts on the website may confuse users and clutter the design. Using only two to three fonts is optimal, with a primary font for the headings, a secondary font for the main body text, and an accent font used in specific places on the web page, such as for calls to action and quotes.
+
+## Keep the hierarchy in mind
+
+Hierarchy in typography is arranging the text in order of importance. The word hierarchy is fundamental in the world of design. It’s important because it helps to convey a sequence for the user visually. The user needs to know by looking at the design which text is more important and therefore, which text needs to be read first.
+
+![Type hierarchy](../images/design-1/Fonts/Fontpairingsusabilityandthestyletile-4.jpeg\) _Figure 4. Hierarchy with typography._
+
+Hierarchy can be achieved by enriching your typography in a few different ways:
+
+### Amount of typefaces
+
+Too many typefaces used on a webpage can be confusing and have a cluttered effect. Keep to two or three fonts and have the roles consistent, e.g. the same font used throughout for headings helps the user read through the design quickly.
+
+### Font sizes
+
+Contrast occurs when differentiating between the two typefaces for headings and body.
+
+It can be achieved with:
+
+- The type of typefaces, e.g. serif vs sans serif.
+
+- With colour, e.g. having the heading a different brighter colour, telling our eyes which is primary, and which is secondary. Warm colours advance and cool colours recede.
+
+- With styles and weights, e.g. using different styling for different types of text with regards to bold, italics, letter case, and other style attributes.
+
+In the above example, we have a different creative font used for the headings, compared to a simple serif font used for the body text. The headings are more significant than the content text, in font size and weight. The thicker and bolder letters help emphasise the headings on the page and there is colour added in the heading. This allows the first couple of words to stand out.
+
+![Good contrast example](../images/design-1/Fonts/Fontpairingsusabilityandthestyletile-5.png\) _Figure 5. A good example of contrast._
+
+### Space
+
+An easy design mistake to make is a lack of space or using incorrect spacing. Proximity is important but good spacing is key for clarity to achieve hierarchy in typography.
+
+Creating space helps the user understand the layout better. Having the page too busy with too much text can make the user feel overwhelmed and they may not want to spend any more time on the page. Having paragraph spacing between the main heading and the content text will give much-needed breathing space and make the overall design more user friendly.
+
+## Usability
+
+Usability is often spoken about in website design, including layout, colours, and functionality of the pages. The text on your website page and the way you show text also needs to be considered. Here we go through a few points of what not to do with website text:
+
+### Avoid small text
+
+If a website text is not legible, the user won't be able to use your website. Make sure the text is easy to read for everyone.
+
+Remember that not all typefaces/font choices are the same with regards to their sizing, for example 16px Verdana may be smaller than 16px of a different font. Responsive testing of the website is needed to check if your text is readable on smaller screens.
+
+![Different sizes of text](../images/design-1/Fonts/Fontpairingsusabilityandthestyletile-6.png\) _Figure 6. The difference between bigger text and text that is too small._
+
+### Justifying text
+
+Justifying text may work in print design, but it is something to avoid in website design. Justifying text spreads out the words so they fill the whole content block, but this creates big uneven spaces between the words. The text becomes difficult to read for users and is considered bad typography.
+
+### Centre-alignment of text
+
+Text that is centre aligned is generally harder to read because the eye works harder to find where the line begins to continue reading. Centre alignment can be used on a headline but should be avoided on long blocks to text.
+
+![Centre-aligned text](../images/design-1/Fonts/Fontpairingsusabilityandthestyletile-7.jpeg\) _Figure 7. Centre-aligned text vs. Left aligned text._
+
+### Text on image
+
+Text on images can be hard to read for the online user. If needed for text on images use a colour overlay to create a better contrast between text and image.
+
+### Using the wrong contrast in fonts
+
+Avoid using low contrast, i.e. dark text on a dark background or light text on a light background. Reverse type should be used sparingly. Studies show that it's much better to use black text on white, compared to white text on black. Sometimes reverse type can bring in a dramatic feel to the page, but it should be used sparingly and specifically for areas with minimal or bigger text.
+
+![Dark text on dark background](../images/design-1/Fonts/Fontpairingsusabilityandthestyletile-8.png\) _Figure 8. Dark text on a dark background colour is hard to read._
+
+### Long line length
+
+Make sure you have a good amount of characters on each line, as this is important for usability. When the text line is too long, readers have difficulty focusing on the text itself. Studies show that the optimal line length should be 50 - 60 characters for a good user experience on a normal laptop or PC screen.
+
+For smaller screen sizes, i.e. mobile, this number would obviously be less. Too narrow can also make the website text uncomfortable to read.
+
+### Avoid all caps
+
+Having all your letters capitalised makes it harder for your user to read the text. It actually slows down the time it takes to read the content. Also, it gives the impression of shouting which is not a friendly user experience. If you need to use capital letters in some words, make sure not to write the text in caps but make use of the CSS text-transform property to change the style easily later.
+
+![Lowercase usage](../images/design-1/Fonts/Fontpairingsusabilityandthestyletile-9.png\) _Figure 9. Using lowercase in paragraph text is a lot easier to read_
+
+## Finding fonts for your design
+
+### Google fonts
+
+Google fonts host the fonts on their servers. The service is free, has no issues with licensing, and you don't need an account to use their website.
+
+They have a wide range of custom fonts to choose from and are categorised for easy searching. Google fonts also give you the code you need to use, making the process very simple and easy.
+
+The fonts can also be downloaded to use in graphics programs and for print.
+
+Google fonts offer good support for browsers:
+
+- Google Chrome: version 4.249.4+
+
+- Mozilla Firefox: version: 3.5+
+
+- Apple Safari: version 3.1+
+
+- Opera: version 10.5+
+
+- Microsoft Internet Explorer: version 6+.
+
+There are some disadvantages to using Google fonts:
+
+- They may slow down the rendering speed of your pages
+
+- Many websites use Google fonts, so you will see your font choice in other websites
+
+- The fonts are widely used, so best to avoid using the fonts in actual brand typography, for example in logos.
+
+- As the fonts are hosted elsewhere, if the service goes down there is nothing much you can do.
+
+### Using Google fonts for your website
+
+Go to the Google fonts website and search for a font. Make use of the categories section to refine your search - as you can select categories like serif, sans serif, handwriting and others.
+
+![Google fonts](../images/design-1/Fonts/Fontpairingsusabilityandthestyletile-10.png\) _Figure 10. Google fonts (Google Fonts, 2020)_
+
+Choose your font and click on the + icon. A great way to preview your font and test out the fonts is to highlight the text and write your own text in its place.
+
+![Applying a text sample](../images/design-1/Fonts/Fontpairingsusabilityandthestyletile-11.png\) _Figure 11. Applying a sample of text to all fonts (Google Fonts, 2020)_
+
+The embed tab shows the code to use. Copy and paste this code into your HTML and CSS files. There is link code for your font, which you can use in the /head/ tag of your html page. There is a standard option or import option.
+
+![Embed tab](../images/design-1/Fonts/Fontpairingsusabilityandthestyletile-12.png\) _Figure 12. The embed tab showing the code (Google Fonts, 2020)._
+
+There is also CSS code for you to use in your CSS stylesheet. This CSS may then be applied as classes to various aspects of a pages, such to specific paragraphs, heading or all body text.
+
+### @font-face
+
+@font-face is another way to use a font which the website user does not have installed. To use @font-face you must host the font on your server.
+
+You should first find a font you want to use, download it, and then upload the font file to your webserver.
+
+Browser support needs to be taken into consideration. Therefore, it is recommended to find and use fonts that are TTF, OTF, and WOFF as they are better supported on modern browsers.
+
+### Variable fonts
+
+Variable fonts give designers the option of a range of font variants in a single font file. =Web fonts at the moment store each variation of a font in a separate file, for example: Roboto-Bold.ttf, Roboto-light.ttf, and there is not much variety.
+
+Variable fonts offer this as a single file and gives more flexibility with weight, slant, grade, width, and other axis.
+
+With CSS3, one can use the font-stretch property with different values which - until variable fonts came along - one could only use the values specified when providing different font files for each width.
+
+![Decovar variations](../images/design-1/Fonts/Fontpairingsusabilityandthestyletile-13.png\) _Figure 13. The decovar font in different variations._
+
+> INFO: If these concepts seem unfamiliar at the moment, don’t feel discouraged, it will be discussed later in more detail in the HTML and CSS course.
+
+---
+
+## Activities
+
+### Activity 1
+
+> 📚 **READ**
+>
+> Article: [Introduction to variable fonts on the web](https://web.dev/variable-fonts/)
+
+### Activity 2
+
+> 📚 **READ**
+>
+> From David Kadavy’s book _Design for Hackers_, section: 'Enriching your typography' (pages 262-264) (45m)
+
+### Bibliography
+
+Babich, N., 2017. _Building Better UI Designs With Layout Grids._ [Online] Available at: <https://www.smashingmagazine.com/2017/12/building-better-ui-designs-layout-grids/> [Accessed 23 June 2020].
diff --git a/packages/lms/src/routes/content/feu1/design/module-2/fundamentals-color/+page.md b/packages/lms/src/routes/content/feu1/design/module-2/fundamentals-color/+page.md
new file mode 100644
index 0000000..d7a0a75
--- /dev/null
+++ b/packages/lms/src/routes/content/feu1/design/module-2/fundamentals-color/+page.md
@@ -0,0 +1,398 @@
+---
+title: Fundamentals of color
+tags:
+  - Design
+type: Lesson
+---
+
+## Introduction
+
+Every second we see thousands of colours. Colours are everywhere and even though, according to experts, we can distinguish close to 10 million different colours, we can only name a small part of all colours we can see. In this lesson, we will look at the fundamentals of colour. We will look at how the colour wheel works and how the user experiences colour.
+
+> **NOTE:** This lesson contains 4 activities that you should complete.
+
+## Colour in design
+
+Colour is one of the most difficult subjects in design. The difficulty is that colour is highly subjective – the combinations, harmonies, or discordance (clashes) that develop are subject to the viewers’ personal experiences and preferences. Colour tastes and meanings also vary across cultures and countries. Therefore, one single formula for effective colour-use does not exist – each new project that a designer encounters deals with decisions on colour for that project, task, and target audience.
+
+Although the choice of colours is perhaps subjective and based on our personal experiences, it is important to understand the basic principles of colour theory and how colour works.
+
+For our purposes, we will focus on colour theory as an aid to create aesthetic designs and to express a message visually. As designers, we study colour for two main reasons: To communicate the chosen colours to other designers using the colour system and to gain knowledge in how to apply colour.
+
+Communicating about colour becomes important in design, as the mere words “blue”, “green”, “red” and others are not sufficient. When speaking of “blue”, do we mean blue as the ocean or blue as the sky? It becomes even more explicit when dealing with printed material and front-end development.
+
+Every corporate identity has its own colour combination, and this must be applied uniformly across all elements, consistently. To achieve this, we need to be able to code and standardize colours. Pantone is an example of such a colour-code; printers and designers use it to determine which exact colour to use. Pantone also provides a standard to measure colours from. In web development, colours may be specified as an RGB (sRGB) triplet or in hexadecimal (HEX) code. Later in these lessons, we will learn and explore more about how the hexadecimal colour model works.
+
+![Youtube colours](../images/design-1/Colours/Fundamentalsofcolour-1.png\) _Figure 1. YouTube colours (youtube.com, 2020)_
+
+### The basic principles of colour theory
+
+Colour is the perceptual characteristic of light described by a colour name. Specifically, colour is light, and light is composed of many colours - those we see are the colours of the visual spectrum: red, orange, yellow, green, blue, and violet. Objects absorb certain wavelengths and reflect others back to the viewer. We perceive these wavelengths as colour.
+
+In the visual arts, colour theory forms a practical guide to colour mixing. In addition to this, it focuses on the impacts of specific colour combinations. There are also definitions (or categories) of colours based on the colour wheel: Primary colours, Secondary colours and Tertiary colours.
+
+### Describing colour
+
+Unfortunately, many different colour-coding systems use different terminology when describing colour, and others go into more detail; defining individual characteristics. For our purposes, we will stick to the very basics and work from there. Thus, you may encounter different terms in other references, but they all aim to differentiate the same fundamental thing.
+
+A colour is described in three ways:
+
+- By its name (hue)
+
+- How pure or unsaturated it is (saturation)
+
+- Its value or brightness (intensity)
+
+![Color values](../images/design-1/Colours/Fundamentalsofcolour-2.png\) _Figure 2. An example of hue, saturation and brightness._
+
+Although pink, crimson, and brick are all variations of the colour red, each hue is distinct and differentiated by its hue, saturation and brightness.
+
+### Hue, saturation, and brightness
+
+Hue, saturation, and brightness (HSB, sometimes called HSV) are aspects of colour in the red (R), green (G), and blue (B) scheme. All possible colours can be specified according to hue, saturation, and brightness, just as colours can be represented in terms of the R, G, and B components.
+
+![HSB colour](../images/design-1/Colours/Fundamentalsofcolour-3.jpeg\) _Figure 3. The HSB colour cylinder (Wikimedia, 2015)_
+
+#### Hue
+
+The pure colours are called hues, but there are, of course, many more colours visible to the human eye. We do not have a name for every exact colour in our daily language - it would be impossible to give exact names to a million different colours. Therefore, we speak of pure hues, and then mixes of these (which can be hues in their own right) and then we break it down deeper into further hues.
+
+For example, blue is a pure hue (we give it the name “blue”). Now we add a little bit of white and red to it and it is still seen as blue, but not exactly the same – it is a colour in its own right. We call it lilac-blue. Now we add a little more red to it and, since this exact colour doesn’t have a distinct name, we refer to it as a hue of blue; or a hue of the hue blue, if you like.
+
+#### Saturation (a.k.a. chroma)
+
+The degree of purity of a hue. Saturation is defined as the "colourfulness of an area judged in proportion to its brightness". It controls the intensity of a colour, from vivid at 100% to grey or white at 0%.
+
+#### Value (a.k.a. brightness, lightness/ luminance)
+
+A measure of the amount of light reflected from a hue. Hues with a high content of white have a higher luminance or value. Goes from bright colour or white at 100% to black at 0%.
+
+![Color models](../images/design-1/Colours/Fundamentalsofcolour-4.jpeg\) _Figure 4. The CMYK, RGB and HSB Lab colour models in Illustrator CC 2020. They appear in the same way in Photoshop and other graphic programs._
+
+### Colour systems
+
+Available colour systems are dependent on the medium with which a designer is working. When painting, an artist has a variety of paints to choose from.
+
+- Mixed colours are achieved through the subtractive colour method.
+
+- When a designer or front-end developer generates digital products and solutions on the computer, colours are achieved through the additive (RGB) colour method.
+
+- When we mix colours for the printing process, we use the subtractive (CMYK) colour system.
+
+_**Subtractive colour and the CMYK system**_
+
+When we mix colours using paint, or through the printing process, we are using the subtractive colour method. Subtractive colour mixing means that one begins with white and ends with black. As colour is added, the result grows darker and tends toward black. It also means that colour is created by the effect of light reflecting from a surface. In design, we often speak of the CMYK system:
+
+C = Cyan (a distinct blue)
+
+M = Magenta (a distinct hue of red)
+
+Y = Yellow
+
+K = Black / key
+
+![CMYK method](../images/design-1/Colours/Fundamentalsofcolour-5.png\) _Figure 5. Subtractive (CMYK) colour method._
+
+Theoretically, we should get black when we mix all these colours. However, in reality we get a murky dark colour. Black is mixed as a colour of its own – separate from the others. The K stands for “key”, as this is the key, or main plate, others align to in printing.
+
+_**Additive colour and the RGB system**_
+
+When we work on a computer, the colours we see on the screen are created with light using the additive colour method. Additive colour mixing begins with black and ends with white – as more colour is added, the result gets lighter, and tends toward white. It also means that colour is created by the effect of light moving directly into the eye.
+
+The R = Red, G = Green and B = Blue colours are light primaries and colours are created with light.
+
+![RGB colours](../images/design-1/Colours/Fundamentalsofcolour-6.png\) _Figure 6. Addictive (RGB) colour method._
+
+_**Working with the colour systems**_
+
+There is a difference between additive colour and subtractive colour:
+
+- The colour produced in the additive system appears brighter.
+
+- The visible range in the additive system is wider – thus, more colours can be created in the additive than in the subtractive system.
+
+The visible spectrum consists of billions of colours. A monitor can display millions of colours, but a high-quality printer is only capable of producing thousands. Older computer systems may be limited to 216 cross-platform colours.
+
+_**Colour gamut - RGB colours to CMYK colours**_
+
+Colour gamut is the entire range of colours and tones achievable by an imaging system.
+
+Reproducing colour can be problematic in terms of printed and digital media; what we see on a monitor cannot be printed. Although a monitor may be able to display “true colour” (16,000,000 colours), millions of these colours are outside of the spectrum available to printers. Since digital designs are generated using the RGB colour system, colours used in those designs must be part of the CMYK spectrum or they will not be reproduced with proper colour rendering. Working within the CMYK colour system, or choosing colours from Pantone© palettes, ensures proper colour rendering.
+
+![Colour gamut](../images/design-1/Colours/Fundamentalsofcolour-7.jpeg\) _Figure 7. Colour gamut (myworldofcolour.wordpress.com, 2010)_
+
+## The colour wheel
+
+A colour wheel (also referred to as a colour circle) is a visual representation of colours, arranged according to their colour relationship. Begin a colour wheel by positioning primary hues (the main colours from which others are created – red, yellow and blue) at equal distances from one another, and then create a bridge between primaries using secondary and tertiary colours.
+
+![Colour wheel](../images/design-1/Colours/Fundamentalsofcolour-8.png\) _Figure 8. The colour wheel._
+
+### Primary Colours
+
+As the name suggests, primary colours are the main colours at the top. These can be seen as the parents of all the other colour combinations. They are the foundation of every other colour and can create millions of colours by mixing the three primary pigments which are yellow, red, and blue.
+
+![Primary colours](../images/design-1/Colours/Fundamentalsofcolour-9.png\) _Figure 9. Primary colours._
+
+### Secondary Colour
+
+They can be seen as the children of the primary colours and consist of green, orange and purple. In colour theory when we mix yellow and red it becomes orange. Red and blue becomes purple and blue and yellow becomes green. The end result of mixing the primary colours are then called secondary colours.
+
+![Secondary colours](../images/design-1/Colours/Fundamentalsofcolour-10.png\) _Figure 10. Secondary colours._
+
+### Tertiary Colours
+
+Tertiary colours are the colours in between the primary and secondary colours and can be seen as the grandchildren of the three primary colours. They consist of yellow/orange, red/orange, red/purple, blue/purple, blue/green and yellow/green.
+
+![Tertiary colours](../images/design-1/Colours/Fundamentalsofcolour-11.png\) _Figure 11. Tertiary colours._
+
+### Complementary Colour
+
+These are located opposite one another on a colour wheel. To call those hues that are directly opposite one another “complements of each other” is correct. Complementary colours bring out the best in each other.
+
+![Complementary colours](../images/design-1/Colours/Fundamentalsofcolour-12.png\) _Figure 12. Complementary colours._
+
+When fully saturated complements are brought together, interesting effects are noticeable. This may be a desirable illusion, or a problem if you are creating visuals that needs to be read.
+
+![Saturated colours](../images/design-1/Colours/Fundamentalsofcolour-13.png\) _Figure 13. A problem occurs when reading the red text on the green background._
+
+### Analogous colours
+
+Analogous colours are colours located close together on a colour wheel.
+
+![Analogous colours](../images/design-1/Colours/Fundamentalsofcolour-14.png\) _Figure 14. Analogous colours._
+
+### Colour Ranges
+
+A colour wheel can be divided into ranges that are visually active or passive. Active colours will seem to advance (pop) when placed against passive hues. Passive colours seem to recede (fade) when positioned against active hues. This becomes important when dealing with the interaction of colours.
+
+![Passive colours](../images/design-1/Colours/Fundamentalsofcolour-15.png\) _Figure 15. Passive and active colours._
+
+- Advancing hues are often thought to have less visual weight than receding hues.
+
+- Warm, saturated, light value hues are "active" and seem to visually advance.
+
+- Cool, low saturated, dark value hues are "passive" and seem to visually recede.
+
+- Tints or hues with a low saturation appear lighter than shades or highly saturated colours.
+
+- Some colours remain visually neutral or indifferent.
+
+### Colour Combination
+
+Colour combinations may pass unnoticed when they are pleasing to the eye – yet they offend dramatically when the compositions clash. One outcome we seek in the final form or composition of a design is a successful use of colour.
+
+We determine whether or not our colour usage is successful by critically assessing the visual balance and harmony of the final composition. Balance and harmony are achieved by the visual contrast that exists between colour combinations. When planning a successful colour combination, we need to first investigate and understand colour relationships.
+
+Using a colour wheel and a template, the relationships between colours are easy to identify:
+
+![Complementary colours](../images/design-1/Colours/Fundamentalsofcolour-15.png\) _Figure 16. Complementary colours._
+
+## Colour and contrast
+
+Every visual presentation involves figure-ground relationships. This relationship between a subject (or figure) and its surrounding field (ground) will display a level of contrast; the more an object contrasts with its surroundings, the more visible it becomes.
+
+When creating designs that are intended to be read, it is important to offer the viewer enough contrast between the background (paper or screen) and the text. Text presentations ideally offer at least an 80% contrast between figure and ground. (Black text on a white background is ideal.) If there is not enough contrast between figure and ground, the viewer will squint to view the text – causing their eyes to get tired.
+
+Yellow text on a white background or blue text on a black background is difficult to read due to the low level of contrast between figure and ground.
+
+![Low contrast](../images/design-1/Colours/Fundamentalsofcolour-17.jpeg\) _Figure 17. Difficult to read text due to the low level of contrast between figure and ground._
+
+An occurrence known as “simultaneous contrast” (or chromo stereopsis) may happen when opposing colours are placed in close proximity to each other. Text may appear to vibrate or may seem to cast a shadow. Eye strain and fatigue will result if a viewer focuses on a document displaying similar properties for a long period of time.
+
+Some colour combinations, such as red text on a blue background, cause illusions when positioned together.
+
+![Red text](../images/design-1/Colours/Fundamentalsofcolour-18.jpeg\) _Figure 18. Red text on a blue background._
+
+## Colours, associations and emotions
+
+It is good to have some knowledge in understanding the different emotional attributes the main colour groups can bring to a design. The main colours are: Red, Orange, Yellow, Green, Blue, Purple, White and Black.
+
+![Colour guide](../images/design-1/Colours/Fundamentalsofcolour-19.jpeg\) _Figure 19. Color psychology guide (Decary, 2019)_
+
+### Red
+
+Red is a rich, exciting, dramatic colour. It also has the feeling of affection and passion, as it is, for example, often used for Valentine’s Day.
+
+Red is also often used in food, wine and beverage websites due to its indulgent feeling.
+
+Red is a warm, brighter colour and can make a user more alert since it attracts attention and creates energy.
+
+![Example of red](../images/design-1/Colours/Fundamentalsofcolour-20.jpeg\) _Figure 20. An example of red used on a lifestyle blog (Markiewicz, 2018)_
+
+### Orange
+
+Orange has a feeling of energy, enthusiasm, creativity.
+
+Orange is a stand-out colour in real life, often used for high visibility objects such as life jackets and road cones.
+
+Orange is also a warm and versatile colour. It can be energizing, but a lighter orange can be unobtrusive.
+
+Orange can stimulate metabolism and appetite as well.
+
+![Orange in use](../images/design-1/Colours/Fundamentalsofcolour-21.jpeg\) _Figure 21. A good example of orange being used on (fixate.it, 2022)_
+
+### Yellow
+
+Yellow is associated with happiness.
+
+Yellow is a visible colour used to highlight. For example, it is used for taxi cabs and caution signs.
+
+Yellow is also an energetic colour without the extreme of red.
+
+However, too much yellow can be overpowering.
+
+![Yellow in use](../images/design-1/Colours/Fundamentalsofcolour-22.jpeg\) _Figure 22. A good example of yellow being used on website (pittoridicinema, 2020)_
+
+### Green
+
+- Green has a feeling of growth and freshness.
+
+- It is a colour often used with nature and environmental websites.
+
+- Green is in between a warm and cool colour, although leaning more towards the cools.
+
+- Green is easier on the eyes, compared to red and yellow, creating a relaxing, soothing feel.
+
+- Green can also represent stability.
+
+![Green in use](../images/design-1/Colours/Fundamentalsofcolour-23.jpeg\) _Figure 23. Green on a website creating a feeling of growth and freshness (fiverr.com, 2020)_
+
+### Blue
+
+- Blue is associated with calmness and has a relaxing and safe feel.
+
+- Two popular social media sites use this colour - Twitter and Facebook.
+
+- Blue is not often found in foods - it reduces appetite.
+
+- Blue also promotes Intelligence, reliability, and stability.
+
+- Blue is found in the sea and the sky and gives a sense of ease, so it is a colour often found in airline and cruise websites.
+
+![Blue in use](../images/design-1/Colours/Fundamentalsofcolour-24.jpeg\) _Figure 24. Blue promotes reliability and stability (evolvewealth.co.uk, 2019)_
+
+### Purple
+
+- Purple is associated with luxury and power.
+
+- This colour is also linked with mystery and magic.
+
+- Purple is historically linked to royalty, for example as used in coat of arms in stamps.
+
+- Purple is not often used in websites. But if used correctly, it can create a lavish and indulgent feel.
+
+![Purple in use](../images/design-1/Colours/Fundamentalsofcolour-25.jpeg\) _Figure 25. Purple to create a lavish and indulgent feel (cadbury.co.za, 2020)_
+
+### White
+
+- White has an association of light, cleanliness, and simplicity.
+
+- White is mostly linked to innocence and purity in the western cultures; for example, white used for wedding dresses. In the Eastern culture, the colour is associated with mourning.
+
+- White is often used as a background in minimalistic websites. It is great to use when you want to draw attention to other elements/colours on the page. For example, in art websites when you want the user to focus on artwork.
+
+![White in use](../images/design-1/Colours/Fundamentalsofcolour-26.png\) _Figure 26. White is often used in minimalistic websites (Wieland, 2020)_
+
+### Black
+
+- Black can be associated with elegance and power.
+
+- Black is the strongest of the neutral colours and is used in many websites, often as the text colour, although it can be used as the main strong colour of the site.
+
+- Black is also linked to evil and edginess.
+
+- It is also often used to give a feeling of sophistication.
+
+![Black in use](../images/design-1/Colours/Fundamentalsofcolour-27.png\) _Figure 27. Black is often associated with elegance and a feeling of sophistication (eattheordinary.com, 2020)_
+
+---
+
+## Activities
+
+### Activity 1
+
+> 📚 **READ**
+>
+> To understand more on reproducing and managing colour across different media. It is a common and frustrating issue, so ensure that you understand the differences between CMYK, RGB, and sRGB.
+>
+> From David Kadavy’s book _Design for Hackers_: Section: 'Colour Models in Action: Why Your Business Card Doesn't (and Never Will) Match Your Website' (pages 225-233) (1h)
+
+### Activity 2
+
+> 📚 **READ**
+>
+> When designing for web, there are already some established standards and patterns for the choice of colour. It´s good to know them.
+>
+> From David Kadavy’s book _Design for Hackers_: Section: 'Colour Choices and Web Conventions' (pages 249-255) (1h)
+
+### Activity 3
+
+> 🎥 **WATCH**
+>
+> Adobe Colour is an excellent online tool to create colour palettes. Watch the following video from LinkedIn Learningas a short introduction to Adobe Color. Remember to be logged in to your Noroff account. Video Course: [Adobe Color Essential Training](https://www.linkedin.com/learning/adobe-color-essential-training/a-colorful-journey?u=43268076) (2h 35s) by Bart Van de Wiele.
+>
+> This video shows you how to set colour styles in Figma. Video: [Creating colour styles](https://www.youtube.com/watch?v=gtQ_A3imzsg&t=127s)
+>
+> Another alternative to use for Figma is [Coolors](https://coolors.co/271f30-6c5a49-c8ad55-d0fcb3-9bc59d)
+
+### Activity 4
+
+> 📚 **READ**
+>
+> Article: [A Quick Look at Types of Grids for Creating Professional Designs](https://pixel77.com/color-psychology-web-design-color-schemes-big-websites/) by Adriana Marinica.
+
+---
+
+## Lesson Task
+
+### Goal
+
+Create a colour palette from a photograph of your choice by using Adobe Colour.
+
+### Brief
+
+Choosing the right colours for your website is not always easy. Humans can see approximately 10 million colours which it does not make it easier to choose the right ones in the right combinations. Fortunately, there are some easy techniques that can help in the colour picking process. Using photography can be a good starting point to find inspiration to create a more interesting colour palette. It can be a handy solution when you are out of ideas for new colour palettes and colour combinations.
+
+Your task is to create one colour palette with Adobe Color CC or Coolors from any photograph of your choice.
+
+> **NOTE:** It's important to watch the video specified in 'Activity 3' before attempting this task.
+
+### Level 1 Process
+
+- Choose one colour photograph of your choice. Make sure the image is of high quality.
+
+- Upload the image in Adobe Color CC (color.adobe.com).
+
+- Create a new colour palette with Adobe Color CC. Try to manipulate the colours so that you are able to create a more interesting result.
+
+- Save your colour palette in a new library.
+
+## Bibliography
+
+Munsell, A. H. (2007). Munsell-system. Retrieved July 2020, from Wikimedia Commons: <https://commons.wikimedia.org/wiki/File:Munsell-system.svg#/media/File:Munsell-system.svg>
+
+Wikimedia, c. (2015). HSV color solid cylinder. Retrieved July 2020, from Wikimedia Commons: <https://commons.wikimedia.org/wiki/File:HSV_color_solid_cylinder.png>
+
+myworldofcolour.wordpress.com. (2010). The Characteristics of Colour. Retrieved July 2020, from My World of Colour: <https://myworldofcolour.wordpress.com/tag/color-gamut/>
+
+Decary, C. (2019). How to choose your brand colours. Retrieved July 2020, from parallelbranding.com: <http://parallelbranding.com/brand-colors/>
+
+Distributors, N. H. (2017). New Hampshire's Choice for Quality Beverages. Retrieved July 2020, from New Hampshire Distributors: <https://nhdist.com/>
+
+Markiewicz, S. (2018). Strawberry Blog. Retrieved July 2020, from Szkólka Markiewicz: <https://www.truskawka.pl/>
+
+wix.com. (2020). The Leader in Website Creation. Retrieved July 2020, from wix.com
+
+pittoridicinema. (2020). Pittoridi Cinema. Retrieved July 2020, from pittoridicinema: <https://www.pittoridicinema.it/>
+
+fiverr.com. (2020). Find the perfect freelance services for your business. Retrieved July 2020, from fiverr.com: <https://www.fiverr.com/>
+
+evolvewealth.co.uk. (2019). Smart ideas for your money. Retrieved July 2020, from Evolve Wealth: <https://evolvewealth.co.uk/>
+
+cadbury.co.za. (2020). Glass and a Half Project. Retrieved July 2020, from Cadbury: <https://www.cadbury.co.za/>
+
+Wieland, B. (2020). Portfolio 2020 Björn Wieland. Retrieved July 2020, from Björn Wieland: <https://bjoernwieland.com/>
+
+youtube.com. (2020). Brand Resources. Retrieved July 2020, from YouTube: <https://www.youtube.com/intl/en-GB/about/brand-resources/#logos-icons-colors>
+
+eattheordinary.com. (2020). The Ordinary. Retrieved July 2020, from Eat the ordinary: <https://eattheordinary.com/>
diff --git a/packages/lms/src/routes/content/feu1/design/module-2/typography-basics/+page.md b/packages/lms/src/routes/content/feu1/design/module-2/typography-basics/+page.md
new file mode 100644
index 0000000..a8e11ac
--- /dev/null
+++ b/packages/lms/src/routes/content/feu1/design/module-2/typography-basics/+page.md
@@ -0,0 +1,359 @@
+---
+title: Typography basics
+tags:
+  - Design
+type: Lesson
+---
+
+## Introduction
+
+Typography is the process of arranging letters, words, and text for almost any context you can imagine. It’s simple. If you get it right your target audience will understand your message instantly. If you get wrong, they will be left confused and unimpressed. In this lesson, we look at the basics of typography, what the difference between a font and typeface is, and the small details that will create a lasting impression with your target audience.
+
+> **NOTE:** This lesson contains 4 activities that you should complete.
+
+## What does typography mean?
+
+Typography is the art and technique of arranging type to make language visible.
+
+The arrangement of type involves the selection of typefaces, point size, line length, leading (line spacing), adjusting the spaces between groups of letters (tracking), and adjusting the space between pairs of letters (kerning).
+
+![Explaining typograhy](../images/design-1/Typography/Typographybasics-1.jpeg\) _Figure 1. A good explanation on typography by Herman Zapf (Morgan Cole, 2019)_
+
+Typesetters, compositors, typographers, graphic designers, art directors, comic book artists, graffiti artists, clerical workers, and anyone else who arranges type for a product perform typography. Until the digital age, typography was a specialized occupation. The use of computers has opened typography to new generations of visual designers and lay users. It has been said that "typography is now something everybody does".
+
+## Typography and semantics
+
+The word "semantics" refers to the meaning behind a word. In other words, the concept or idea it is expressing. Apart from the arrangement of letters to express the idea, designers often enhance that by changing the shape or colour or placement of the word (all the letters together) to further emphasise the idea.
+
+### Understanding type
+
+Many people define typography as the art or practice of arranging letters and words. This description is perhaps too broad and simplistic for us to make any real sense of what typography is about. What kinds of letters and words are we talking about? And how are they created?
+
+Let’s look at it in more detail:
+
+- Typography is about how letters and words are arranged,
+
+- How these letters and words are composed in relation to each other, and
+
+- How they are placed within an artwork.
+
+Typography comes into play when we:
+
+- Choose fonts
+
+- Decide on the spacing of letters, words, and lines
+
+- Choose the size of letters and the length of lines
+
+- Ensure that the copy is easy to read on different media and screen sizes.
+
+### Seeing typography
+
+In our daily lives, we are surrounded by so much typographic matter and designs that we don’t even notice it anymore. Go and grab a magazine, chocolate wrapper, or your mobile phone. Look at all the different types of these different elements. Can you see that a lot of time, energy, and detail went into each design? Did you ever think about the fact that a chocolate wrapper not only has to showcase the branding of the product, but it also must communicate nutritional value? It’s not news to us that the text in the books, magazines, or websites we read and use on a daily basis is easy to follow. It is easy to follow not just because of its informative and entertaining content, but also because it was designed typographically, allowing us to read with ease.
+
+![Lindt Chocolate](../images/design-1/Typography/Typographybasics-2.jpeg\) _Figure 2. Lindt chocolate wrapper front and back (Ally’s Basket, 2020)_
+
+## Typography in daily life
+
+Imagine removing all the typography from the main local road. How would we find our way around if we couldn’t read the names of streets or shops? If there were no labels on products, how would we know how much of a medication to take? Or for how long the cake should be in the oven? Without typography, life would be inconvenient and confusing.
+
+Although typography can be found in almost every aspect of our lives, identifying what it is can be quite difficult. It’s almost like listening to music. You may know that you are listening to Poker Face by Lady Gaga, but do you know what style of music it is? Which instruments are being played? What timing is the music set to and in which key it is played? Recognising typography is similar in many ways. Awareness of what we are looking at in the case of typography is part of the key to understanding the subject.
+
+![Book about typography](../images/design-1/Typography/Typographybasics-3.jpeg\) _Figure 3. Bad typography is everywhere. Good typography is invisible (Craig Ward, 2016)._
+
+### The nature of typography
+
+Here’s an interesting question: are all kinds of writing and letters seen as typography? The answer is definitely no! To find out why we have to take a look at history. Johannes Gutenberg from Germany invented a moveable metal type during the mid-fifteenth century. Printing from moveable metal types meant that once a text had been printed, the characters could be rearranged to form new texts. This innovation, along with the technology of the mechanical press, allowed for the production of multiple copies of texts in a much easier, faster, and cheaper way than producing handwritten manuscripts (which was the case before Gutenberg’s invention).
+
+The technology of duplicating letters plays an important role in the definition of typography. Although modern technologies have changed dramatically since Gutenberg’s time, the basic nature of typography has changed very little.
+
+## What typography is
+
+After reading the section above, we can add the following to our definition of typography: typography allows for the arrangement of letters and words (along with other visual material) to be reassembled and replicated as few or as many times as needed to communicate a message.
+
+Typography is of course also bound by the medium or technology through which it is distributed. For example, the typography on a poster will be approached differently from the typography of a news website. When words are viewed on small screens, like that of smartphones, people should still be able to read it with ease.
+
+Keep in mind that typography isn’t just a creative art or craft, it is a very technical subject that demands certain standards. To achieve this, typographers tap into practices and methods that were established over hundreds of years.
+
+Typography uses signs (letters) to represent spoken and written language. There are, however, elements of language that typography doesn’t have any signs for (like tone of voice). There are also other “typographic” signs that have no utterance in language. Letters are signs that represent sound, but as signs alone, they have no meaning, just as the individual sounds (phonemes) have no meaning. Only when arranged together do they form words; and words are in turn signs (or labels) used to describe our environment, experiences, and concepts.
+
+![Letters image](../images/design-1/Typography/Typographybasics-4.jpeg\) _Figure 4. Letters alone are meaningless. Words with meaning._
+
+Typography can be looked at on different levels. There is the holistic view. This involves looking at the page, layout, composition, number of columns, and interaction of text and images. And then there is the detailed view: the choice of typeface, sizes, letter-spacing, word-spacing, line length, line-spacing, use of ligatures, small caps, drop caps, and so on.
+
+> TIP When working with typography and layout, always take a step back and look at the "big picture" (holistic view/macro view). [Read here for more](https://www.designsystems.com/typography-guides/)
+
+These two levels are sometimes referred to as “macro” and “micro” typography. One is often neglected in favour of the other. Some designers see the macro view as “creative” typography or graphic design. However, spending time understanding the finer details of typography (the micro view) can only benefit the designer and the design.
+
+Remember, the main purpose of typography is to convey information and to make reading easy, not to hinder it. It is also important for typography to act appropriately. So, when you work with typography, keep the content and the context of the text in mind.
+
+![Example of how fonts change](../images/design-1/Typography/Typographybasics-5.jpeg\) _Figure 5. An example of how the type of font can change the context of the message._
+
+### Making appropriate choices
+
+If asked to design and develop a website for a conference on the future of medical equipment, we wouldn’t expect to see out-dated fonts being used. At the same time, we wouldn’t expect to see something so ultra-modern that it looks like it's from outer space.
+
+Keep the expectations of your target audience in mind, since that will play a role in your use of typography. That doesn’t mean that typography should be boring. Typographically speaking, however, your design shouldn’t turn up to the party in a Malibu Barbie costume when the invitation is for black-tie only!
+
+Beatrice Warde said that good typography should be like drinking wine from a crystal glass. We should be allowed to concentrate on the wine and not be distracted by the container that carries it.
+
+This is also true when we are reading a novel. We want to get into the narrative, get to know the characters and the plot. We’re not necessarily interested or even aware of the type and typography that carries this information.
+
+Of course, there are exceptions to the rule. For example, if we are at a busy train station, we do want to be aware of the typography around us, because we need to figure out how to get from point A to point B, or just buy a ticket. Firstly, we should notice the typography and secondly, it should be easy to read.
+
+![Trilingual sign example](../images/design-1/Typography/Typographybasics-6.jpeg\) _Figure 6. Example of trilingual sign (John van Weelden, 2018)._
+
+Did you know that people read before they read? That may sound odd, but we do this all the time without even noticing it. The layout, composition, use of colour, choice of typefaces, size of type, the width of columns, and other aspects within a design all combine to send out signals that we “read” as a whole before getting down to the job of actually reading the text. If the first “read” doesn’t draw viewers in, they won’t bother to do the second read. That is why both macro and micro typography deserves attention.
+
+Take a quick look at these two websites:
+
+![Hard to read text](../images/design-1/Typography/Typographybasics-7.jpeg\) _Figure 7. An example of a website where information is hard to comprehend._
+
+![Easy to read text](../images/design-1/Typography/Typographybasics-8.png\) _Figure 8. This website is trustful and the information easy to comprehend._
+
+At a glance you can easily make a decision on which of the websites is more trustful and inviting to actually read the article.
+
+## What typography is not
+
+To understand what typography is, it is also important to determine what typography is not. To do this, we need to clearly distinguish typography from other closely related subjects, crafts, and activities.
+
+Students beginning to study typography often have difficulty recognising the difference between lettering and typography, particularly when that lettering is used within a graphic design context. This could be a highly stylised product name on a piece of packaging supported by typographic matter. In fact, it’s not such an easy job for even experienced graphic designers to make such distinctions sometimes!
+
+Let’s take a look at what typography is not:
+
+- Typography isn’t… handwriting
+
+- Typography isn’t… lettering
+
+- Typography isn’t… carving letters into stone or wood by hand
+
+- Typography isn’t… sign-writing
+
+- Typography isn’t… graffiti
+
+- Typography isn’t… building letters out of matchsticks
+
+In short, typography does not involve producing letters uniquely and one-by-one by hand (or tool).
+
+This does not mean that the above ways of creating letters cannot lead to typography. A typographer may be inspired by handwriting, matchsticks, or graffiti and create a typeface that looks similar to that. There are even fonts that allow letters to appear different each time. For example, Johannes Gutenberg’s original Textura type contained alternative versions of letters that helped the type appear closer to the handwriting look that he tried to create.
+
+![Simon Alander blue artwork](../images/design-1/Typography/Typographybasics-9.jpeg\) _Figure 9. Artwork by Simon Ålander (Simon Ålander, 2011)_
+
+Remember when you first started school and learnt about the ABCs and how to write? It’s quite a lengthy and intense process. Learning typography is very similar - it doesn’t happen overnight! Focus on getting the basics right at first; then take your time to experiment with different techniques.
+
+## Typographic basics
+
+We will take a look at some basic and universal terms and concepts that you need to master when working with typography.
+
+### Typeface or font
+
+Designers are often unsure of the difference between the terms “typeface” and “font”, as they are both well-used terms for pretty much the same thing.
+
+The Thesaurus dictionary defines it as follows:
+
+- Font = a set of type of one particular face and size.
+
+- Typeface = a particular design of type.
+
+![Typefaces and fonts](../images/design-1/Typography/Typographybasics-10.png\) _Figure 10. An example of typefaces and fonts._
+
+In other words, a typeface is a family of fonts (such as Arial Regular, Arial Italic, Arial Bold, Arial Black and Arial Narrow). A font is one weight or style within a typeface family (such as Arial Regular).
+
+The FontShop's description of the difference between a typeface and font is excellent. They describe it as: A typeface is what you see – a font is what you use to make it happen.
+
+### Typeface classifications
+
+There are many different classifications of typefaces, but the two most common types you will hear of are serif and sans serif. Serif typefaces are the more traditional ones. They are distinguished by a short line or finishing stroke on the end of character strokes and stems (see the picture below). Sans serif typefaces are distinguished by their lack of any serifs. They only became popular in the nineteenth century and as a result, they are considered modern.
+
+![An example of serif and sans serif fonts](../images/design-1/Typography/Typographybasics-11.png\) _Figure 11. An example of serif and sans serif font._
+
+As you can see, there are a few different classes of typefaces and it's worth learning classifications to get a better overview. Through the years there have been different types of classifications, but here is the classification system that is most popular and used today.
+
+### Anatomy
+
+Below are some of the basic parts of the anatomy of typographic characters.
+
+![Anatomy of typography](../images/design-1/Typography/Typographybasics-12.png\) _Figure 12. Anatomy of typography (Nikita Prokhorov, 2019)._
+
+### Kerning and Tracking
+
+Kerning is the adjustment of the spacing between individual characters. Tracking, however, is the spacing of a group of characters.
+
+These two are often confused. Use this simple way to remember the difference between the two: “tracking” sounds like the lines of railway tracks which consist of individual tracks grouped together into one long track line, whereas “kerning” sounds like the kernel of a seed, which is one (individual) object.
+
+![Kerning and tracking](../images/design-1/Typography/Typographybasics-13.png\) _Figure 13. Kerning and Tracking._
+
+### Alignment
+
+- Generally, text should be left-aligned, simply because we are used to reading from left to right.
+
+- Only centre or right-align text if it is a small number, such as a heading or caption.
+
+- Justifying text (where it has a straight edge on both sides) should be used in moderation too. It looks nice and neat in some situations, but too much of it will make a layout look rigid.
+
+- If you justify text in a small column size, it can cause irregular spacing between words as the software attempts to adjust your text to fit.
+
+![Left-align text visual](../images/design-1/Typography/Typographybasics-14.jpeg\) _Figure 14. Left aligned and justified text._
+
+### Measure
+
+This refers to the length of lines of text in a paragraph or column. Most people tend to just refer to it as column width though. Measure is an important thing to get right in typography because it can be crucial to the readability of the text. If the measure is too wide the text may be difficult to read since the eye has to move a lot more after each line is read.
+
+![Column measure](../images/design-1/Typography/Typographybasics-15.png\) _Figure 15. Column measure._
+
+### Leading
+
+Vertical line spacing is referred to as leading in typography. In the old days of printing and setting blocks of type, strips of lead were inserted between the lines based on how much space was needed. Leading’s role in typography is to ensure that there is enough space between the lines to make it readable. As with all matters of typography, it is a balance between reading comfort and aesthetic style.
+
+![Leading visual](../images/design-1/Typography/Typographybasics-16.jpeg\) _Figure 16. Leading spacing._
+
+### Ligatures
+
+When parts of the anatomy of characters either clash, or appear too closely together, they can be combined in ligatures. These can be for functional or decorative reasons depending on how obvious the clash is. Mostly, this is only an issue with serif fonts, although sometimes sans serifs will need ligatures to be set too.
+
+![Ligatures visual](../images/design-1/Typography/Typographybasics-17.png\) _Figure 17. Ligatures._
+
+### Hyphenation
+
+Neither designers nor copywriters like hyphenation very much, but it is sometimes needed to prevent rag problems (there is a description in the next tab).
+
+If you have to use hyphens:
+
+- avoid having a lot of them in a block of copy
+
+- especially avoid having one follow another
+
+### Rag
+
+Rag refers to the uneven vertical edge of a block of type. Since text is normally left-aligned, rag can usually be seen along the right-hand edge. It is important to pay attention to the rag because it can make it difficult for the viewer to read the text. Usually, it can easily be fixed by reworking the line breaks or by editing the copy.
+
+Look at the examples below. They may look quite similar to an untrained eye, but can you see that the edge of the paragraph on the left-hand side is more uneven than the one on the right? If you struggle to see it, squint a little.
+
+![An example of rag](../images/design-1/Typography/Typographybasics-18.jpeg\) _Figure 18. An example of rag._
+
+### Widows and orphans
+
+- WIDOW - If a single word or short line of copy is left at the end of a column, it is called a widow.
+
+- ORPHAN - If a single word or a short line of copy appears at the top of the following column, it is called an orphan.
+
+Both are considered bad typography because they create distracting shapes in a block of type. They can usually be easily fixed in the same way as the rag: by reworking the line breaks in the column or by editing the copy.
+
+![Orphan and widow example](../images/design-1/Typography/Typographybasics-19.png\) _Figure 19. An example of an orphan and a widow_
+
+## Type families
+
+The term “type family” refers to all the variations of a typeface or font, like different weights, widths, and italics. Type families are useful design tools because they offer designers a set of variations that work together to create harmony and clean designs. To give an artwork a feeling of unity, many designers restrict themselves to using only two type families in a project. This creates a typographic hierarchy.
+
+![A typeface family](../images/design-1/Typography/Typographybasics-20.png\) _Figure 20. An example of a typeface family_
+
+### Typeface variations
+
+Typefaces can have many weight variations. The naming of these variations can be quite confusing and abstract. What is the difference between a semi-bold and a medium? What about extra black, heavy, and ultra-black? The variety of names makes it hard to compare different weights from different families. This is one of the main reasons why Adrian Frutiger developed his special grid system.
+
+### Frutiger’s grid
+
+Adrian Frutiger is known for creating the Univers font family as well as a special numbering system to identify the width and weight of each of the family’s 21 original letters. He designed this numbering system to get rid of the confusion caused by different naming systems such as thin, black, heavy, etc. The diagram he created for the Univers family provides a sense of order between the different weight and width relationships. The grid uses numbers to identify the different cuts. Some of these numbers have been adopted by other typefaces and are still being used today. For example, the main numbers in Helvetica are 55 for Roman, 75 for bold, 35 for thin, and 25 for light. This grid system may seem daunting at first, but it can be quite a useful tool if you figure out how it works.
+
+### Using this system
+
+At first glance, the grid may seem complicated but it’s actually quite easy to understand once you get into the swing of things. Look at the grid below. The italic version of a font, 56, can be used seamlessly with its Roman, 55, for example. Varying character width is easily achieved by moving one row down the grid from 55 to 65, or if a bold is required, down to 75.
+
+### Numbering systems
+
+Frutiger’s numbering system has been applied to various typefaces, including Frutiger’s Serifa, Avenir, Glyphic, Frutiger and Helvetica Neue.
+
+![Frutiger’s grid](../images/design-1/Typography/Typographybasics-21.png\) _Figure 21. Frutiger’s grid (James Brook, 2011)_
+
+### Combining type weights
+
+The grid is especially useful for combining different types of weights. The 65 is different enough from the 45 to stand apart from it, plus moving to italics, 46, can be done seamlessly. The difference between 25 and 95 might be too great for general usage, but it can perhaps be used to create a specific effect. The beauty of the grid is that even when choosing a heavier cut like 95, an italic option is instantly available in 96. Visual harmony is produced by combining weights that are two places apart from each other on the grid, like 65 and 45. Weights that are too similar, for example, 65 and 55, should preferably not be used together.
+
+![How fonts work](../images/design-1/Typography/Typographybasics-22.jpeg\) _Figure 22. A good example of different fonts working together (byrosanna.co.uk, 2017)_
+
+Training your eyes to see what works and what doesn’t, takes time. And as with everything in life, the more you practise the better you’ll get. This is particularly true when it comes to design, especially the art in typography and colour. Hopefully, after these lessons you will see colour more clearly and look at typography in a different way.
+
+---
+
+## Activities
+
+### Activity 1
+
+> 📚 **READ**
+>
+> In his book _Design for Hackers_, David Kadavy gives you a short and exciting introduction into the history of typography from the "beginning" until the birth of "web font". Chapter: 'Medium and Form in Typography' (from page 37) (2h)
+
+### Activity 2
+
+> 🎥 **WATCH**
+>
+> Video: [The History of Typography - Animated Short](https://www.youtube.com/watch?v=wOgIkxAfJsk) (5m 9s) by Ben Barrett-Forest
+
+### Activity 3
+
+> 📚 **READ**
+>
+> Knowing and understanding classification is important, but it is not always enough to make a decision on choosing the right typefaces.
+>
+> In his book _Design for Hackers_, David Kadavy suggests that we focus more on the overall structure of letterforms to understand the mood a typeface communicates. Section: 'Looking At Letter Structure. The Form of the Skeleton' (page 297) (1h)
+>
+> _"A nearly limitless choice of fonts, of varying degrees of quality. Letters that were once carefully chiselled into marble, or cast out of lead can now be reproduced in limitless numbers with just a few clicks. Publishing technology has come a long way, and with it, the number of fonts available to designers has exploded." - David Kadavy_
+
+### Activity 4
+
+> 📚 **READ**
+>
+> From _Design for Hackers_ by David Kadavy:  
+> Chapter: 'Choosing and Pairing Fonts' (pages 291-310). Pay close attention to the informational graphic on page 308 and use it as a cheat-sheet for your future projects. (2h)
+
+---
+
+## Lesson Task
+
+### Goal
+
+To get some experience in selecting typefaces for a particular brand and target audience.
+
+### Brief
+
+Choose and combine typefaces for a website for a company that sells socks called ‘Funky Monkey’. These socks are not just you average type of sock. They are designed for active people that do vigorous training on a daily basis. They are of high quality and consist of modern designs that are the major attraction for most customers.
+
+The target audience:
+
+- The target audience is 20 – 35 years.
+
+- 50% male 50% female.
+
+- Currently training for a big triathlon event.
+
+- Want to look stylish while training.
+
+- Loyal to two athletic brands.
+
+- Being active is a part of their daily routine.
+
+- Follow triathletes on Instagram.
+
+This is the logo of the company:
+
+![Logo](../images/design-1/Typography/Lessontask-typographybasics-1.png)
+
+> **NOTE:** The Lesson Tasks are not submitted to Moodle and won’t be assessed by tutors. They are mainly for you to practise your skill as a designer and to prepare for the Course Assignment (CA) to come.
+
+### Bibliography
+
+Morgan Cole, 2019. Visual Design. [Online] Available at: <https://www.behance.net/gallery/75640265/Visual-Design> [Accessed 10 July 2020].
+
+Ally’s Basket, 2020. Lindt Excellence Supreme Dark Chocolate. [Online] Available at: <https://www.allysbasket.com/chocolate/10268-lindt-excellence-supreme-dark-chocolate-90-cocoa-100g-block.html> [Accessed 10 July 2020].
+
+Craig Ward, 2016. Simply Ad Type. [Online] Available at: <https://simplyadtype.wordpress.com/2016/03/01/good-typography-is-invisible-bad-typography-is-everywhere/> [Accessed 10 July 2020].
+
+John van Weelden, 2018. Schiphol Airport. [Online] Available at: <https://unsplash.com/photos/oLRc49-qjpY> [Accessed 10 July 2020].
+
+Simon Ålander, 2011. Sticks and stones may break my bones. [Online] Available at: <https://www.flickr.com/photos/coffeemademedoit/5465343984/in/photostream/> [Accessed 10 July 2020].
+
+Nikita Prokhorov, 2019. What Is Typography? A Deep Dive Into All Terms And Rules. [Online] Available at: <https://www.shillingtoneducation.com/blog/what-is-typography/> [Accessed 10 July 2020].
+
+James Brook, 2011. The Frutiger Grid. [Online] Available at: <https://jamesbrook.wordpress.com/2011/01/25/the-frutiger-grid/> [Accessed 10 July 2020].
+
+byrosanna.co.uk, 2017. Choosing Fonts & Typefaces That Work for Your Brand. [Online] Available at: <https://www.byrosanna.co.uk/blog/fonts-typefaces-brand?utm_content=buffer5f4e5&=&utm_medium=social&=&utm_source=pinterest.com&=&utm_campaign=buffer> [Accessed 10 July 2020].
diff --git a/packages/lms/src/routes/content/feu1/design/module-3/+page.md b/packages/lms/src/routes/content/feu1/design/module-3/+page.md
new file mode 100644
index 0000000..79b819e
--- /dev/null
+++ b/packages/lms/src/routes/content/feu1/design/module-3/+page.md
@@ -0,0 +1,9 @@
+---
+title: Module 3
+tags:
+  - Design
+type: Module
+previous: Module 2
+---
+
+This module will look at how to plan and create a good experience for the users visiting your website. We will also look at user interface design, how UI and UX differ and how they work together to ensure a memorable user experience.
diff --git a/packages/lms/src/routes/content/feu1/design/module-3/intro-ux/+page.md b/packages/lms/src/routes/content/feu1/design/module-3/intro-ux/+page.md
new file mode 100644
index 0000000..9d72853
--- /dev/null
+++ b/packages/lms/src/routes/content/feu1/design/module-3/intro-ux/+page.md
@@ -0,0 +1,154 @@
+---
+title: Introduction to UX design
+tags:
+  - DEsign
+type: Lesson
+---
+
+## Introduction
+
+This lesson will explore user experience (UX) design and the tasks and process a UX designer needs to conduct to ensure a good user experience.
+
+## What is UX design?
+
+'User experience design' can mean different processes to different teams. There is no standard definition. Donald Norman, an engineer at Apple, coined the term 'UX design' in the 1990s.
+
+UX design refers to how a product (website/app/platform) has been set up to create a comfortable, functional, smooth and enjoyable experience. The main goal of UX design is to make a website or app user-friendly.
+
+UX permeates all of our interactions in the digital and physical world. Anything we use to complete a task represents a UX. Take the mouse illustrated in the image below, for example. When the mouse runs out of battery life, the user can charge it by connecting the USB to the mouse's bottom.
+
+But herein lies the problem; when the mouse is connected to the USB charger, the user can't use it. Even though the design of the mouse is sleek and stylish, it's unusable while charging. Would you say this is good or bad UX?
+
+![Poor user experience](../images/design-1/UX-Design/IntroductiontoUXdesign-1.jpeg\) _Figure 1: This is a bad UX experience for a user who has to work while the mouse is charging._
+
+To design a successful user experience, you need to be adaptable, a good communicator and someone with high empathy levels. You should be able to place yourself in the user's position and understand what is important to them.
+
+The UX design process includes various tasks like:
+
+- user research
+- user persona creation
+
+- setting up information architecture
+- creating user flows
+- conducting user testing.
+
+These concepts are discussed in depth later in this lesson. UX design can also include working with a UI designer to design wireframes and create prototypes.
+
+UX design doesn't include a product's visual design; this would be the user interface designer's role.
+
+UX has been described as making an interface useful or the 'flesh and bones' behind the UI, while UI design makes an interface look good.
+
+## User-friendly
+
+The UX designer has one goal: to ensure the website/app is easy to understand and use, intuitive to navigate and make users feel good.
+
+A product that leaves users frustrated, confused or lost doesn't have good UX. The ideal is to have a website/app that looks good and has a useful UI. If an app only looks nice but doesn't work as you intend it to, there's no point in using it.
+
+![A UX designer defining user experience](../images/design-1/UX-Design/IntroductiontoUXdesign-2.jpeg\) _Figure 2: A UX designer defining user experience._
+
+## Tasks and processes
+
+UX design is built on research. Planning and processes to achieve this include:
+
+### User research
+
+The first part of the process is to figure out who your new website/app/service/platform/system is for. Who is the target audience? What does the user want? User research will make the design process more manageable and possibly also help the product to be successful.
+
+UX research usually starts with quantitative and qualitative research. Quantitative research refers to numbers and statistics, and information about quantities. For example, you can let users complete an online survey to answer questions about their eating habits (e.g., how many times a week they eat fast food).
+
+At the end of the research, you’ll have data in numeric form, and you'll most likely be able to spot a pattern at a glance or be able to process it to discover patterns; for instance, 70% of users eat fast food three times a week.
+
+### Examples of quantitative data
+
+- your coffee cups hold 250ml coffee
+- between 9 a.m. – 11 a.m. you had 100 users on your site
+
+- 90% of your users access your site through their mobile device.
+
+Qualitative research refers to a user’s behaviour and gathers non-numerical data such as user opinions and reasons for their behaviour. We now know most users eat fast food three times a week, but we need to find out why.
+
+What are the reasons and motivations behind this decision? It could be because of their busy lifestyle or that they crave something delicious. Qualitative research is conducted by observing a user and conducting interviews and surveys with open-ended questions.
+
+### Examples of qualitative data
+
+- Q: Was the checkout process effortless?
+  - A: No, I found the process frustrating because I couldn’t find the 'add to cart' button.
+- Q: Was it easy for you to get in touch with us?
+  - A: Yes, the contact form made it easy to submit a query, and the confirmation message I received gave me peace of mind.
+
+## User personas and storyboards
+
+Target audience research will assist in the creation of user personas. These personas are fictional, but they represent users' needs, goals and lifestyles to help you better understand your audience and identify where the users’ needs lie.
+
+![User Persona example](../images/design-1/UX-Design/IntroductiontoUXdesign-3.jpeg\) _Figure 3: An example of a user persona._
+
+Storyboards take these user personas and place them in real-life situations to determine how a person could use your product and where they will interact with it.
+
+![Storyboard example](../images/design-1/UX-Design/IntroductiontoUXdesign-4.jpeg\) _Figure 4: Storyboard of Audi’s customer engagement (source: slickandquick.com)._
+
+## Information architecture
+
+Information architecture (IA) is structuring a website to ensure the content is presented in an orderly fashion and information is structured intuitively for the end-user.
+
+Information should be laid out logically so that content across the website or app is easy to find and navigate. Imagine reading a book without chapters organised in the right sequence or browsing a website with no landing page; the user will be confused.
+
+Humans crave structure and will interact much better with a system that is intuitive and sensible.
+
+![Information Architecture](../images/design-1/UX-Design/IntroductiontoUXdesign-5.png\) _Figure 5: Information on the architecture of a simple website._
+
+### User flows
+
+Mapping the basic user journey and route a user will follow - from beginning to end - when using your product is the user flow and helps you optimise and plan the user's process and experience.
+
+![User flow example](../images/design-1/UX-Design/IntroductiontoUXdesign-6.png\) _Figure 6: User flow beginning (planning) stage (Source: [careerfoundry.com](http://careerfoundry.com/))._
+
+![User flow end stage](../images/design-1/UX-Design/IntroductiontoUXdesign-7.png\) _Figure 7: User flow end stage (Source: [careerfoundry.com](http://careerfoundry.com/))._
+
+### Wireframes and prototypes
+
+Wireframes and prototypes are things that UI designers usually work on with UX designers and are the beginning stages of the visual design process. This topic will be covered more thoroughly later on in the programme.
+
+![A simple wireframe](../images/design-1/UX-Design/IntroductiontoUXdesign-8.png\) _Figure 8: An example of a simple wireframe._
+
+![Wireframes with user flow](../images/design-1/UX-Design/IntroductiontoUXdesign-9.png\) _Figure 9: An example of wireframes within a user flow._
+
+---
+
+## Activities
+
+### Activity 1
+
+> 🎥 **WATCH**
+>
+> Video: [What is UX Design? (Video Guide)](https://www.youtube.com/watch?v=v6n1i0qojws) (5m 6s) by CareerFoundry.
+>
+> Video: [UX Design: 1 Overview](https://www.linkedin.com/learning/ux-design-1-overview-2/welcome?autoplay=true&u=43268076) (13m).
+
+### Activity 2
+
+> 📚 **READ**
+>
+> Article: [UX Design Defined](https://www.invisionapp.com/design-defined/ux-design/) (5m).
+
+### Activity 3
+
+> 📚 **READ**
+>
+> Article: [All Design is UX Design](https://www.invisionapp.com/inside-design/all-design-is-ux-design/) (5m).
+
+### Activity 4
+
+> 📚 **READ**
+>
+> Read the following chapters in the book: '_Don’t Make Me Think_'.
+>
+> - Chapter 4: Animal, Vegetable, or Mineral
+> - Chapter 5: Omit needless words
+
+---
+
+## Lesson Task
+
+Search for three products you interact with daily. These can include the coffee machine you use every morning, the weather app you use to see if rain is predicted, and the remote control of your TV, etc.
+
+Think of how you interact with these products. Which elements do you consider bad UX, and which do you consider good UX? Make a list of each product's positives and negatives, and think about how you can improve each product's overall user experience.
diff --git a/packages/lms/src/routes/content/feu1/design/module-3/principles-ui-design/+page.md b/packages/lms/src/routes/content/feu1/design/module-3/principles-ui-design/+page.md
new file mode 100644
index 0000000..10b4da5
--- /dev/null
+++ b/packages/lms/src/routes/content/feu1/design/module-3/principles-ui-design/+page.md
@@ -0,0 +1,153 @@
+---
+title: Principles of UI design
+tags:
+  - Design
+type: Lesson
+---
+
+## Introduction
+
+In this lesson, we will discuss the design principles that make a good UI design.
+
+## UI principles
+
+When designing a product interface, the golden rule is to keep it as simple as possible so that the user stays engaged. Simple doesn’t necessarily mean 'less content', but rather that design choices should be kept uncomplicated.
+
+Here is where the KISS acronym is handy to keep in the back of your mind. KISS stands for 'keep it simple stupid', a design principle used by the U.S. Navy in 1960.
+
+It’s believed the simpler a system is to use, the better it will work for the end-user. Simplicity should be considered a key goal in every design. When a design or system is simple to use, it makes for good user interaction and, in the end, a good user experience.
+
+Let's look at some useful principles for interface designing.
+
+## Simplicity and clarity
+
+An interface should be intuitive, straightforward, and easy to understand. When a design is uncluttered, it's easier for the user to navigate the platform and quickly find what they are looking for. When there are too many elements and steps to reach the goal, it will overwhelm the user, creating the assumption that they need to 'work' to use the interface.
+
+It's safe to say that users scan through information rather than read through it; therefore, as designers, we need to focus our attention on keeping the overall design as simple and straightforward as possible.
+
+## Key questions
+
+Here are some key question to ask yourself when designing an interface:
+
+### Could the interaction between the user interface and the user be more straightforward and more comfortable to use?
+
+Think of a website that uses a hamburger menu as the main navigation. On a mobile device, this is acceptable since the screen's size is small. On a desktop device, however, it creates an extra step for the user to perform.
+
+Creating proper navigation that the user will see when they enter the site will make the interaction between interface and user faster and more comfortable. Look at the example below. When a user lands on the page, they will know exactly what the company is about and where each menu item will take them.
+
+The interaction between the user and the interface immediately comes across as user-friendly and informative.
+
+![Good navigation](../images/design-1/UI-Design/Principlesofuserinterfacedesign-1.jpeg\) _Figure 1: Good navigation gives the user a clear indication of what they can achieve on the website (Source: [https://superbalist.com/women](https://superbalist.com/women))._
+
+### Could the colour choice and images be more simple and less overwhelming?
+
+As we have previously learned, colours and images are essential in the overall design of an interface. Not only for aesthetics, but the brand relies on these to tell its story. Having too many colours and images, on the other hand, will create a cluttered design.
+
+Think of a website with a busy background image, and on top of this image is another image and on top of this is coloured text with bad contrast to the image. Not only will the user feel overwhelmed, but the overall design will look cluttered.
+
+The example below demonstrates a design with bad colour use and an overall cluttered look and feel. The user won't know what to do or how to interact with the website. The choice in colour is also overwhelming and strenuous on the eye.
+
+![Poor use of colour](../images/design-1/UI-Design/Prinicplesofuserinterfacedesign-2.jpeg\) _Figure 2: An example of bad use of colour and imagery._
+
+Good use of colour ensures a more comfortable experience and will allow users to see what they need to do to reach their goal.
+
+![Better use of colour](../images/design-1/UI-Design/Principlesofuserinterfacedesign-3.jpeg\) _Figure 3: Better use of colour and imagery._
+
+### Does each design element serve a purpose?
+
+User interface design should be meaningful. Each element used in the design should serve a purpose. As soon as elements are added to the interface with no purpose, the design becomes meaningless and confusing.
+
+Before you add any component to your design, ask these questions:
+
+- does my design choice serve a purpose?
+
+- will it help the user reach their goal faster and more efficiently or prevent them from reaching their goal and make the overall experience unpleasant?
+
+Don't use elements to make the overall design appealing. Use elements to make the design purposeful. In the image below, we can see which choices were made to make the overall design purposeful.
+
+![Good use of design elements](../images/design-1/UI-Design/Principlesofuserinterfacedesign-4.png\) _Figure 4: Good use of design elements that serve a purpose on the app design._
+
+## Structure and consistency
+
+It's essential to have information well organised and structured logically. Elements should be consistent, and the layout should be easy to understand and approach.
+
+There should be an informational and typographical hierarchy. The text must be distinct, and there must be adequate spacing to separate sections and ensure legibility. Buttons and call-to-actions should be highlighted and easy to spot.
+
+Navigation should always be straightforward. Look at the example below. The user’s eye will go to the logo first, and then it will travel across the main navigation to the sign-up CTA, then down to the header and written text and then across to the second CTA.
+
+Also, pay attention to the use of colour on the page. It's consistent from top to bottom, and the buttons are bright and prominent.
+
+![Consistent page structure](../images/design-1/UI-Design/Principlesofuserinterfacedesign-5.png\) _Figure 5: Good page structure and consistency_
+
+## Flexibility
+
+The design should be adaptable and look good in all situations - on a brand-new iPhone, an old desktop PC and a slick MacBook Pro. This ties in with accessibility and legibility, important factors to consider when you start the design process.
+
+![Good responsive design](../images/design-1/UI-Design/Prinicplesofuserinterfacedesign-6.jpeg\) _Figure 6: An example of good responsive design._
+
+## Familiarity
+
+Users respond well to patterns they know and feel comfortable using. There is no need to reinvent the wheel when designing a UI. Things like common colour associations (like red for sale, green for available, etc.), navigation menus (like the hamburger menu on mobile) and call-to-actions (button formats, copy used, etc.) are familiar patterns.
+
+The example below shows two different confirmation messages. The one on the left will be more familiar to users than the one on the right because of how the pattern is presented. The confirmation message on the right is confusing, and users could instantly feel uncomfortable.
+
+![Examples of confirmation](../images/design-1/UI-Design/Prinicplesofuserinterfacedesign-7.png\) _Figure 7: Two examples of confirmation messages._
+
+## Feedback and user control
+
+A user should always feel in control when using an interface. They should know where they are, how they got there, and what the next step is. It ensures a confident and informed user who will have a good experience.
+
+The example below shows how the user is in control of the checkout process. Every step is indicated by the process bar. The user even has a way to back out and start over. The information icon will provide them with extra information if there is uncertainty. The bright green CTA is prominent and guides them further through the process.
+
+![An example of user control](../images/design-1/UI-Design/Prinicplesofuserinterfacedesign-8.png\) _Figure 8: An example of good feedback and user control._
+
+---
+
+## Activities
+
+### Activity 1
+
+> 📚 **READ**
+>
+> In the book, _'Don't Make Me Think'_, read the following chapters.
+>
+> - Chapter 6: Street signs and Breadcrumbs
+> - Chapter 7: The Big Bang Theory of Web Designy
+
+### Activity 2
+
+> 🎥 **WATCH**
+>
+> Video: [The UI designer’s role](https://www.linkedin.com/learning/user-experience-ux-for-non-designers/the-ui-designer-s-role?u=43268076) (4m 42s)
+
+### Activity 3
+
+> 🎥 **WATCH**
+>
+> Video: [10 Rules of Good UI Design to Follow](https://www.youtube.com/watch?v=RFv53AxxQAo) (5m 5s).
+
+---
+
+## Lesson Task
+
+### Brief
+
+For this task, you will be using the UI elements and patterns you have gathered and designed in lesson task 1 to create three pages for the Mobile Meals app. You can decide which three pages you want to design, for example, the homepage, the restaurant page, and a login page.
+
+The target audience for this app is aged between 25 and 35. They have busy schedules, so cooking time is limited and ordering food online is more convenient to accommodate their busy lifestyles. Popular restaurants include The PizzaGuy, The BurgerBar and PlatedFresh, a restaurant specialising in healthy food.
+
+## Level 1 Process
+
+- Make a quick sketch of how the layout and placement of elements will potentially look.
+- In Figma create an artboard for any mobile device.
+- Focus on what you've learned about UI principles and apply your knowledge to your app's design.
+- Ensure the navigation on the app is straightforward and easy to comprehend.
+
+- Ensure the elements are neatly displayed and have a purpose. Make use of a grid structure to help you place elements on the page.
+- Design components and elements should align correctly. This will ensure a neat layout throughout.
+
+- The use of colour and typography should be consistent.
+
+- Consider the app's navigation.
+
+- Most importantly, remember to KISS (keep it simple stupid).
diff --git a/packages/lms/src/routes/content/feu1/design/module-3/principles-ux-design/+page.md b/packages/lms/src/routes/content/feu1/design/module-3/principles-ux-design/+page.md
new file mode 100644
index 0000000..26579df
--- /dev/null
+++ b/packages/lms/src/routes/content/feu1/design/module-3/principles-ux-design/+page.md
@@ -0,0 +1,166 @@
+---
+title: Principles of UX design
+tags:
+  - Design
+type: Lesson
+---
+
+## Introduction
+
+This lesson will look at the fundamental principles of UX design and how designers use them for a good user experience.
+
+## UX design principles
+
+UX design is all about how users feel while interacting with your product. It is the process used to create experiences that are meaningful and relevant to the user. In this process, we centralise the role of the user and focus all design decisions around them.
+
+Here are a few fundamental points to help you succeed when creating a user-centred experience:
+
+## Focus on user needs
+
+It is important to understand who your users (customers/clients) are and what they need the product to do for them. We establish the users' needs through user testing and research. Remember that you are not necessarily the user, and what you might find to be the best solution for yourself might not be the best solution for the user.
+
+We need to centralise the user as the focal point for all our design decisions. Imagine having a new baby or pet in the house. Every decision and every move you make will be with them in mind, and the entire house will be rearranged to ensure the new member is comfortable and happy.
+
+This is essentially what you need to focus on when it comes to the UX design of a website or app. Every decision should be based on the users' need and how they will interact with the interface. Giving the user what they need will ensure a happy user who will most probably return to your website.
+
+![Example of user needs](../images/design-1/Principles-UX/PrinicplesofUXdesign-1.png\) _Figure 1: An example of user and business needs._
+
+## Information hierarchy
+
+How a site’s content is organised dramatically impacts how the user interacts with a product. This includes the navigation (menus) and how the headings and content are grouped and laid out. The more logical and well-considered the content, the more user-friendly the product will be.
+
+Information should be presented to the user according to importance. The most important piece of information comes first. Keep in mind that users scan through information and need to do so quickly and effortlessly.
+
+The image below demonstrates a bad information hierarchy. The hamburger menu on the desktop is not intuitive and doesn’t tell the user what they can do on the website.
+
+The article itself is hard to read. The header, subheader and body text are the same text size and not enticing enough for a user to want to know more about the news story. The 'sign up' should also be more prominent. The way it looks now, a user will scroll past it and not even notice it.
+
+![Poor information hierarchy example](../images/design-1/Principles-UX/PrinicplesofUXdesign-2.png\) _Figure 2: Poor information hierarchy._
+
+The image below is the same website, but the designers paid more attention to the information hierarchy. The main header is big enough to attract attention to the title of the story, the subheader gives more information into what happened, and the body text explains in full detail what went down. Pay attention to how spacing and grouping are used on the page:
+
+1. The main header is first, and below it is more information on the journalist and the article's time and date. The main header and information are grouped together.
+
+2. Then there is an open space.
+
+3. We can see the main image underneath the open space with details about the image and the photographer's name. The image and details below are also grouped together.
+
+4. More open space.
+
+5. The subheader is a bit smaller than the main header but still bigger than the body text.
+
+6. More open space.
+
+7. Then the user is presented with the rest of the news story.
+
+8. More open space.
+
+9. Then the sign up. The CTA button is prominent for users to see the action immediately.
+
+The way information is presented in the design below will entice the user to read the article. Not only that, but the user will be able to scan through the story quickly, get the details and move on to the next headline.
+
+![Good information hierarchy](../images/design-1/Principles-UX/PrinicplesofUXdesign-3.png\) _Figure 3: An example of good information hierarchy._
+
+## Consistency
+
+Consistency helps users become familiar with your product quickly, making it easier for them to learn and use. If there is too much inconsistency with your product’s usability, users will get confused and demotivated. They might become discouraged to come back to your product.
+
+Elements on a page need to look consistent and function similarly from one page to another. When you look at the example below, you can see CTAs are the same from one page to another. The icons are consistent in their placement, and the use of colour is also the same throughout.
+
+![Good use of consistency](../images/design-1/Principles-UX/PrinicplesofUXdesign-4.png\) _Figure 4: An example of good consistency on a fitness app._
+
+## Accessibility
+
+The website or app should be accessible for all users. Designing with this in mind is vital. The design should be responsive on all screen sizes and cater to users with disabilities.
+
+Ensuring there is a good contrast between background and text colour is one way to ensure accessibility. The text should not be too small and should be easy to read when a user accesses the website in a room with minimum light, for example.
+
+The example below demonstrates bad colour contrast, which will make the message hard to read for users without disabilities, let alone those whose vision is impaired.
+
+![Inaccessible website image](../images/design-1/Principles-UX/PrinicplesofUXdesign-5.png\) _Figure 5: An example of an inaccessible web page._
+
+The example below shows good colour contrast and is more accessible.
+
+![Good colour contrast](../images/design-1/Principles-UX/PrinicplesofUXdesign-6.png\) _Figure 6: Good colour use ensures an accessible website_
+
+## User feedback
+
+The user should know where they are in the process of using your product: Where are they, how did they get there, and what should they do next? Confirming their actions with an animation, design change, or text prompt is an essential feature that keeps them engaged and informed.
+
+The UX designer also needs to consider the context in which feedback is given to a user. This includes the physical context and emotional context. Like with any feedback in life, we need to know what needs to change where, and because feedback can sometimes come across as reprimanding, UX designers need to pay close attention to how it is conveyed.
+
+Usually, when a user is given bad news, designers will do it with more empathy than congratulating them on purchasing a product or winning a weekend away for two. The physical context feedback should happen where it is visible on the page and where the user can clearly see it.
+
+Think of when adding an item to your online cart. You’ll receive immediate feedback saying your item was successfully added, and you can then proceed to checkout.
+
+![Good user feedback](../images/design-1/Principles-UX/PrinicplesofUXdesign-7.png\) _Figure 7: Good user feedback with the 'add to cart' process._
+
+## Simplicity
+
+The Nielsen Norman Group summed up the definition of user experience design perfectly by saying that the first requirement for an excellent user experience is to meet the customer's exact needs without fuss or bother. The next step is simplicity and elegance that produce products that are a pleasure to use (Nielsen Norman Group, 2016).
+
+Clarity and simplicity ensure a good user experience. It leads the user on a smooth and uncluttered journey that avoids confusion. Overwhelming the user with too many options and/or complex solutions could make them give up the process. Keep all aspects of your product as simple, linear and straightforward as possible.
+
+![An app for booking flights](../images/design-1/Principles-UX/PrinicplesofUXdesign-8.png\) _Figure 8: A simple, uncluttered flight booking app._
+
+## Activities
+
+### Activity 1
+
+> 🎥 **WATCH**
+>
+> Video: [What the #$%@ is UX Design?](https://www.youtube.com/watch?v=Ovj4hFxko7c&feature=emb_logo) (5m 30s)
+
+### Activity 2
+
+> 🎥 **WATCH**
+>
+> Video: [What is the UX design process?](https://www.youtube.com/watch?v=Um3BhY0oS2c) (4m 02s)
+
+### Activity 3
+
+> 🎥 **WATCH**
+>
+> Video course: [UX Design 2: Analysing User Data](https://www.linkedin.com/learning/ux-design-2-analyzing-user-data/get-data-to-analyze?contextUrn=urn%3Ali%3AlyndaLearningPath%3A56dfbc9b92015a33b4908fdd&u=43268076) (30m)
+
+### Activity 4
+
+> 📚 **READ**
+>
+> Case Study 1: [Helping homeowners understand their home value on Zillow](https://www.francestung.com/case-studies-1/2019/4/12/helping-homeowners-understand-their-home-value-on-zillow)
+
+### Activity 5
+
+> 📚 **READ**
+>
+> Case Study 2: [Redesigning the New York Times app](https://uxdesign.cc/the-new-york-times-timely-app-concept-27efe88e5d4b)
+
+### Activity 6
+
+> 📚 **READ**
+>
+> Case Study 2: [Redesigning Airbnb for the new normal](https://uxdesign.cc/airbnb-redesigning-for-the-new-normal-66fb273de769)
+
+### Activity 7
+
+> 📚 **READ**
+>
+> In the book, _'Don't Make Me Think'_, read the following chapters.
+>
+> - Chapter 8: The Farmer and the cowman should be friends
+> - Chapter 9: Usability testing on 10 cents a day
+> - Chapter 12: Accessibility and you
+
+---
+
+## Lesson Task
+
+### Brief
+
+Search for any website/app of your choice. Ask family and friends to interact with the chosen website/app and observe them. Ask questions like what they found confusing and what they found easy and enjoyable. With this knowledge, redesign the homepage of the chosen website/app.
+
+## Level 1 Process
+
+- Conduct your research and make notes of the process.
+- Based on your research, plan how you would make the journey more enjoyable for the user.
+- In Figma, redesign the homepage of the website/app.
diff --git a/packages/lms/src/routes/content/feu1/design/module-3/user-interface/+page.md b/packages/lms/src/routes/content/feu1/design/module-3/user-interface/+page.md
new file mode 100644
index 0000000..7867b37
--- /dev/null
+++ b/packages/lms/src/routes/content/feu1/design/module-3/user-interface/+page.md
@@ -0,0 +1,152 @@
+---
+title: User Interface Design
+tags:
+  - Design
+type: Lesson
+---
+
+## Introduction
+
+This lesson will look at user interface design and how UI kits help designers create more consistent and appealing interfaces.
+
+## What is UI design?
+
+User interface design refers to the visual elements of a product. Simply put, it is the look and feel of a website. The branding for a company should come through in the user interface design to attract and engage the target audience.
+
+![User-Interface example on app](../images/design-1/User-Interface/Userinterfacedesign-1.png\) _Figure 1. The interface of a banking app._
+
+UI design is focused specifically on the point of contact where a human user interacts with a website or app. How the website looks and guides a user towards the page's goal is what UI design is all about.
+
+## Example of UI design
+
+A food ordering app's user interface is there to make the user feel good about ordering food and guides them towards satisfying their hunger.
+
+![Food delivery app](../images/design-1/User-Interface/Userinterfacedesign-2+.jpg\) _Figure 2. Mr. Delivery Mobile food app, 2022._
+
+The most crucial UI design aspect is to make the interaction between human (user) and software (product) easy and smooth while also keeping the look attractive and straightforward.
+
+![A relaxing app](../images/design-1/User-Interface/Userinterfacedesign-3.png) _Figure 3. An example of an app that helps users relax and fall asleep easily._
+
+## UI elements
+
+UI elements refer to the app or website's design elements that the user will be interacting with to reach the end goal. Examples of user interface elements include the following:
+
+### Input controls
+
+Input controls let the user input information on the website or app. An excellent example of input controls is list boxes, where users can select multiple items at once. Another good example is text fields where the user enters text like an email address, name, surname and phone number.
+
+![Input controls](../images/design-1/User-Interface/Userinterfacedesign-4.png\) _Figure 4. Input controls._
+
+### Navigational components
+
+Navigational components focus on steering the user in a specific direction. Any element that helps the user navigate the page may be seen as a navigational component.
+
+Good examples are icons and pagination. When the user clicks on the cart's icon, they will be directed to the cart page, and when a user searches for an item, they will be directed to the search results page.
+
+![Navigational components](../images/design-1/User-Interface/Userinterfacedesign-5.png\) _Figure 5: Navigational components._
+
+### Informational components
+
+Any form of communication with the user can be seen as an information component. This includes items such as the notification that an item was successfully added to your shopping cart. Information components inform the user of progress, give them tips on how to use specific tools and allow them to become involved with a brand by signing up for newsletters, for example.
+
+![Informational components](../images/design-1/User-Interface/Userinterfacedesign-6.png\) _Figure 6: Informational components._
+
+### Containers
+
+Containers are elements that contain other elements. One such design element is the accordion. An accordion consists of a list of items that are vertically stacked. Each of these elements hides a series of other design elements that are revealed when the user clicks on the accordion panel. More information is revealed when the specific accordion panel is activated by pushing existing page content further down the page.
+
+![An accordion](../images/design-1/User-Interface/Userinterfacedesign-7.png\) _Figure 7: An example of an accordion._
+
+## Interface inventory
+
+Brad Frost coined the term 'interface inventory' and explained that it is similar to content inventory. However, instead of taking stock of a website's content such as text, images and documents, you will concentrate on the interface's design components, the bits and pieces that make up the website (Brad Frost, 2013). Interface inventories are useful since they help keep UI elements consistent and cohesive across the board.
+
+You may be asking where and when this process starts. It can be for an existing website that needs to be updated or for a new website. In the case of a new website, you will be guided by what competitors are doing and what needs to be considered for the brand. Either way, it is vital to keep design choices and components consistent from start to finish.
+
+## How to create an adequate interface inventory
+
+### Screenshots
+
+The process starts by taking screenshots of the design components. Every element needs to be added, from the smallest icon to more prominent components such as headers and images. Every component plays a role in the overall design and, therefore, should be included. The following are some interface components which should be considered:
+
+- typography
+- colours
+- graphics and images
+- media
+- forms
+- buttons
+- tables
+- navigation
+- lists
+- interactive components.
+
+![An interface inventory](../images/design-1/User-Interface/Userinterfacedesign-8.png\) _Figure. 8: An example of an interface inventory._
+
+### Categorising and grouping components
+
+The second step in the process is to take all the gathered screenshots and place them in different categories. For example, take all the screenshots you have gathered of the different buttons used on the website and place them all together in one document. You will quickly see if the style of the button is consistent across the website.
+
+You should do this with all the interface components you have gathered. As you can see from figure 8, most of the components are consistent. Components that can use some tweaking are social media icons. Their colour is somewhat different to the colour palette and other icons on the site.
+
+### Share, discuss and review
+
+After gathering all the information and placing them in one document, assemble team members and perform a review. The review should give you a clear indication if elements are consistent or if they need to be investigated and refined more thoroughly.
+
+## Pattern libraries and UI patterns
+
+The inventory interface process helps us spot inconsistencies in the design, but it will also help recognise any recurring design patterns. A design pattern is employed when designers reuse elements to solve a problem in the user interface.
+
+An excellent example of a UI pattern is breadcrumbs that assist the user with navigation by retracing the user's steps. Another example is the home link where the brand's logo is clickable and directs the user back to the homepage or the site's starting point.
+
+With both these examples, the design pattern will be reused on almost every website page. Some examples of UI patterns include the following:
+
+- **password strength meter** – to indicate whether the user's password is sufficient
+- **calendar picker** – where a user can click on a specific date which will be highlighted and added
+- **module tabs** – when content needs to be separated, users can then switch between the content sections by clicking on the tabs
+- **notifications** – users are informed of important messages or updates by receiving a notification
+
+- **breadcrumbs** – indicate where the user is on the site and how they can get back to where they started if needed
+- **home link** – helps the user return to the start location - a brand’s logo is usually the home link
+- **carousel** – allows the user to browse through a set of items and gives them the ability to select one
+- **pagination** – gives users the ability to browse through a sorted list of products.
+
+The UI pattern library is made up of many such design patterns. There are contrasting opinions as to whether these design patterns serve as a design system. Some believe it is the same as a brand's style guide.
+
+To learn more about the broad range of design patterns and see examples of their usage, browse the website UI patterns here: [http://ui-patterns.com/patterns](http://ui-patterns.com/patterns)
+
+## Design systems
+
+As mentioned, some may say a pattern library is the company's design system, but let's break it down and see what a design system consists of.
+
+Let's look at the design system as a container; there are three compartments inside: the visual design language, the pattern library and the style guide:
+
+1. **The visual design language** - refers to the brand's colour palette, typography, imagery and grid system, logo, and slogan, to name a few.
+
+2. **Pattern library** - refers to the collection of the recurring/reusable design patterns.
+
+3. **Style guide** - the rules and guidelines on how a brand's assets should be used. What is allowed with regards to typography, colour and the logo, for example? The style guide doesn't only focus on the visual aspect of things but also on how to write the content.
+
+Design systems are assembled in code and provide designers and developers with a complete guide, including design standards, documentation on which components must be used and how to use them.
+
+## UI kits
+
+A UI kit is a useful resource that can assist UI designers in designing an interface. UI kits are handy tools to get inspiration from and help save time in the design process. A UI kit consists of components such as fonts, icons, buttons, checkboxes, to name a few. Below is an example of Material Design UI kits that are open for designers to use. [Here are more UI Kits](https://figmaelements.com/ui-kits/best-figma-ui-kits/)
+
+![Material UI kit](../images/design-1/User-Interface/Userinterfacedesign-9.png\) _Figure 9: Material Design UI example (Source: [material.io](https://material.io/design/material-theming/))._
+
+---
+
+## Lesson Task
+
+### Brief
+
+Gather UI patterns and components for a food delivery app called Mobile Meals. You can decide if you want to design these yourself or if you want to use a UI kit.
+
+The target audience for this app is aged between 25 and 35. They have busy schedules, so cooking time is limited and ordering food online is more convenient to accommodate their busy lifestyles. Popular restaurants include The PizzaGuy, The BurgerBar and PlatedFresh, a restaurant specialising in healthy food.
+
+### Level 1 Process
+
+- Conduct an interface inventory of similar apps to see what competitors in the market are doing. Please pay attention to what these competitors did right and what they did wrong regarding the UI elements. Furthermore, investigate if the general use of buttons, icons, typography, etc., is consistent across the site.
+- Explore [Figma UI Kits](https://figmaelements.com/ui-kits/best-figma-ui-kits/) for free UI kits or any other resource that you find helpful.
+- Create a 1920 x 1080px artboard in Figma. You can create multiple pages for your elements in Figma or place all the elements on one page, depending on the number of elements you'll use to design the website.
+- Think about what will be best with regards to colour, typography and imagery choices. Ensure these are used consistently throughout the design.
diff --git a/packages/lms/src/routes/content/feu1/design/module-4/+page.md b/packages/lms/src/routes/content/feu1/design/module-4/+page.md
new file mode 100644
index 0000000..cd02a84
--- /dev/null
+++ b/packages/lms/src/routes/content/feu1/design/module-4/+page.md
@@ -0,0 +1,9 @@
+---
+title: Module 4
+tags:
+  - Design
+type: Module
+previous: Module 3
+---
+
+This module will be looking at wireframing and prototyping and how these design deliverables fit into the design process. We will also pay attention to creating them and look at the tools that best fit the job.
diff --git a/packages/lms/src/routes/content/feu1/design/module-4/creating-prototypes/+page.md b/packages/lms/src/routes/content/feu1/design/module-4/creating-prototypes/+page.md
new file mode 100644
index 0000000..dab9042
--- /dev/null
+++ b/packages/lms/src/routes/content/feu1/design/module-4/creating-prototypes/+page.md
@@ -0,0 +1,180 @@
+---
+title: Creating prototypes
+tags:
+  - Design
+type: Lesson
+---
+
+## Introduction
+
+In this lesson, we will dive into the process of creating a prototype with Figma. We will also look at what needs to happen before prototyping can start.
+
+## Importance of prototyping
+
+You may wonder why prototyping is so important and why to bother with creating a wireframe and then a full functioning prototype later. These processes all play a vital role in getting things right from the start and delivering the user with a good user experience.
+
+As we have learnt, user testing is critical in the design process. You will test your wireframe and then, later on, do more thorough testing on your prototype where you will invite users to use your interface.
+
+With your wireframe, you will test the structure and layout and determine if these elements make sense to a user. With the prototyping, you will test the functionality of your website or app. Not only will the prototype show functionality, but it should essentially show the visual characteristics of the website as well.
+
+The following questions are examples of things you should ask yourself when using a prototype to test functionality:
+
+- Did users relate to your choice in colour?
+
+- Were the fonts used easily readable, and do you have a good visual hierarchy on the site to draw attention to important information?
+
+- Why did the user miss the primary CTA? Perhaps was it too small, and you should make it a tad bigger.
+
+- How did users react to specific elements, such as the main navigation?
+
+- Did they become frustrated on their journey to the end goal?
+
+- How will your website look and function on different screen sizes?
+
+![Prototypes](../images/design-1/Creating-prototypes/Creatingprototypes-1.jpeg\) _Figure 1: High fidelity prototypes for all screen sizes_
+
+### Tasks and process
+
+Proper planning before prototyping is vital. Think about it like this; you won't build a house without adequate planning, right? Surely you need to plan and figure out where the rooms such as the bathroom, main bedroom and living area in the house should be. The same applies when it comes to prototyping.
+
+### Gather requirements
+
+Before you can get started on any form of design, it's wise to have a good conversation with the client to gather the project's requirements. What does the client what to achieve in the market, who do they think their target audience is, do they have an existing Corporate Identity (CI) or do you need to design one? What do they want the user to do on their website, and what goals do they want to achieve with the product?
+
+### Information architecture, wireframes and paper prototypes
+
+By this stage, you should have a good idea of the client's needs, their main goals for the website and what you need to focus on. You should also have some insights into what kind of business they run and which business model they use.
+
+As a UX designer, it's up to you to bring user and business together by creating a user-friendly product that will generate revenue for the business and pleasure for the users. With the information gathered from your client, start by creating an Information Architecture (IA) for the site after spending a fair amount of time figuring out which pages to include.
+
+Start planning the structure and layout by doing a simple wireframe sketch or create one digitally. After the wireframe process, you will build your paper prototype to conduct user research.
+
+### User research
+
+We may have already done user research with the wireframing process to figure out who our target audience is. However, it's still a vital step in the prototyping process to ensure that what you are about to embark on will meet your target audience's needs and pain points. Not only that, but you will quickly learn whether there is a need for your product in the market or not.
+
+Having an aesthetically pleasing website is useless if the users' wants and needs aren't met. The five-step research learning spiral was originated by Erin Sanders at Frog (Erin Sanders, 2014) and is useful in conducting user research.
+
+Let's look at the five steps below to understand the research process better.
+
+1. Objectives
+
+   What knowledge do we have about our users at this stage and what knowledge gaps do we need to fill?
+
+2. Hypotheses
+
+   The knowledge we already have of our users or we believe we have. What we think we know about their habits and the answers we propose to meet their needs.
+
+3. Methods
+
+   How will we fill the gaps in our knowledge of our users and their habits? What strategies will we use and which will work based on the time and workforce we have available?
+
+   Will observing our users work better than interviews, or should we maybe do card sorting? If we want to conduct interviews, we need a team of people with experience to ensure the process is a success. It will also be time-consuming, which is challenging if we don't have much time.
+
+4. Conduct
+
+   Use the selected methods to gather user data.
+
+5. Synthesise
+
+   Now we take the knowledge we have gained from our users and integrate it into our products to see what possibilities exist for our product's design.
+
+## Building a prototype
+
+We have consulted the client, we have an IA, wireframe and paper prototype created, and we went through user research to see what gaps we need to fill with regards to our product and the user. Next, we will focus on building our prototype and then test it before moving on to coding a fully functional website or app.
+
+### Prototyping tools
+
+There are many tools designers can use for prototyping, and ultimately it's up to you to find one that meets your needs. We will be focusing on Figma for this course, but another popular contender in the market is Adobe XD.
+
+### Figma
+
+Figma is a web-based graphics editing and user interface design app. You can use it to do all kinds of graphic design work from wireframing websites, designing mobile app interfaces, prototyping designs, crafting social media posts, and everything in between. The Starter plan gives you unlimited files in the Drafts space, which you can share with unlimited viewers. Additionally, you can co-edit with unlimited editors in the Team space on up to 3 files (limited 3 pages per file).
+
+### Starting with Figma
+
+You should already have some familiarity with Figma from earlier lessons in the design course, but here we'll go into further detail.
+
+#### 1. Download
+
+Visit the Figma website to register a free account. Download and install the application as per the prompts.
+
+#### 2. Create a new file
+
+Open Figma, create a new file, choose Design File. Click on the frame tool and select ‘Frame’. Alternatively, you can press on the letter ‘F’ on your keyboard. Click on the canvas area and drag the frame to the required size. Alternatively you can choose a preset frame (like iPhone X/Android Tablet/Web 1280) using the design tab in the properties panel.
+
+![A new file](../images/design-1/Creating-prototypes/Figure%201*Figma_CreateNewFile.png\) \_Figure 9:  Figma create-a-new-file screen*
+
+#### 3. Design mode
+
+Figma has four different modes to help keep your project organised: Design, Prototype, Inspect and Share.
+
+You can find these options in the top-left corner of the header bar.
+
+When you have created a new design file, you will land in Design Mode. Here you can create your interface designs across multiple screens, which are called frames.
+
+![Design mode](../images/design-1/Creating-prototypes/Figure%202*Figma_DesignMode.png\) \_Figure 10. Design mode*
+
+#### 4. Prototype mode
+
+When your design is ready to start building your prototype, head over to Prototype mode. Here you can link up screens and apply everything you need to have a functional prototype.
+
+![Prototype mode](../images/design-1/Creating-prototypes/Figure%203*Figma_PrototypeMode.png\) \_Figure 11: Prototype mode*
+
+#### 5. Share
+
+People inherit access to a team’s Figma design files based on their team permissions. You can also invite external collaborators (or team members) to individual.
+
+There are three permissions when inviting to a design file:
+
+- Can view
+
+- Can edit
+
+- Can view prototypes only
+
+When you have generated a URL, this can be shared with anyone and will open in their browser. They don't need to have Figma installed to view it. When you make changes to your project after this sharing link has been generated, the link needs to be updated to reflect the latest design version.
+
+![Share mode](../images/design-1/Creating-prototypes/Figure%204*Figma_ShareMode.png\) \_Fig.12: Share mode*
+
+---
+
+## Activities
+
+### Activity 1
+
+> 🎥 **WATCH**
+>
+> Video: [Figma for beginners tutorials](https://www.youtube.com/playlist?list=PLXDU_eVOJTx7QHLShNqIXL1Cgbxj7HlN4) (51m 73s)
+
+### Activity 2
+
+> 🎥 **WATCH**
+>
+> Video course: [Figma Essential Training: The Basics](https://www.linkedin.com/learning/figma-essential-training-the-basics/the-basics-of-figma?u=43268076) (1h 37m) by Brian Wood.
+
+### Activity 3
+
+> 🎥 **WATCH**
+>
+> Videos: [Tutorials: Prototype while you design](https://youtube.com/playlist?list=PLXDU_eVOJTx7aqRW3Skp1aRT9ktC3ctqA) (1h 15m) by Figma.
+
+---
+
+## Lesson Task
+
+### Goal
+
+To familiarise yourself with prototyping in Figma.
+
+### Brief
+
+Create a simple prototype in Figma. You can choose the theme of the site. The main thing is to experiment and see what you can make.
+
+### Level 1 Process
+
+- Choose the theme for your site. It could be an ice cream store or a sports blog, or whatever you like.
+
+- Next open Figma and start with the home page for desktop and get familiar with the tools to create the page.
+
+- You can make multiple pages and try linking them together.
diff --git a/packages/lms/src/routes/content/feu1/design/module-4/creating-wireframes/+page.md b/packages/lms/src/routes/content/feu1/design/module-4/creating-wireframes/+page.md
new file mode 100644
index 0000000..6d48d5b
--- /dev/null
+++ b/packages/lms/src/routes/content/feu1/design/module-4/creating-wireframes/+page.md
@@ -0,0 +1,168 @@
+---
+title: Creating wireframes
+tags:
+  - Design
+type: Lesson
+---
+
+## Introduction
+
+This lesson provides an overview of the creation and sharing of wireframes with team members to receive input and provide feedback. We will also look at some online tools to create these wireframes.
+
+## Importance of wireframes
+
+As we have learned in the previous lesson, wireframes are an essential step in the design process. Not only to get ideas on paper but also to get feedback from team members. Wireframes specifically look at the layout, structure and functionality of a page and how the layout will change from a big screen to smaller screens.
+
+One other key aspect of wireframes is that when introduced early in the design process, it will iron out minor issues and ensure the basic structure is decided on, making the whole process less taxing and saving money and time in the long run.
+
+![Invision](../images/design-1/Wireframes-intro/Creating/Creatingwireframes-1.png\) _Figure 1: Team members contributing in InVision’s Freehand app (Source: invisionapp.com/freehand)_
+
+## How to create a wireframe
+
+There are four important steps to follow when creating a wireframe:
+
+1. Research first.
+
+2. Information architecture and user flows.
+
+3. Paper to computer.
+
+4. Choosing the right tools.
+
+The steps are discussed below:
+
+### Research first
+
+Wireframes may be the first step in the design process, but we first need to spend some time researching before creating a wireframe. We need to understand our target audience. We will perform this step by conducting user research and creating user personas and mood boards. It's also a good idea to see what competitors are doing in the market and the latest trends in the world of UX.
+
+![Target audience example](../images/design-1/Wireframes-intro/Creating/Creatingwireframes-2.png\) _Figure 2: An example target audience for an online bookstore_
+
+### Information architecture and user flows
+
+After conducting the user research, you should have a good idea of who your target audience is and the problems you need to solve. It will also give you a clear idea of what should be included on the wireframe, how many pages you will need and the different journeys users will take to meet their goals. Ensure you have a clear plan of the user flows and information architecture of the site.
+
+![Wireframe user flow](../images/design-1/Wireframes-intro/Creating/Creatingwireframes-3.png\) _Figure 3: An example of a wireframe user flow for a job-hunting app_
+
+### Paper to computer
+
+It's good to start with a low fidelity wireframe and use plain old pen and paper. When you have figured out what needs to be added and what needs to go, you can move to a medium-fidelity wireframe that will be a digital version of your wireframe.
+
+With your wireframe recreated digitally, you will be able to share it with other team members for some feedback. Of course, you can share your paper wireframe as well, but a digital version will be easier to access, and feedback from colleagues will be more understandable.
+
+An online, digital wireframe also alleviates problems with incorporating the thoughts from the various team members. It may allow for comments from specific team members to be visible to all team members. The image below demonstrates how the process started on paper and was then created digitally using InVision’s Freehand.
+
+![Job-hunting app](../images/design-1/Wireframes-intro/Creating/Creatingwireframes-4.jpeg\) _Figure 4: The job-hunting app from paper to computer_
+
+### Choosing the right tool
+
+There are many online tools out there for creating wireframes, but in this course we will be working with Figma.
+
+_**Figma**_
+
+Figma is a web-based graphics editing and user interface design app. You can use it to do all kinds of graphic design work from wireframing websites, designing mobile app interfaces, prototyping designs, crafting social media posts, and everything in between.
+
+For more on wireframes using Figma, [visit their website here](hhttps://www.figma.com/blog/how-to-wireframe/)
+
+![Figma](../images/design-1/Wireframes-intro/Creating/Creatingwireframes-10.png\) _Figure 8: Wireframes in Figma (Source: figma.com)_
+
+## What is included on a wireframe?
+
+Now that we have discussed some of the tools available to create wireframes let's look at what needs to be included on a wireframe. We have learned that wireframes consist of basic shapes, and only grey, black and white are used to design these. We have also learned that design elements and their looks are not essential in this process but rather where they will be placed on the page.
+
+### Page elements
+
+Wireframes may differ from one website to another, and you may need to add some page elements to solve a specific problem. Nonetheless, here are some essential page elements that are usually included as standard elements on wireframes:
+
+- **Headers** - The main headers and subheaders.
+
+- **Navigation** - The main navigation and menu items as well as the footer. Breadcrumbs can also be included if needed.
+
+- **Content boxes** - For images and body content.
+
+- **Place holder text** - For paragraph text and product descriptions.
+
+- **Branding elements** - Such as the company's logo.
+
+- **Search fields** - If the website requires a search function.
+
+- **Buttons** - CTA buttons for users to take action.
+
+- **Contact information** - This can be the phone number, social media and a physical address.
+
+![Wireframe elements of an app](../images/design-1/Wireframes-intro/Creating/Creatingwireframes-8.png\) _Figure 8: An example of wireframe elements used to illustrate a mobile app_
+
+Later in the design process, these page elements will become more aesthetically pleasing, but for now, they need to be as straightforward as possible. Remember, we have learned that wireframes aren't to discuss the pages' visual characteristics but rather how the structure and layout will work and where each page element will be placed.
+
+### Groupings
+
+When you have decided on the page elements needed for the wireframe, you need to figure out how to group these elements to make sense to a user. For example, you will group your main navigation, menu items, search field and logo and place them at the top of the page.
+
+With the footer, you will group the contact information and social media icons and place them at the bottom of the page.
+
+For the body content, you will be looking at grouping the content boxes and buttons and place them in the middle of the page.
+
+This is just a very basic example, as there are many different ways to group page elements. You will most probably come up with many different versions of one page.
+
+![Grouping wireframe elements](../images/design-1/Wireframes-intro/Creating/Creatingwireframes-9.png\) _Figure 9: Grouping of wireframe elements_
+
+### Feedback from colleagues
+
+Now that we have made sure the user flow is perfect, the target audience needs are met, and all necessary page elements have been added to the wireframe, we take our design to colleagues for additional feedback. It may become a tiring exercise as people's opinions differ from one another, and your colleagues may not think and see things the same way you do.
+
+Nonetheless, the feedback should be seen as additional information that could make the product and experience pleasant for the user. It's always good to take feedback with an open mind, see it for what it is and not take it too personally. It's about the user, after all.
+
+Using one of the prescribed tools mentioned, you should be able to get the team onboard digitally.
+
+### From wireframe to prototype
+
+After the feedback phase, you should have enough information to make some changes to upgrade and improve your design. Your low-fidelity wireframe may be a medium-fidelity wireframe at this stage. With content, copy and functionality, it will soon become a working prototype.
+
+Keep in mind that the wireframe serves as the skeleton of the website. The content and copy is the skin, and the functionality is the muscle. Each part plays a vital role in making the website function correctly.
+
+---
+
+## Activities
+
+### Activity 1
+
+> 🎥 **WATCH**
+>
+> Video: [Wireframe basics: The easy way to get started](https://www.youtube.com/watch?v=aqdn7vVKygA&t=8s) (3m 10s)
+
+### Activity 2
+
+> 🎥 **WATCH**
+>
+> Video: [Wireframing for newbies by Balsamiq](https://www.youtube.com/watch?v=KnZrypOaVCg) (18m 45s)
+
+### Activity 3
+
+> 🎥 **WATCH**
+>
+> Video: [Wireframing in Figjam](https://www.youtube.com/watch?v=wY29Wjlv8Yc&t=93s) (4m 45s)
+
+### Activity 4
+
+> 📚 **READ**
+>
+> Article: [The Definitive Guide: How to create your first wireframe](https://careerfoundry.com/en/blog/ux-design/how-to-create-your-first-wireframe/) (15m).
+
+---
+
+## Lesson Task
+
+### Brief
+
+For this lesson task, you will be taking the paper wireframe you have created for 'Fit for Life' in last week's lesson task and turning it into a digital online version using one of the tools discussed in this lesson. Invite fellow students, work colleges and family members to give you feedback on your design.
+
+### Level 1 Process
+
+- Start with exploring and finding the tool you find most comfortable to use for wireframing.
+
+- Take your paper prototype and recreate it digitally.
+
+- Invite others to look at what you have created and give you feedback on the layout and structure of your wireframe.
+
+- Make sure your wireframe is suitable for both desktop and mobile devices.
+
+- Take the feedback given to you and make the changes. It is a good idea to re-test your wireframe after making these changes to see if the structure and layout has a better flow.
diff --git a/packages/lms/src/routes/content/feu1/design/module-4/intro-prototyping/+page.md b/packages/lms/src/routes/content/feu1/design/module-4/intro-prototyping/+page.md
new file mode 100644
index 0000000..ece3d90
--- /dev/null
+++ b/packages/lms/src/routes/content/feu1/design/module-4/intro-prototyping/+page.md
@@ -0,0 +1,158 @@
+---
+title: Introduction to prototyping
+tags:
+  - Design
+type: Lesson
+---
+
+## Introduction
+
+This lesson will look at what prototyping is and why designers must complete this step in the design process.
+
+## What is a prototype?
+
+A prototype is a mid to high fidelity design deliverable of the final UI of your website or app. It is also functional and should show how the website would function.
+
+A prototype is also:
+
+- a model or sample of a new product
+
+- a mockup to test and evaluate how a process or concept would function
+
+- a way for designers to see if their interface works, get feedback, spot weaknesses, and iron out errors
+
+- a chance to make amendments and updates as necessary
+
+- a model or mockup of a UI design, in any stage of the process, to view the functionality, usability, and flow of the product
+
+- a mockup that gets laid out in a way that represents the real thing
+
+- a process that should be seen as a time-saving tool.
+
+![Example of high-fidelity prototype](../images/design-1/Prototyping/Introductiontoprototyping-1.gif\) _Figure 1: An example of a high-fidelity prototype created in Adobe XD (Source: letsxd.com)_
+
+It's vitally important for UI designers to test their designs. This allows them to identify errors and tweak features. Prototyping enables just that - reviewing your designs in action, in an interactive setting. It's a great way to test and explore the system within the team and present the product to a client. With a prototype, you can get feedback, brainstorm ideas, and ensure that the product is heading in the right direction.
+
+We have spoken about the different levels of fidelity with regards to wireframing. There are also different types - or levels - of prototyping fidelity, making testing possible at any part of the process. Design fidelity refers here to the level of detail and functionality within the prototype.
+
+Below we will explore the following levels of fidelity:
+
+1. Low fidelity - paper.
+
+2. Medium fidelity - clickable.
+
+3. High fidelity - advanced.
+
+### Low fidelity - paper
+
+This is the most basic prototype level, with minimal detail. It is usually done on paper, with any design features drawn up with a pen. This is the idea testing phase, with simple processes to get feedback on the concept.
+
+The advantage of this type of prototype is that there is no visual aspect to distract from the project outlook. It is a very accessible way to prototype, as everyone can draw! It's also quick to set up.
+
+![Paper prototyping](../images/design-1/Prototyping/Introductiontoprototyping-2.jpeg\) _Figure 2: Paper prototyping_
+
+### Medium fidelity - clickable
+
+This process usually consists of wireframe designs with limited visual design. Typically with black and white basic layout designs, this prototype level allows for testing the user-flow, information architecture and basic functionality.
+
+It is a lesser-used level of the prototype but still brings useful feedback to the project. A medium-fidelity prototype should essentially demonstrate the screen layouts and have basic clickability and navigation between screens.
+
+![Medium fidelity prototype example](../images/design-1/Prototyping/Introductiontoprototyping-3.gif\) _Figure 3: An example of a low to medium fidelity prototype (Source: Jad Limcaco)_
+
+### High fidelity - advanced
+
+This is the closest to the final product you can get before actual development. These designs include colour, typography, imagery, navigation, etc. and usually look exactly like the final product is planned to look.
+
+It's a great way to present final designs and concepts for clients, as it looks and behaves like the real deal, but without the time and resources spent on developing the product that will possibly need multiple timely amendments.
+
+This version should be almost fully functional, with as many features, motions, functionality and visual elements as possible.
+
+![High-fidelity prototype](../images/design-1/Prototyping/Introductiontoprototyping-4.png\) _Figure 4: High fidelity prototyping by Jae-seong Jeong (Source: dribbble.com/johnjbrown)_
+
+![High-fidelity prototyping](../images/design-1/Prototyping/Introductiontoprototyping-5.gif\) _Figure 5: High fidelity prototyping by Jae-seong Jeong (Source: dribbble.com/johnjbrown)_
+
+As we have discussed in the previous lesson, it's advisable to start with a low fidelity wireframe (pen and paper) and then take your design digitally to a medium-fidelity wireframe. After that, the prototyping phase starts, where you will give your design functionality. In this phase, the UI of the website should also be added and finalised.
+
+So, which one should you use? There is no one-size-fits-all solution. Each situation should be evaluated and decided individually and according to where you are in the design process. For example, a paper prototype is probably the best option for the earliest version when you are just starting.
+
+When you have done more work on the product's functionality than the UI, medium-fidelity will work well. However, when the process has advanced to where your designs are close to a final phase, a high-fidelity prototype will probably showcase the product best.
+
+![Various wireframes](../images/design-1/Prototyping/Introductiontoprototyping-6.jpeg\) _Figure 6: Low, medium and high-fidelity prototypes_
+
+## Basics
+
+Some principles to keep in mind:
+
+- always start with the lowest fidelity wireframe
+
+- don't get attached to your ideas and be open to feedback
+
+- don't spend too much time on intricate details that will possibly change
+
+- it doesn't have to be perfect (yet); it just needs to work
+
+- functionality is key.
+
+## The testing process
+
+How does the testing process work? Here are two primary phases you may come across and use in your workflow:
+
+### Internal testing
+
+> Run through your designs with your team members or with other designers. It's a great way to bounce ideas, brainstorm solutions and get informal feedback.
+
+### Stakeholder testing
+
+> This phase involves clients and non-designers, allowing you to include the opinions of a broader range of people. It can be uncomfortable, but it's an opportunity for valuable feedback, as most probably see the design from a new perspective.
+
+Remember that feedback is your biggest asset in the design process. It allows for a fresh perspective on the work, a chance for you to look at it in a new light and for improvements to be made. There is a lot to be learnt from testing and feedback processes; be open to listening.
+
+---
+
+## Activities
+
+### Activity 1
+
+> 📚 **READ**
+>
+> Article: [What is Prototyping?](https://www.interaction-design.org/literature/topics/prototyping) (1 hour)
+
+### Activity 2
+
+> 🎥 **WATCH**
+>
+> Video: [Rapid Prototyping in UX design - Importance of Prototyping](https://www.youtube.com/watch?v=Krw_GQfoYG0) (2m 25s)
+
+### Activity 3
+
+> 🎥 **WATCH**
+>
+> Video: [UX Design: 6 Paper Prototyping](https://www.linkedin.com/learning/ux-design-6-paper-prototyping/benefits-of-paper-prototyping?u=43268076) (24m)
+
+---
+
+## Lesson Task
+
+### Brief
+
+Create a paper prototype of the home page for a dog walking website. Remember to keep it simple and focus on the interaction rather than the design's finer details. Colours, typography, etc., will come later.
+
+A paper prototype aims to give the user something physical to use and play around with. A paper prototype is different from a wireframe or a mockup because those are 2D, whereas a paper prototype is 3D and much more physically engaging.
+
+Instead of jumping straight into a wireframe design of the site created on your computer, you can try using a paper prototype to test assumptions about how the user interacts with the product. One advantage of paper prototyping is that it's much cheaper to make and build than a coded site that needs to be re-coded. You can move elements around on the page or create new elements in a few moments.
+
+You create the paper prototypes to be simple illustrations of the sorts of elements you would like to include in your interface. They don't need to be smart drawings. A more straightforward design often works best.
+
+When you have a primary paper interface, please take it to users for usability testing and see how they interact with it. Because it looks like it is in such an early stage of development, users will be quick to provide honest feedback, and it helps them generate good 'what if' ideas. What if you put a button here? What if you only had one form on the page?
+
+Paper prototyping focuses users and designers on keeping things simple and on the broader concepts rather than specific details.
+
+### Level 1 Process
+
+Draw, cut, paste, and do whatever you'd like to the page. Ensure you keep the design in a physical form so that users can interact with it.
+
+Take the design to a user(s) and get them to interact with it. Listen for feedback, ask them to play around with the design and 'click' items to see what they do. You'll get quick feedback before you've spent time coding anything. Invite suggestions for changes and make them while you're in the session.
+
+### Level 2 Process
+
+Add other pages like product lists or the product pages themselves to your paper prototype.
diff --git a/packages/lms/src/routes/content/feu1/design/module-4/intro-wireframes/+page.md b/packages/lms/src/routes/content/feu1/design/module-4/intro-wireframes/+page.md
new file mode 100644
index 0000000..20c1b0b
--- /dev/null
+++ b/packages/lms/src/routes/content/feu1/design/module-4/intro-wireframes/+page.md
@@ -0,0 +1,166 @@
+---
+title: Introduction to wireframes
+tags:
+  - Design
+type: Lesson
+---
+
+## Introduction
+
+In this lesson, we'll discuss wireframes and how it helps other team members visualise what could be placed on a page and what should be avoided. It's also a great tool to use for feedback and to brainstorm ideas.
+
+## What is a wireframe?
+
+As you continue the journey to becoming a front-end developer, you will hear the word wireframing quite often. A wireframe is the first step a designer takes to put an idea to paper. It makes sense that wireframes are also called blueprints, and just like a blueprint, a wireframe provides the designer with guidance.
+
+Not only are wireframes there to get the structure and layout of a page in order, but it is an excellent way to organise ideas and test new ones. It also allows designers to see how users can interact with an interface beforehand.
+
+![Hand-drawn wireframe](../images/design-1/Wireframes-intro/Introductiontowireframes-1.jpeg\) _Figure 1: An example of a hand-drawn wireframe (Source: careerfoundry.com)_
+
+### Purpose of a wireframe
+
+Wireframes are static representations of the design, and should essentially answer the following questions:
+
+1. How will the structure and layout of the page look?
+
+2. What information will be displayed on the page?
+
+3. How will the interface function?
+
+Simply put, the wireframing process is essential as it is the foundation of a design and helps map out the information architecture, the user flow and overall structure of a page.
+
+![A basic wireframe](../images/design-1/Wireframes-intro/Introductiontowireframes-2.jpeg\) _Figure 2: A basic wireframe created by using Balsamiq (Source: balsamiq.com)_
+
+### Wireframes and the design process
+
+Wireframes are created early in the design process before designers start thinking about an interface's visual elements. This allows designers to make significant changes early on in the process and not later when the design is close to being finalised.
+
+![Wireframes process](../images/design-1/Wireframes-intro/Introductiontowireframes-3.jpeg\) _Figure 3: Wireframes and the design process_
+
+### How does a wireframe look?
+
+Wireframes should be kept simple and to the point, as the essential purpose is not to communicate the site's visual characteristics but instead the structure and layout of the interface. Wireframes are a simple representation of a design, and as such, normally consist of black, white and grey basic layout designs. For example, a block with a cross can show image placement, and grey lines can represent written text.
+
+![Wireframe elements](../images/design-1/Wireframes-intro/Introductiontowireframes-4.jpeg\) _Figure 4: Wireframe elements_
+
+## Types of wireframes
+
+There are three different types of wireframes:
+
+1. Low-fidelity.
+
+2. Mid-fidelity.
+
+3. High-fidelity.
+
+The difference between these three types is mainly based on each type of wireframe's level of detail.
+
+_**Low-fidelity wireframes**_
+
+Low-fidelity wireframes can be seen as the starting blocks of the design process. The designer takes an idea and sketches it out to see if it makes sense and works for the client. Low-fidelity wireframes don't have to be perfect; they only need to communicate the concept.
+
+Another thing that makes low fidelity wireframes so useful is that it creates conversations around the overall layout, the navigation of the interface and outlining the user's flow.
+
+![Low-fidelity wireframe](../images/design-1/Wireframes-intro/Introductiontowireframes-5.png\) _Figure 5: An example of low-fidelity wireframes (Source: uxdesign.cc)_
+
+_**Mid-fidelity wireframes**_
+
+Mid-fidelity wireframes are a bit more detailed than low-fidelity wireframes but still reasonably simple. Mid-fidelity wireframes should show an exact, detailed representation of the overall layout of the website or app.
+
+Designers can add text weights to highlight headings and paragraph text and boxes that represent images. It also assists in visualising the hierarchy of the elements in the design. Mid-fidelity wireframes are digitally created using tools such as Balsamiq and Figma.
+
+![Mid-fidelity wireframe](../images/design-1/Wireframes-intro/Introductiontowireframes-6.png\) _Figure 6: A mid-fidelity wireframe of the Emov app (Source: medium.com)_
+
+_**High-fidelity wireframes**_
+
+High-fidelity wireframes should communicate the interface's look and feel. These wireframes are only employed much later in the design process when each page's structure and layout has been decided. At this stage, the user flow and information architecture of the interface have already been determined.
+
+Here placeholder text like Lorem Ipsum is replaced with relevant written content, and instead of a box indicating an image, real images are used. Other visual elements such as colour, typography and the company's branding elements are also added.
+
+![Wireframe examples](../images/design-1/Wireframes-intro/Introductiontowireframes-7.png\) _Figure 7: An example of low-fidelity, medium-fidelity and high-fidelity wireframes_
+
+## Advantages
+
+There are five advantages of wireframing:
+
+### Clarity
+
+> Wireframes bring transparency to interface design. It allows designers to think clearly about the site's interactions and layout needs and assist them in coming up with solutions to problems.
+
+### Keep the client's attention
+
+> Wireframes are an excellent tool to get the client to focus on the site's structure, layout and functionality. Because of its simplicity, the client will not be bothered by other elements such as colour and images. These elements are reserved for later in the design process.
+
+### Communication to the team
+
+> A well-designed wireframe can communicate your creative ideas to the team. It also serves as a useful brainstorming tool between designers and developers, and other stakeholders.
+
+### Feedback
+
+> Wireframes allow for feedback from the client and team members. It also ensures that the primary message of a website is effectively delivered.
+
+### Responsiveness
+
+> A good wireframe can give developers a clear idea of what elements should be coded, how the overall layout needs to adjust from big screens to smaller screens, what content is essential, how developers should implement the overall hierarchy and if navigation on smaller screens is sufficient.
+
+---
+
+## Activities
+
+### Activity 1
+
+> 🎥 **WATCH**
+>
+> Video: [What are Wireframes - Balsamiq Wireframing Academy](https://www.youtube.com/watch?v=I2N7Vl6IOVc&feature=emb_logo) (4m 17s)
+
+### Activity 2
+
+> 🎥 **WATCH**
+>
+> Video: [Wireframing best practices](https://www.linkedin.com/learning/practical-ux-weekly-season-one/wireframing-best-practices?u=43268076) (5m 57s)
+
+### Activity 3
+
+> 🎥 **WATCH**
+>
+> Video: [Tips on Sketching Your Wireframes](https://www.youtube.com/watch?v=ykHClgOUUj8) (4m 45s)
+
+### Activity 4
+
+> 🎥 **WATCH**
+>
+> Video: [How to wireframe a website](https://www.youtube.com/watch?v=2hQA1ZsGAH8) (13m 50s)
+
+### Activity 5
+
+> 📚 **READ**
+>
+> Article: [Website and App wireframes for creating a solid UX Design](https://www.invisionapp.com/inside-design/wireframe-examples/)
+
+---
+
+## Lesson Task
+
+### Brief
+
+For this lesson task, you will be designing low fidelity wireframes for a fitness app called 'Fit for Life'. Fit for Life specialises in providing users with exercise routines, tips on cooking healthy meals and connecting them with an online community with similar goals. The target audience is aged between 20 and 40 and is serious about fitness and healthy living.
+
+The different exercise routines can be broken down into the following categories:
+
+- Building muscle.
+
+- Fat loss.
+
+- Triathlon training.
+
+Users should sign up and buy any exercise routine that fits their fitness goals. Users also get a free diet plan when they join.
+
+### Level 1 Process
+
+- Start thinking about the structure of the wireframe. What will fulfil the user's need? Make a list of essential points that should be included. Things like purchase info, bonus info, join now CTA and so forth.
+
+- Get a paper and pen and start drawing your low fidelity prototype.
+
+- Don't stick to one wireframe. Explore ideas and think of creative ways to structure your pages. Try to come up with three different approaches.
+
+- Make sure your wireframe is suitable for both desktop and mobile devices.
diff --git a/packages/lms/src/routes/content/feu1/html-css/+page.md b/packages/lms/src/routes/content/feu1/html-css/+page.md
new file mode 100644
index 0000000..9992ca8
--- /dev/null
+++ b/packages/lms/src/routes/content/feu1/html-css/+page.md
@@ -0,0 +1,6 @@
+---
+title: HTML and CSS
+tags:
+type: Course
+previous: Design
+---
diff --git a/packages/lms/src/routes/content/feu1/html-css/ca/+page.md b/packages/lms/src/routes/content/feu1/html-css/ca/+page.md
new file mode 100644
index 0000000..6e58292
--- /dev/null
+++ b/packages/lms/src/routes/content/feu1/html-css/ca/+page.md
@@ -0,0 +1,45 @@
+---
+title: Course Assignment
+tags:
+  - HTML and CSS
+type: Assessment
+---
+
+## Goal
+
+To put into practice everything you’ve learned about HTML and CSS over this course.
+
+## Brief
+
+You must deliver a properly functioning, responsive website for the assignment brief you chose in Design 1.
+
+The site needs to have every page listed in the site architecture on your chosen brief. Certain functionality requiring JavaScript can be mimicked; for example, a login page could link across from the ‘Sign in’ button.
+
+- The HTML should be semantic and neat.
+- The CSS should follow the DRY principle and be easy to read.
+- The website should be responsive and look good at every screen size with no horizontal scrollbars. Use Flexbox and CSS Grids where appropriate. Please do not use a CSS framework like Bootstrap; we want to see that you can build responsive sites without the help of a framework.
+- The site should be WCAG compliant, and accessibility should be taken into account.
+- Each page should have a unique `<meta name="description">`, `<title>`, and `<h1>`.
+- You should not use copied code in your submission. All code submitted must be written by yourself. You may use external sources to show you how to achieve specific effects, which should be included in your report.
+
+## Level 1 Process
+
+1. Look at your prototype and consider how the elements will move across the different devices. Which elements move where on different devices?
+2. Write your HTML and CSS, ensuring your HTML is semantic and bug-free and your CSS follows DRY principles.
+3. Use media queries to make your website responsive across screen sizes.
+4. Test your website using your developer tools and also test on major browsers and various devices.
+5. Validate your code using the <a href="https://validator.w3.org/" target="_blank">Markup Validation Service</a>
+6. Use the [WAVE Web Accessibility Evaluation Tools](https://wave.webaim.org/) to test that your site matches best practices for accessibility
+7. Go through the [marking criteria](marking-criteria.html) and ensure your website meets each criteria.
+8. When your site is ready, post it on the Moodle forum for peer review.
+9. Look at the work of your peers and write a review for them.
+10. In the forth week of the course, your coach will conduct a pre-delivery review of your work. Note: it does not need to be complete.
+11. Make adjustments based on their feedback.
+12. Submit on Moodle.
+
+## Submission
+
+You need to submit the following:
+
+- A link to your GitHub repository. Your last commit must be before your deadline.
+- A link to your website, live on Netlify.
diff --git a/packages/lms/src/routes/content/feu1/html-css/ca/marking-criteria/+page.md b/packages/lms/src/routes/content/feu1/html-css/ca/marking-criteria/+page.md
new file mode 100644
index 0000000..92027db
--- /dev/null
+++ b/packages/lms/src/routes/content/feu1/html-css/ca/marking-criteria/+page.md
@@ -0,0 +1,128 @@
+---
+title: Marking Criteria
+tags:
+  - HTML and CSS
+type: Lesson
+---
+
+<table style="max-width: 100%">
+  <tr>
+    <th>Assessment Criteria</th>
+    <th>Learning Outcomes</th>
+    <th>Completed</th>
+  </tr>
+  <tr>
+    <td>Responsive
+      <ul>
+        <li>The website is responsive across screen sizes.</li>
+        <li>The website works on major browsers and across major devices.</li>
+      </ul>
+    </td>
+    <td>
+      <ul>
+        <li>has broad knowledge of the concepts responsive, adaptive, flow design and CSS Media Queries that are used to build web solutions that function independent of screen resolutions </li>
+        <li>has knowledge of the tool Chrome DevTools used for testing websites across different platforms and operating systems. </li>
+        <li>can apply knowledge relating to HTML, CSS and CSS Media Queries to develop functional and user-friendly web solutions </li>
+        <li>masters Chrome DevTools for testing websites across different platforms and operating systems </li>
+        <li>can apply techniques and tools to perform simple user tests to map visual and technical deficiencies </li>
+      </ul>
+    </td>
+    <td>
+      <input type="checkbox">
+    </td>
+  </tr>
+  <tr>
+    <td>Bug-free, neat and well written code
+      <ul>
+        <li>Semantic HTML5 elements are used where approriate</li>
+        <li>The HTML is bug-free</li>
+        <li>No inline styling</li>
+        <li>The CSS follows DRY principles</li>
+        <li>The HTML and CSS are formatted neatly</li>
+        <li>Each page has a unique title</li>
+        <li>Each page has a unique meta description</li>
+        <li>Images are below 200kb to ensure faster loading time</li>
+      </ul>
+    </td>
+    <td>
+      <ul>
+        <li>has broad knowledge of concepts and processes that are used in web development with HTML and CSS </li>
+        <li>has knowledge of tools that are used to develop websites based on HTML and CSS </li>
+        <li>has knowledge of processes and tools that are used for validating websites </li>
+        <li>can update his/her vocational knowledge of new developments and techniques for web development with HTML and CSS </li>
+        <li>has knowledge of the historical development of and is familiar with previous releases of HTML and CSS </li>
+        <li>masters industry-relevant tools and software for planning, develop and validate web solutions built with HTML and CSS </li>
+        <li>can find information and material that is relevant for developing websites with HTML and CSS</li>
+        <li>can carry out visual and technical web solutions based on HTML and CSS and complete fully functional projects from start to finish </li>
+        <li>can build relations with his/her peers, graphic designers, content developers and participate in interdisciplinary collaboration </li>
+      </ul>
+    </td>
+    <td>
+      <input type="checkbox">
+    </td>
+  </tr>
+  <tr>
+    <td>Appeal of website and ease of navigation
+      <ul>
+        <li>The website has no broken links</li>
+        <li>Navigation between pages is clear</li>
+        <li>The website appeals to the target audience.</li>
+      </ul>
+    </td>
+    <td>
+      <ul>
+        <li>has insight into quality requirements for the logic and aesthetic structure for websites and interactive products </li>
+        <li>understands the importance of following procedures for universal design and good practice for coding </li>
+        <li>can apply vocational knowledge to develop websites in accordance with ethical demands and guidelines for universal design </li>
+        <li>understands the ethical principles used in the industry for universal design of ICT solutions </li>
+      </ul>
+    </td>
+    <td>
+      <input type="checkbox">
+    </td>
+  </tr>
+  <tr>
+    <td>WCAG friendly
+      <ul>
+        <li>Images have alt text.</li>
+        <li>Anchor tags are used to link pages together.</li>
+        <li>Semantic HTML is used to ensure accessibility with screen readers.</li>
+      </ul>
+    </td>
+    <td>
+      <ul>
+        <li>has broad insight into relevant regulations and guidelines for universal design of ICT solutions and the WCAG standard </li>
+        <li>can apply knowledge of the WCAG standard </li>
+        <li>understands the ethical principles related to the development of web solutions and services </li>
+        <li>has developed an ethical attitude in relation to developing HTML and CSS websites and can carry out the development of user-friendly websites based on HTML and CSS, the needs of selected target groups or client briefs</li>
+      </ul>
+    </td>
+    <td>
+      <input type="checkbox">
+    </td>
+  </tr>
+   <tr>
+    <td colspan="2">
+    </td>
+    <td class="grade">
+    </td>
+  </tr>
+</table>
+
+<script>
+  const checkboxes = document.querySelectorAll("input[type='checkbox']");
+  const grade = document.querySelector(".grade");
+  let criteriaPassed = 0;
+  checkboxes.forEach(item => item.onclick = function(e){
+    if(e.target.checked === true){
+      criteriaPassed++;
+      if(criteriaPassed === checkboxes.length){
+        grade.innerHTML = "Passed";
+      }
+    }
+    else {
+      criteriaPassed--;
+      grade.innerHTML = "";
+    }
+  })
+</script>
diff --git a/packages/lms/src/routes/content/feu1/html-css/module-1/+page.md b/packages/lms/src/routes/content/feu1/html-css/module-1/+page.md
new file mode 100644
index 0000000..84ee1ab
--- /dev/null
+++ b/packages/lms/src/routes/content/feu1/html-css/module-1/+page.md
@@ -0,0 +1,36 @@
+---
+title: Module 1
+tags:
+  - HTML and CSS
+type: Module
+---
+
+The three pillars of web development are:
+
+- HTML for writing content
+- CSS for styling the content
+- JavaScript for making it interactive
+
+In this course, we will be looking at HTML and CSS.
+
+Web development is constantly evolving, and new techniques for creating ever-more complex layouts are being developed. You must have the core principles in place under the belt to know how to structure your HTML semantically and write CSS that follows the DRY (Don’t Repeat Yourself) principle.
+
+There is a lot to learn, especially with CSS. We won’t be able to cover every possible CSS property in these modules, but they will give you the basis from which to work and be able to find the specific property you need for your web design.
+
+By the end of this course, you will need to have built the website you designed in Design 1. The daily tasks are there to keep you on track to deliver the website by the time you have finished. Please message your tutors if you want feedback on your site as you are developing it.
+
+If anything is unclear, check your progression plan and/or contact a tutor on the forums.
+
+## Module Objectives
+
+*I can:*
+
+- Use VS Code to write HTML and CSS
+- Write semantic HTML
+- Format your code to be easy to read
+- Maintain a neat folder structure
+- Link to pages and files
+- Select elements using CSS
+- Use CSS specificity and inheritance
+- Style text with fonts and sizing
+- Load a non-web safe font to the browser
diff --git a/packages/lms/src/routes/content/feu1/html-css/module-1/file-management/+page.md b/packages/lms/src/routes/content/feu1/html-css/module-1/file-management/+page.md
new file mode 100644
index 0000000..c34b215
--- /dev/null
+++ b/packages/lms/src/routes/content/feu1/html-css/module-1/file-management/+page.md
@@ -0,0 +1,111 @@
+---
+title: File Management
+tags:
+  - HTML and CSS
+type: Lesson
+---
+
+## Introduction
+
+In this lesson, we look at how to manage and organise files to make development as easy as possible.
+
+## Organising files
+
+Using a clear folder structure and proper naming conventions is good to make development as easy as possible. Create a folder on your computer for each project you are working on. We can add files and additional folders to this empty folder. The base folder for your project is called the ‘root’ folder. We can keep our HTML files for smaller sites in the root folder. Additional files, such as images, CSS files, and JavaScript files, can all be placed into separate folders so that they are easier to manage.
+
+Here is an example.
+
+![Files](../images/htmlcss/1-2-1.png)
+
+### Naming
+
+The home page for a website should always be called `index.html`. The server looks for a file called `index.html` to serve as the home page. If a user lands on `www.website.com`, they will see `www.website.com/index.html`.
+
+Your other HTML files should have logical names. The contact page should be `contact.html`, the about page `about.html` and so on.
+
+### Linking pages together
+
+A website is a 'web' of connected or 'hyperlinked' files. An anchor tag is used to link one file to another – it looks like this: `<a href="about.html">`About`</a>`
+
+It's important to note the use of the [HTML attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes) `href` to set where the link is supposed to go to. It’s also important to see how the text is hyperlinked and enclosed inside the anchor tags.
+
+### File paths
+
+We need to know the file path from A to B to link files together. A is the file we are currently working on, and B is the one we want to connect with.
+
+- In the above example, `about.html` is in the same folder as the page we are working on.
+- To reference a file in a subfolder, write the folder name followed by the file name: `<img src="images/logo.jpg">`
+- If there was a folder inside 'images' called 'branding', and the logo was in that folder, then we'd use: `<img src="images/branding/logo.jpg">`
+- These first three examples show how to move files down into directories. If you need to access a file in a folder above the one in which you are working, then you'd use two dots `../`: `<a href="../splashpage.html">`Splash page`</a>`
+
+These ways of linking pages together are all relative file paths, and for any files on your server, it is best to use relative file paths. One of the most significant advantages to this is that you will not need to change any links when uploading your files from your computer to your web host and can thus upload the root folder directly.
+
+An absolute file path is a URL just like you'd see in your browser tab, and should be used to link to content on another server that you don't control.
+
+```html
+<a href="http://www.website.com/latest.html">link</a>
+```
+
+### Linking to Sections on an HTML page
+
+Sometimes we don’t want to link to a different HTML page but rather a different section on the HTML page the user is on.
+
+To do this, we set an ID on the HTML element we want the user to go to
+
+```html
+<article id="article"></article>
+```
+
+And we add a link to the article.
+
+```html
+<a href="#article">View article</a>
+```
+
+The following video shows how to link to sections on an HTML page and use the `scroll-behavior: smooth` CSS property to scroll the user to the section they’ve clicked on.
+
+<iframe src="https://player.vimeo.com/video/545883051?h=950823fe6a&amp;badge=0&amp;autopause=0&amp;player_id=0&amp;app_id=58479" height="500" frameborder="0" allow="autoplay; fullscreen; picture-in-picture" allowfullscreen title="Linking to IDs from anchor tags"></iframe>
+
+## Images
+
+Images are added to HTML files using the `<img>` tag. One important thing to note about the `<img>` tag is that it is self-closing. Most HTML tags have an opening tag and a closing tag, but the tag is self-closing for elements where content cannot be nested inside.
+
+```html
+<img src="images/picnic.jpg" alt="A family having a picnic in a park" />
+```
+
+### Alt text
+
+- Alt text is added to an image tag to explain something about the image.
+- It is vital for people who use assistive technologies to know what the image is about. For example, if you are visually impaired, your assistive technology will read out the alt text.
+- Because the alt text is so important, it should be descriptive and clear.
+- Alt text is also important for SEO, so search engines know what the image is about and how it relates to the content.
+
+### Images as content
+
+- Images added into the HTML should be added because they are part of the content.
+- If the image is for styling, then it should be added using CSS. We will get onto adding images with CSS later in the course, but for now, it's important to understand that the images you add to HTML should add to or support the content.
+
+### Image sizing
+
+- Image sizing should be handled using CSS rather than inline HTML.
+- If HTML is purely used for content, and CSS for styling, then their sizing is best kept separate. We will get onto image sizing in CSS.
+
+### Image file sizes
+
+- Page load times should be as short as possible to avoid users getting annoyed and leaving.
+- One area that can make a big difference to page load times is image sizes. The smaller the images, the faster the load time should be. On this programme, we recommend that image sizes should be no more than 200kb.
+- To keep image sizes down, you can use a format like JPG, which has good compression. PNG is useful for things like logos, but if you're adding a picture, then JPG is usually best.
+- You can also reduce the dimensions of the image. See how big the image needs to be on the page. If the largest image is 500px wide, then resize your image to be 500px wide. If you need the image to be full width, you should be able to resize the image to around 1600px; adjust the quality, and still keep it under 200kb.
+- Photoshop has excellent image compression and should be used if possible. An alternative to Photoshop is a free application such as [Paint.NET](https://www.getpaint.net/).
+- For bulk resizing, consider using a tool called [Faststone Photo Resizer](https://www.faststone.org/FSResizerDetail.htm).
+
+---
+
+## Lesson Task
+
+### Brief
+
+There are practice questions in the master branch of [this repo](https://github.com/Noroff-Education/lesson-task-htmlcss-module1-lesson2).
+
+Attempt the answers before checking them against the answers in the [answers branch](https://github.com/Noroff-Education/lesson-task-htmlcss-module1-lesson2/tree/answers) of the repo.
diff --git a/packages/lms/src/routes/content/feu1/html-css/module-1/fonts/+page.md b/packages/lms/src/routes/content/feu1/html-css/module-1/fonts/+page.md
new file mode 100644
index 0000000..e4e0f2b
--- /dev/null
+++ b/packages/lms/src/routes/content/feu1/html-css/module-1/fonts/+page.md
@@ -0,0 +1,167 @@
+---
+title: Fonts
+tags:
+  - HTML and CSS
+type: Lesson
+---
+
+## Introduction
+
+Most websites rely on text to communicate with their users. It is, therefore, important to use strong fonts that you’re confident will load correctly.
+
+By default, browsers apply <i>Times New Roman</i> to text on the web. You should avoid using Times New Roman. It has been overused and makes it seem like your font hasn’t loaded correctly. You can override the default base font by choosing a font and setting it on the body or HTML element.
+
+## Font-family
+
+To set a font, we need to use the property `font-family` like so:
+
+```css
+p {
+  font-family: Verdana, sans-serif;
+}
+```
+
+The CSS written above applies the font, `Verdana`, to all paragraphs on the page, but if the browser doesn’t have the first-choice of Verdana (maybe the user deleted the font file from their computer), the browser will display whatever the default sans-serif font is. You should always include a generic family name, for example `serif`, `sans-serif`, `monospace` or `cursive`.
+
+You can have multiple fallbacks when applying a font like so:
+
+```css
+p {
+  font-family: Verdana, sans-serif, serif, monospace;
+}
+```
+
+In this case, we are asking the browser to load `“Open Sans”` (note the quotation marks because it’s two words), but if you don’t have `“Open Sans”`, try `Tahoma`. If you don’t have `Tahoma`, you can try `Verdana` and finally load the generic `sans-serif` for the browser.
+
+> **📄 DOCUMENTATION**
+>
+> For further learning, please check out the MDN docs: [font-family](https://developer.mozilla.org/en-US/docs/Web/CSS/font-family).
+
+### Web Safe Fonts
+
+`Verdana` is considered a [web-safe font](https://developer.mozilla.org/en-US/docs/Learn/CSS/Styling_text/Fundamentals#web_safe_fonts). A web-safe font is a font that is installed on (almost) every device, and using it will mean that you can be very sure that a user will have that font.
+
+Web safe fonts include `Arial`, `Verdana`, `Tahoma`, `Georgia`, and `Times New Roman`. You can use [CSS Font Stack](https://www.cssfontstack.com/) to see how widely available a specific font is.
+
+## Loading Fonts to the Browser
+
+You will probably have recognised most of the fonts considered to be web-safe, and this is because they are popular on the web and, therefore, well-used. In most cases, it’s better for your design if you don’t have overused fonts on your website and can use a font better suited to the specific brand for which you are developing.
+
+To ensure our font works on a user’s computer, we need to load the font to the browser. Click on the two tabs below for more information.
+
+### @font-face
+
+We use the `@font-face` rule to load a font to the browser. The font file can be local to the stylesheet from which it is being called or on another server.
+
+The important things to get right are:
+
+- following the syntax
+- ensuring the file path is correct
+- to set the font before you use it
+
+Thus, having the `@font-face` rule at the top of your stylesheet is always a good idea.
+
+```css
+@font-face {
+  font-family: 'Open Sans';
+  src: url('/fonts/OpenSans-Regular-webfont.woff2') format('woff2'), url('/fonts/OpenSans-Regular-webfont.woff') format('woff');
+}
+
+p {
+  font-family: 'Open Sans', Tahoma, Verdana, sans-serif;
+}
+```
+
+We use the `font-family` property to set the font’s name (note that this isn’t applying the font to any elements, it’s simply setting the font's name, which we can use). Secondly, we set the `src` to link to the font file and say what format the font file is.
+
+> **📄 DOCUMENTATION**
+>
+> For further learning, please check out the MDN docs: [@font-face](https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face).
+
+### Google fonts and external stylesheets
+
+We can also load fonts to the browser using stylesheets which have pre-written `@font-face` rules for us to use. Google Fonts is a popular resource for fonts, and they give us the stylesheet we can link to from our HTML files to load the font to the browser.
+
+![Google Fonts](../images/htmlcss/1-4-1.jpg)
+
+When adding these external stylesheets to your HTML, placing them above your stylesheet is crucial. Otherwise, you will reference a font in your stylesheet before the browser has loaded the font.
+
+## Font-sizes
+
+Font sizes are managed using the `font-size` property. By default, your browser sets font sizes on headings to run in order; h1 has the largest font size, h2 the second largest and so on.
+
+### Px
+
+- `px` sets an absolute font size, and this size will stay precisely that pixel size regardless of screen size or other changes.
+- It was a popular way of setting font sizes but wasn’t very inclusive because users with poor eyesight couldn’t easily adjust the font size using their assistive technology.
+
+### Em
+
+- `em` is a dynamic way of setting font sizes, and it adjusts based on the pixel size of the element it’s used on.
+- By default, your browser uses 16px for a font size, and so 1em = 16px.
+- The code below sets the h2 to be 2em, which by default would be 32px. You can also use decimal numbers so that 0.5em would be 8px.
+- What is especially useful about `em`s is that if a user needed the text to be larger, they could change the default size of their browser’s text, and all font sizes would adjust.
+
+```css
+h2 {
+  font-size: 2em;
+}
+```
+
+### Compounding
+
+- One issue with `em`s is that they are relative to their parent element, but if you have the same parent element used twice, it can double up.
+- As you can see below, a `span` element is nested inside another `span`element. If we set the `span`element to be 1.5em (and the browser default for the font was 16px), then the outer span would be 24px (16px x 1.5em). The inner span would then be calculated based on the parent element being 24px, and so the inner span would be 36px (24px x 1.5em).
+
+```html
+<span>
+  This text is
+  <span>large</span>
+</span>
+```
+
+```css
+span {
+  font-size: 1.5em;
+}
+```
+
+<div class="compounding">
+<h4>Result</h4>
+<style>.compounding span {font-size: 1.5em;}</style>
+<span>This text is <span>large</span></span>
+</div>
+
+### Rem
+
+- To get around the issue of compounding, `rem` sizes were invented.
+- `rem` is calculated based on the `<html>` element and not the parent element.
+- Using this code below, we set the outer and nested `span` element to be 24px.
+
+```css
+span {
+  font-size: 1.5rem;
+}
+```
+
+> **📄 DOCUMENTATION**
+>
+> For further learning, please check out the MDN docs: [Lengths](https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Values_and_units#lengths).
+
+---
+
+## Activities
+
+> 💻 WATCH
+>
+> [This tutorial video on the @font-face rule.](https://scrimba.com/scrim/cNq6q8hq?pl=paaBbTa) (4m)
+
+---
+
+## Lesson Task
+
+### Brief
+
+There are practice questions in the master branch of [this repo](https://github.com/Noroff-Education/lesson-task-htmlcss-module1-lesson4).
+
+Attempt the answers before checking them against the answers in the [answers branch](https://github.com/Noroff-Education/lesson-task-htmlcss-module1-lesson4/tree/answers) of the repo.
diff --git a/packages/lms/src/routes/content/feu1/html-css/module-1/intro-css/+page.md b/packages/lms/src/routes/content/feu1/html-css/module-1/intro-css/+page.md
new file mode 100644
index 0000000..0452172
--- /dev/null
+++ b/packages/lms/src/routes/content/feu1/html-css/module-1/intro-css/+page.md
@@ -0,0 +1,387 @@
+---
+title: Introduction to CSS
+tags:
+  - HTML and CSS
+type: Lesson
+---
+
+## Introduction
+
+While HTML is used for creating the content of web pages, CSS is used to style web pages. One of the most compelling demonstrations of this is a website called [CSS Zen Garden](http://www.csszengarden.com/). You may apply different CSS styles to fixed HTML content on this site. It is impressive how the entire layout and look of the page can be transformed by changing the CSS applied to HTML content (the HTML stays the same).
+
+## Create a stylesheet and link to HTML
+
+To add styles to our HTML pages, we need to create a `.css` file and link it to our HTML files. To connect a `.css` file to a `.html` file we use the `<link>` tag in our HTML file. The tag we’d use looks like this:  
+`<link href="css/styles.css" rel="stylesheet">` and should be placed in within the `<head>` element.
+
+The `href` attribute tells the browser where to look for the stylesheet. In this case, look inside the “css” folder for a file called `styles.css`.
+
+If you clone the repo to your computer, you will see an `index.html` file in the root folder and a `styles.css` file inside the “css” folder. If you open the `index.html` file in your browser, you will see the background has been turned orange by a style set in the CSS.
+
+> 💎 RESOURCE
+>
+> We’ve created a simple example of linking a CSS file to an HTML file in [this repo on GitHub](https://github.com/NoroffFEU/html-css-module1-lesson3).
+
+> **📄 DOCUMENTATION**
+>
+> Documentation on how to clone a git repository: [Cloning a repository](https://docs.github.com/en/repositories/creating-and-managing-repositories/cloning-a-repository).
+
+## The Basic Syntax
+
+To style elements, you need to use a specific syntax.
+
+Here is an example:
+
+```css
+h1 {
+  font-size: 20px;
+  color: green;
+}
+```
+
+- First, we state which element(s) we want to style using a _selector_. In this case, the `h1`.
+- Then, we use curly braces to group the styles we’re applying to that selector. In this case, we’re setting the font size to 20px and the colour green.
+- After we’ve written each style rule, we close the line with a semi-colon, so the browser knows we’ve finished that rule.
+
+## Selectors
+
+We use [selectors](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors) to identify which element we want to style on the page.
+
+### Type
+
+The [type selector](https://developer.mozilla.org/en-US/docs/Web/CSS/Type_selectors), also called the element selector, is simply a way to select the HTML element using its HTML tag. It’s generally best to use a type selector if you want to change something specific about that HTML element. By default, the browser applies certain styles to your HTML, which might be useful depending on your design. For example, an anchor tag (`<a>`) is default styled blue and underlined. To change this, we could select all anchor tags using the following selector.
+
+The following styling changes the text colour and removes the underline.
+
+```css
+a {
+  color: green;
+  text-decoration: none;
+}
+```
+
+### Class
+
+Generally, the best way to style elements is by using a class. You can apply the same class to multiple elements across the page, which helps you reduce the amount of CSS you need to write. You can add classes to HTML elements using the `class` attribute like so:
+
+```html
+<section class="content">
+  <p>Lorem ipsum dolor sit amet.</p>
+</section>
+<section class="content highlighted">
+  <p>Sed quis cursus nunc, id fringilla purus.</p>
+</section>
+```
+
+We can then style the classes we've added to the HTML by referencing them in our CSS file by using a dot followed by the class name:
+
+```css
+.content {
+  font-family: 'Open Sans', Verdana, sans-serif;
+}
+
+.highlighted {
+  border: 2px dashed red;
+}
+```
+
+In the HTML example above, we applied the `.content` class to two `<sections>` elements and added a unique class called `.highlighted` to the second `<section>`. In this case, the second `<section>` will get the styles from the `.content` class and the `.highlighted` class, meaning that this HTML element will have the “Open-sans” font and a red, dashed border around itself.
+
+Learning how to combine class selectors is very useful, especially when working with JavaScript and CSS. You can use JavaScript to add and remove classes from an element. In the case of `<section class="content highlighted">`, the classes `.content` and `.highlighted` are interpreted by the browser as a _list_ of class names, hence called a _class list_.
+
+In the example above, adding and removing the `.highlighted` class from the `<section>` element adds and removes the red border around it. The action of adding and removing something is called toggling. We say that you are [toggling](https://developer.mozilla.org/en-US/docs/Web/API/DOMTokenList/toggle) a [class name](https://developer.mozilla.org/en-US/docs/Web/API/Element/className) from the [class list](https://developer.mozilla.org/en-US/docs/Web/API/Element/classList) of that element. You will learn more about manipulating HTML elements in this way once you start with JavaScript, but for now, it’s enough to remember that you can combine classes.
+
+Naming classes in a clear manner is essential. Giving an introductory paragraph in a header, the class of `intro` is much more meaningful than `p1`. Remember that other developers usually need to read and understand your code, so make it as clear as possible.
+
+> ℹ️ **INFO**
+>
+> Note: having single-purpose classes (utility classes), like adding a border to an element, is used in a design approach called _utility-first_. You can read more about the utility-first approach [here](https://medium.com/@sascha.wolff/utility-first-css-ridiculously-fast-front-end-development-for-almost-every-design-503130d8fefc).
+
+> **📄 DOCUMENTATION**
+>
+> For further information, please check out the MDN docs: [Class selectors](https://developer.mozilla.org/en-US/docs/Web/CSS/Class_selectors).
+
+### ID
+
+The `id` is an HTML attribute that differs from the `class` attribute because its value needs to be unique. The example below shows that the two `<section>` elements share the class `.content` but don’t share the same id.
+
+```html
+<section id="first_section" class="content">
+  <p>Lorem ipsum dolor sit amet.</p>
+</section>
+<section id="second_section" class="content highlighted">
+  <p>Lorem ipsum dolor sit amet.</p>
+</section>
+```
+
+The above example shows how to set an HTML element’s `id`. In CSS, you select the specific id using the # symbol followed by the id value.
+
+```css
+#first_section {
+  background-color: red;
+}
+```
+
+> ℹ️ **INFO**
+>
+> Note: Generally, IDs are best used with JavaScript, where we want to be able to override styles applied by CSS easily.
+
+## Combining Selectors
+
+You can combine selectors.
+
+Take a look at the following HTML:
+
+```html
+<header>
+  <h1>Welcome to my shop</h1>
+  <nav>
+    <ul>
+      <li><a href="index.html">Home</a></li>
+      <li><a href="sale.html" class="sale">Shop</a></li>
+      <li><a href="contact.html">Contact</a></li>
+    </ul>
+  </nav>
+</header>
+<main>
+  <h2>We have many great products</h2>
+  <p>
+    Here are the main reasons to
+    <span class="sale">shop</span>
+    with us:
+  </p>
+  <ul>
+    <li>Trustworthy</li>
+    <li>Helpful</li>
+    <li>Good quality</li>
+  </ul>
+  <p>We hope you find what you're looking for.</p>
+</main>
+```
+
+It’s a good idea to set a base font for the whole body element, and we accomplish this by using the _type selector_ for the `<body>` element. In the example below, you can see that we select an element or tag by simply writing the tag name without any symbols before it.
+
+```css
+body {
+  font-family: 'Nunito Sans', sans-serif;
+}
+```
+
+To set the `font-family` CSS property on the headings, we could select them individually like so:
+
+```css
+h1 {
+  font-family: 'Playfair Display', sans-serif;
+}
+
+h2 {
+  font-family: 'Playfair Display', sans-serif;
+}
+```
+
+However, this is repetitive.
+
+We try to follow the [DRY Principle](https://en.wikipedia.org/wiki/Don%27t_repeat_yourself) (Don’t Repeat Yourself) in CSS. Using the DRY principle is key to writing good CSS and helps us to write CSS that is as concise as possible. Therefore, instead of writing them twice, we can use a comma to combine the styles:
+
+```css
+h1,
+h2 {
+  font-family: 'Playfair Display', sans-serif;
+}
+```
+
+Let’s say we wanted to style all `<li>` elements specifically in the navigation to be in a row rather than a column. We couldn’t use `li {display: inline-block;}` because this would also affect the list items in the `<main>` element. What we could do is use what is called a [descendant combinator](https://developer.mozilla.org/en-US/docs/Web/CSS/Descendant_combinator), which in this case would look like this: `nav li {}`.
+
+```css
+nav li {
+  display: inline-block;
+}
+```
+
+Using a descendant combinator, you target every list item that is a child of a `<nav>` element.
+
+Let’s also remove the `<ul>` padding that the browser automatically applies. Then we can set text color of the `<a>` tags in the navigation to black and remove the default underline styling for links. We can do this all using the descendant combinator as we did above.
+
+```css
+nav ul {
+  padding: 0px;
+}
+
+nav a {
+  color: #9d3400;
+  text-decoration: none;
+}
+```
+
+Let’s say we wanted to style all elements with the class of `.sale` to be red; we could simply target the class: `.sale {}`.
+
+```css
+.sale {
+  color: red;
+}
+```
+
+Due to multiple elements having the `.sale` class, the text colour would be red for all of these elements, including one of the `<a>` elements in the navigation. Let’s say we also want to add an underline to this `<a>` element. To specifically target the `<a>` with the class of `.sale` which is within the `<nav>`, we can do the following: `a.sale {}`. Here, we first use the type selector `a` to target all `<a>` elements. Then we can further target any `<a>` element with the `.sale` class by appending `.sale` to the end of the `a` selector.
+
+```css
+a.sale {
+  text-decoration: underline;
+}
+```
+
+A snippet from the HTML example above:
+
+```html
+<nav>
+  <ul>
+    <li><a href="index.html">Home</a></li>
+    <li><a href="sale.html" class="sale">Shop</a></li>
+    <li><a href="contact.html">Contact</a></li>
+  </ul>
+</nav>
+```
+
+> ℹ️ **INFO**
+>
+> Note that we don’t have a space between the selectors. If there were spacing, it would select every anchor tag with a child element with the class `.sale`, which in this case wouldn’t apply to any elements.
+
+Another combinator we can use is the [adjacent sibling combinator](https://developer.mozilla.org/en-US/docs/Web/CSS/Adjacent_sibling_combinator). This combinator selects elements next to each other in the HTML. To increase the font size of each paragraph that follows an h2, we could use the following: `h2 + p {}`.
+
+```css
+h2 + p {
+  font-size: 18px;
+}
+```
+
+When using the adjacent sibling combinator, you will only apply styling to elements that are siblings (ie. they share the same parent element).
+
+<iframe height="300" style="width: 100%;" scrolling="no" title="Untitled" src="https://codepen.io/mjphillip/embed/MWVEgYG?default-tab=html%2Cresult" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">
+  See the Pen <a href="https://codepen.io/mjphillip/pen/MWVEgYG">
+  Untitled</a> by MJ Phillip (<a href="https://codepen.io/mjphillip">@mjphillip</a>)
+  on <a href="https://codepen.io">CodePen</a>.
+</iframe>
+
+### Pseudo-classes
+
+We can also apply styling by using so-called pseudo-classes, which allow us to use keywords to target elements based on their state.
+
+Firstly, a brief explanation of what we mean by the _state_ of an element: a good example is when a user hovers with the cursor over an element. When this happens, the element is in what we call a [hover state](https://developer.mozilla.org/en-US/docs/Web/CSS/:hover). You can specify the styling of an element depending on its state. In the case of `:hover`, we could change the background colour of a button whenever it is in a hover state.
+
+Let’s say we wanted the navigation links to change when a user hovers over them. We could use the following code (notice the colon between `a` and the keyword `hover): nav a:hover {}`).
+
+```css
+nav a:hover {
+  text-decoration: underline;
+}
+```
+
+Other pseudo-classes include `:active` when a user is busy interacting with the element, for example, clicking a button. Another is `:first-child`, which targets the first child element inside the chosen parent.
+
+> 📄 DOCUMENTATION
+>
+> For further information, please check out the MDN docs: [Psuedo-classes](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes)
+
+### Pseudo-elements
+
+A pseudo-element allows you to style a specific part of the element you've selected. Let's say you wanted to style the first letter of a paragraph. You could use the `::first-letter` pseudo-element.
+
+```css
+p::first-letter {
+  font-size: 18px;
+}
+```
+
+Other pseudo-elements that are useful to know are `::before` and `::after`, which let you style the section before or after a specific element. With CSS, you can use the content property to add `content` to the HTML. In this example, we add a calendar icon before the date.
+
+```css
+.date::before {
+  content: '📅';
+}
+```
+
+We could add the icon in the HTML in front of the date, but we should ask whether the icon is important content that should be in the HTML for someone using assistive technology or if it is purely styling. If it’s just for styling, then it’s best managed using CSS. Plus, we’d be able to quickly change all calendar icons in one place if we wanted a different icon at a later date.
+
+## Cheat sheet of Selectors and Combinators
+
+| Example                     | What is selected                                                                  |
+| --------------------------- | --------------------------------------------------------------------------------- |
+| `section {}`                | `section` elements                                                                |
+| `.highlighted {}`           | Elements with a class of `highlighted`                                            |
+| `#logo {}`                  | Elements with an ID of `logo`                                                     |
+| `section.highlighted {}`    | `section` elements with a class of `highlighted`                                  |
+| `section .highlighted {}`   | Elements with a class of `highlighted` inside of `section` elements               |
+| `section > .highlighted {}` | Elements with a class of `highlighted` that are direct descendants of a `section` |
+| `section + .highlighted {}` | The first element with a class of `highlighted` after each `section`              |
+| `section, .highlighted {}`  | All `section` elements, and all elements with a class of `highlighted`            |
+| `section ~ .highlighted {}` | All elements with a class of `highlighted` that are siblings of a `section`       |
+| `input[type="text"] {}`     | `input` elements that have a type of `text`                                       |
+
+## Cascading, Specificity and Inheritance
+
+- CSS stands for Cascading Style Sheets.
+- Cascading is the order in which we write CSS, going from top to bottom.
+
+Two conflicting rules are applied in the following example, but which styling should the browser apply? Since CSS runs from top to bottom, it cascades. Thus, the browser will choose the styling applied last and make the background blue.
+
+```css
+body {
+  background-color: orange;
+}
+
+body {
+  background-color: blue;
+}
+```
+
+### Specificity
+
+In the above example, we have two selectors with the same specificity level. They’re both targeting the `<body>`. But what if we want the `<main>` to be styled a different colour to the rest of the body? In this example, the `<body>` will be orange, and the `<main>` will be blue as the main is more specific than its parent element, the body.
+
+```css
+body {
+  background-color: orange;
+}
+
+main {
+  background-color: blue;
+}
+```
+
+In the order of specificity:
+
+- A tag selector is the least specific.
+- Then a class as it can be applied to multiple elements.
+- Then an ID as it can only be applied to one element.
+
+The more specific selector will be the one that gets chosen. Inline styling in the HTML is the most specific you can get, but this shouldn’t be added to the HTML and should only be added using JavaScript, which we will get to in the JavaScript course.
+
+We can calculate the specificity of a CSS selector numerically. The values of each CSS selector are as follows:
+
+| Selector                       | Specificity rating |
+| ------------------------------ | ------------------ |
+| Inline style                   | 1000               |
+| ID                             | 100                |
+| Class, attribute, pseudo-class | 10                 |
+| Type Selector                  | 1                  |
+
+---
+
+> **📄 DOCUMENTATION**
+>
+> For further information, please check out the MDN docs: [Cascade and inheritance](https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Cascade_and_inheritance).
+
+## Activities
+
+> 💻 **WATCH**
+>
+> [This tutorial video on CSS.](https://scrimba.com/scrim/cPJpJWCq?pl=paaBbTa) (12m 20s)
+
+---
+
+## Lesson Task
+
+### Brief
+
+There are practice questions in the master branch of [this repo](https://github.com/Noroff-Education/lesson-task-htmlcss-module1-lesson3).
+
+Attempt the answers before checking them against the answers in the [answers branch](https://github.com/Noroff-Education/lesson-task-htmlcss-module1-lesson3/tree/answers) of the repo.
diff --git a/packages/lms/src/routes/content/feu1/html-css/module-1/intro-html/+page.md b/packages/lms/src/routes/content/feu1/html-css/module-1/intro-html/+page.md
new file mode 100644
index 0000000..dc938e5
--- /dev/null
+++ b/packages/lms/src/routes/content/feu1/html-css/module-1/intro-html/+page.md
@@ -0,0 +1,290 @@
+---
+title: Introduction to HTML
+tags:
+  - HTML and CSS
+type: Lesson
+---
+
+## Introduction
+
+Throughout this course, we will look at HTML in more detail and learn how to use it when creating a website.
+
+A few notes about HTML:
+
+- HTML stands for HyperText Markup Language.
+- Any website you visit has been created with the use of HTML.
+- Every web page is an HTML file.
+- It is the backbone of website creation and a relatively easy concept to learn.
+- HTML is made up of short codes typed into a text file by the creator of a site. These codes are known as tags.
+- When the text is saved as an HTML file and opened by a browser, such as Google Chrome, the browser translates the text into the webpage that was intended to be created.
+
+## Code Editors
+
+Because HTML is written as text, a program as simple as Notepad (PC) or TextEdit (Mac) can be used for this purpose. Yet, these have minimal functionality. They don’t offer functionality such as syntax highlighting and error spotting in your code.
+
+We recommend using [VS Code](https://code.visualstudio.com/) as your code editor. It is a popular choice for front-end developers. We also suggest plugins such as [Prettier](https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode), which automatically formats your code for you and [Live Server](https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer), which allows you to code on one screen and have the browser update on another screen as you work.
+
+Other code editors include [Atom](https://atom.io/), [Brackets](https://brackets.io/) and [Sublime](https://www.sublimetext.com/).
+
+If you already have a code editor you prefer, you’re welcome to use that.
+
+> ℹ️ INFO
+>
+> Try using a dark theme with less contrast, as this can be less tiring on your eyes than a white theme. Using a dark or white theme is about personal preference, so try different options to see what works best for you.
+
+## A Basic HTML page
+
+Below you can see the markup of a basic HTML page. We will be going through the page looking at each element separately.
+
+What is important to know is that an HTML page is made up of HTML _elements_. These elements are written using HTML _tags_. An HTML tag has a simple syntax which is a letter or word enclosed by the `<` symbol at the beginning and the `>` symbol at the end. For example, you have the paragraph tag like this: `<p>`. You have opening and closing tags, which look the same, but the closing tag includes a “/” symbol, so `</p>`. You have your content between the opening and closing tags, for example, `<p>This is the paragraph text content</p>`. When the browser reads this, it creates a paragraph _element_ with the content between the tags. Note that some tags, like the `<img>` image tag, are self-closing, meaning that it doesn’t require a closing tag. The content between the tags can be textual, or you can have other tags _inside_ of the _parent_ tag, creating, you guessed it: children elements.
+
+The same principle goes for all the other tags in the example code below; the `<body>` tag creates a body element, and the `<nav>` tag makes a navigation element, etc. The terms “tag” and “element” are often used interchangeably, but it is nice to know the distinction between them to understand how HTML pages work in the browser in conjunction with JavaScript, which you will learn later in this programme.
+
+HTML markup example:
+
+```html
+<!DOCTYPE html>
+<html>
+  <head>
+    <title>My first website | Home</title>
+    <meta name="description" content="The home page to my first ever website." />
+    <meta name="viewport" content="width=device-width, initial-scale=1" />
+  </head>
+  <body>
+    <header>
+      <img src="logo.jpg" alt="Logo for My First Website" />
+      <nav>
+        <ul>
+          <li>Home</li>
+          <li>About</li>
+          <li>Contact</li>
+        </ul>
+      </nav>
+    </header>
+    <main>
+      <section>
+        <h1>Hello world</h1>
+        <p>Welcome to my website. Here I'll be putting into practice all the things I've learned.</p>
+      </section>
+    </main>
+    <footer>
+      <p>
+        If you need more info, you can
+        <a href="https://twitter.com">find me on Twitter</a>
+      </p>
+    </footer>
+  </body>
+</html>
+```
+
+The HTML element is also an object you will learn more about later. These objects you can manipulate using JavaScript. So to re-iterate, the browser creates a bunch of HTML elements when it reads the HTML document containing your HTML tags.
+
+### Doctype Declaration
+
+`<!doctype html>` is a so-called doctype declaration and is necessary at the top of each HTML page. The declaration lets the browser know to interpret the page as HTML.
+
+### Head
+
+The `<head>` element of the document contains [metadata](https://en.wikipedia.org/wiki/Metadata) about the page, yet it is not displayed on the page. The metadata defined in the head might include the page title, descriptions of the page, styles, scripts, viewports, links, and more.
+
+```html
+<head>
+  <title>My first website | Home</title>
+  <meta name="description" content="The home page to my first ever website." />
+  <meta name="viewport" content="width=device-width, initial-scale=1" />
+</head>
+```
+
+> **📄 DOCUMENTATION**
+>
+> For further information, please check out the MDN docs: [What's in the head? Metadata in HTML](https://developer.mozilla.org/en-US/docs/Learn/HTML/Introduction_to_HTML/The_head_metadata_in_HTML).
+
+### Title
+
+The `<title>` element sets the title of the document. You can see the title displayed on the browser tab. It is also the title that is displayed on search engines, so it is important to pick clear, unique titles for each page. On most websites, the title will contain the site name and the page name. For example, `"Business Name | Contact Us"`.
+
+> ⚠️ WARNING
+>
+> The `<title>` element should not be confused with the `<h1>` element. For more information, check the [MDN docs](https://developer.mozilla.org/en-US/docs/Learn/HTML/Introduction_to_HTML/The_head_metadata_in_HTML#adding_a_title).
+
+### Meta elements
+
+`<meta>` elements are used to add extra information about the page. Two attributes that are a good idea to note: the `description` and `viewport` attributes.
+
+- **Meta Description**
+
+The page’s meta description is vital for [search engines](https://developer.mozilla.org/en-US/docs/Glossary/Search_engine) as this text is displayed on a results page under the page’s title. It should be enticing and unique for each page on the website.
+
+- **Meta Viewport**
+
+The visible area of a page (or [viewport](https://developer.mozilla.org/en-US/docs/Web/CSS/Viewport_concepts#what_is_a_viewport)) varies a lot across devices, and so the meta viewport element `<meta name="viewport" content="width=device-width, initial-scale=1">` provides a way to tell the browser how to control the page’s dimensions. Adding the meta viewport tag to your HTML document is crucial for creating websites that look good across devices.
+
+### Body
+
+Everything visible on the page should go inside the `<body>` element. The `<head>` element is for all the extra information and styling for the page. HTML content that you intend to be displayed must be inside the `<body>`. We briefly mentioned the concept of nesting elements into a parent-children structure, which is a fundamental concept of HTML. To re-iterate, for example, a `<div>` tag is nested inside the `<body>` tag, which is nested inside an `<html>` tag.
+
+> ℹ️ INFO
+>
+> Note below how nested elements are indented. Proper formatting makes the code easier to read.
+
+HTML code example:
+
+```html
+<body>
+  <header>
+    <img src="images/logo.jpg" alt="Logo for My First Website" />
+    <nav>
+      <ul>
+        <li>Home</li>
+        <li>About</li>
+        <li>Contact</li>
+      </ul>
+    </nav>
+    <h1>Hello world</h1>
+  </header>
+  <main>
+    <section>
+      <h2>My work</h2>
+      <p>Welcome to my website. Here I'll be putting into practice all the things I've learned.</p>
+    </section>
+  </main>
+  <footer>
+    <p>
+      If you need more info, you can
+      <a href="https://twitter.com">find me on Twitter</a>
+    </p>
+  </footer>
+</body>
+```
+
+### Header
+
+The header of a page contains an introduction to the page. It might include the logo, a heading and/or introduction to the page, the site’s main navigation, and a header image. It’s important to highlight the difference between `<head>` and `<header>`.
+
+> ⚠️ WARNING
+>
+> - The `<head>` is used for extra information about the document.
+> - The `<header>` is the introduction to the page.
+
+### Nav element
+
+The `<nav>` element should contain your main navigation for the website. On most websites, you’ll likely have one `<nav>` element, while links in the footer do not need to be in a `<nav>` element. Suppose you have navigation to allow moving between pages, as well as moving around on that page. In that case, you might want to use the `aria-labelledby` attribute, which is your primary navigation, as you can see in [this example on MDN](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-labelledby).
+
+### UL and LI elements
+
+In the HTML code example above, there is a `<ul>` element inside the `<nav>` element – an abbreviation of “unordered list”. We use it in this context because there is a list of links inside the navigation element. Each item inside the `<ul>` is a list item, denoted as `<li>`. By default, a `<ul>` displays as a bullet point list, but CSS can adjust this.
+
+Another type of list you might see is an ordered list, denoted using the `<ol>` tag. An ordered list is where the order matters and, by default, is numbered.
+
+### Main element
+
+You use the `<main>` element to group the page’s primary content. While the header introduces what the page is about, the main element is used for the actual content. This content should be unique to that page particular page.
+
+> ℹ️ INFO
+>
+> Note that the navigation and primary heading should not be inside the `<main>` element but rather inside the `<header>` element.
+
+```html
+<body>
+  <header>
+    <nav></nav>
+    <h1></h1>
+  </header>
+  <main>
+    <!-- page content goes here -->
+  </main>
+  <footer></footer>
+</body>
+```
+
+### Inline comments
+
+In the code example above, you can see an unusual-looking tag with this syntax `<!-- text -->`. This tag is a comment tag, which is used to communicate information about the code. This text will not be visible on the rendered page.
+
+### Section and Div
+
+The `<section>` element is used to identify specific content sections. A separate sub-heading is often associated with each `<section>` element.
+
+If you need a generic container and there is no meaningful reason for adding the element other than it gives you something to style, then the best element for that is the `<div>`. In general, try to find a semantic element. You can use a `<div>` if there isn’t one. Before HTML5, developers used `<div>` a lot, but now we have more meaningful tags that you should use where appropriate.
+
+### Headings
+
+Headings are essentially titles for pages or sections on the page. Headings run from `<h1>` to `<h6>` and should be used in order of importance. Thus, `<h1>` is the most important heading on the page, then `<h2>` the second most important heading or headings, then `<h3>` the third most important and so on.
+
+There should be one `<h1>` per page, which should be unique. You should also not skip headings (i.e. jump from h1 to h3 with no h2 on the page).
+
+### Paragraphs
+
+Paragraphs, indicated with `<p>` tags, are blocks of text, usually a group of sentences with no line break. Do not use `<br>` tags if you want to break up a paragraph. Instead, close the paragraph and open another paragraph.
+
+### Footer
+
+You can use the `<footer>` element to include additional information about the page. Typically, it will include the copyright information and additional links which users might find useful. It’s generally not very important information and is normally displayed right at the bottom of the page.
+
+## Semantics
+
+In HTML, semantics refers to the meaning of a piece of code. Does the HTML code have meaning? We’d like our HTML to be meaningful because it makes the code easier to read, which is important for you and other developers.
+
+Meaningful code also makes it more accessible. With good semantics, assistive technology can more easily make sense of the different elements on the page and their usage. The same logic applies to search engines. If every element on the page is a `<div>`, then all elements are seen as equal. It’s much better to use meaningful tags to identify what each section is about.
+
+## Good Formatting
+
+Correctly formatting your code makes it much easier to read, and it thus becomes quicker to identify which elements are nested inside of other elements.
+
+To practice good formatting of your HTML, here are key points:
+
+- Elements placed inside other elements should be indented to the right of the parent. For example, the body element is inside the HTML element and should be indented to the right of its parent.
+- The opening tag and closing tag should be indented the same amount.
+- Elements such as headings, paragraphs and images can be placed on one line.
+
+```html
+<div>
+  <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>
+  <div>
+    <p>Curabitur tempus, mauris ac condimentum consequat, quam eros faucibus ex, at rhoncus elit lacus nec diam.</p>
+    <div>
+      <p>
+        Morbi in nisi non ex sodales suscipit eu id sapien. Etiam neque justo, tempus id laoreet id,egestas at odio.
+      </p>
+    </div>
+  </div>
+</div>
+```
+
+The example above is much more difficult to read than the example below, where indenting is used, making it quicker to scan through the code. You can use the TAB key to indent; most text editors will help you indent correctly. To format your code, you can use plugins such as [Prettier](https://prettier.io/).
+
+```html
+<div>
+  <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>
+  <div>
+    <p>Curabitur tempus, mauris ac condimentum consequat, quam eros faucibus ex, at rhoncus elit lacus nec diam.</p>
+    <div>
+      <p>
+        Morbi in nisi non ex sodales suscipit eu id sapien. Etiam neque justo, tempus id laoreet id, egestas at odio.
+      </p>
+    </div>
+  </div>
+</div>
+```
+
+---
+
+> **📄 DOCUMENTATION**
+>
+> For further information, please check out the MDN docs: [HTML elements reference](https://developer.mozilla.org/en-US/docs/Web/HTML/Element).
+
+## Activities
+
+> 💻 **WATCH**
+>
+> [This tutorial video on laying out a basic HTML page.](https://scrimba.com/scrim/cBL7gDUv?pl=paaBbTa) (15m 39s)
+
+---
+
+## Lesson Task
+
+### Brief
+
+There are practice questions in the master branch of [this repo](https://github.com/Noroff-Education/lesson-task-htmlcss-module1-lesson1).
+
+Attempt the answers before checking them against the answers in the [answers branch](https://github.com/Noroff-Education/lesson-task-htmlcss-module1-lesson1/tree/answers) of the repo.
diff --git a/packages/lms/src/routes/content/feu1/html-css/module-1/module-1-checkpoint/+page.md b/packages/lms/src/routes/content/feu1/html-css/module-1/module-1-checkpoint/+page.md
new file mode 100644
index 0000000..8f599c1
--- /dev/null
+++ b/packages/lms/src/routes/content/feu1/html-css/module-1/module-1-checkpoint/+page.md
@@ -0,0 +1,60 @@
+---
+title: Module 2
+tags:
+  - HTML and CSS
+type: Course
+---
+
+## Introduction
+
+It's time to take what you've learned from Module 1 and apply it to your Course Assignment.
+
+## Process
+
+### Intro to HTML
+
+1. Open/create your index.html file in VS Code.
+2. You can use the Emmet abbreviation `!` or `doc` to quickly create a simple HTML template.
+3. Look over your prototype and mentally divide up the home page. Which parts of the prototype is the header? Which is the main? Are there sections on the page?
+4. Add the HTML elements to the page making sure to use good semantics.
+
+### File Management
+
+1. Create the other html files for your project.
+2. Use the `!` Emmet abbreviation to create a simple template in each HTML file
+3. Link the pages together.
+
+### Intro to CSS
+
+1. Create a stylesheet and add it to your css folder
+2. Link to the stylesheet from your home page
+3. Start with something simple like adding colors to the page. Don't worry about layout, that will come later. For example, if your header has a background color add it now, if text has a specific color add it now.
+
+### Fonts
+
+1. Determine whether your fonts are [web-safe](https://www.cssfontstack.com/) or not.
+2. If they are web-safe you can apply the fonts to the text they're meant to style.
+3. If they aren't web-safe you'll need to use @font-face to load them to the browser. Whether you write the @font-face rule yourself will depend on where the font is from. If you're using a service like Google Fonts then you'll get a stylesheet you can load to the page, but if you just have a font file then you'll need to write the @font-face rule yourself in the CSS file.
+4. Once you've applied your fonts, test if they work by viewing the site on different devices (you'll need to push to the deployed site on Netlify to test that)
+
+### Questions to ask yourself about the CA so far
+
+- Is my HTML semantic?
+- Is my code easy to read?
+- Have I maintained a neat folder structure?
+- Are the links between pages working?
+- Is my CSS working correctly?
+- Is my CSS following DRY principles?
+- Are my fonts working properly?
+
+To help answer these questions, you can use:
+
+- [W3C Validator](https://validator.w3.org/)
+- Test on different devices
+
+## Outcomes for this module
+
+You should now be able to say:
+
+- "I write neat, semantic and bug-free HTML"
+- "I can add basic styling to my website including colors and fonts"
diff --git a/packages/lms/src/routes/content/feu1/html-css/module-2/+page.md b/packages/lms/src/routes/content/feu1/html-css/module-2/+page.md
new file mode 100644
index 0000000..c347d76
--- /dev/null
+++ b/packages/lms/src/routes/content/feu1/html-css/module-2/+page.md
@@ -0,0 +1,13 @@
+---
+title: Module 2
+tags:
+  - HTML and CSS
+type: Module
+previous: Module 1
+---
+
+In this module we look at specific elements and how to style them. These will include adding and styling images and icons to make your page look better and more engaging.
+
+We will also look at forms as a way to collect user input. Then we will cover navigation - a vital part of any site; this will include learning how to make a mobile ‘hamburger’ menu using only CSS.
+
+Finally, we will look at the CSS Box Model which defines how elements that display as blocks can have padding, margin, and borders added around them.
diff --git a/packages/lms/src/routes/content/feu1/html-css/module-2/css-box-model/+page.md b/packages/lms/src/routes/content/feu1/html-css/module-2/css-box-model/+page.md
new file mode 100644
index 0000000..dd95fc0
--- /dev/null
+++ b/packages/lms/src/routes/content/feu1/html-css/module-2/css-box-model/+page.md
@@ -0,0 +1,139 @@
+---
+title: CSS Box Model
+tags:
+  - HTML and CSS
+type: Lesson
+---
+
+## Introduction
+
+In this lesson, you will be introduced to the CSS Box Model.
+
+<div align="center">
+    <figure>
+        <img src="./../images/htmlcss/2-4-1.png" alt="CSS Box Model">
+    </figure>
+    <figcaption>Figure: CSS Box Model</figcaption>
+</div>
+
+### Anatomy of the box
+
+#### The framed painting analogy
+
+To understand the box model, we can use an analogy of a framed painting. Our framed painting consists of three parts: the painting itself, a passe-partout frame (the cardboard frame between the photograph and the outer frame) and a wooden frame. The CSS box model follows the same principle: you have the content box (painting), the padding box (passe-partout frame) and the border box (wooden frame). In addition to these three boxes (also referred to as areas), you also have the margin box. If we build upon our analogy, the margin box will serve as the space around the framed image. Next, we will look at each box in more detail.
+
+### Where content is displayed​
+
+#### Content Box​
+
+The content box is where the content is displayed, as the box's name suggests. The content can be text, images, figures etc. The content box is the only box in the CSS box model to which you can set the background colour.
+
+```html
+<h1>Text content</h1>
+```
+
+Take this `h1` element. We can use CSS to set the background colour of the content box using the `background-color` property. We’ve also set the `width` to 100%, which means that the content box’s size matches its parent element’s width.
+
+```css
+h1 {
+  background-color: lightblue;
+  width: 100%;
+}
+```
+
+#### Padding Box​
+
+The padding box lives directly outside the content box​ and makes up the space between the content box and the border box. You can specify this space using the `padding` property, as shown in the code below.
+
+```css
+h1 {
+  padding-top: 1rem;
+  padding-right: 1.5rem;
+  padding-bottom: 1rem;
+  padding-left: 1.5rem;
+}
+```
+
+#### Border Box​
+
+The border box sits outside the content and padding boxes​. Let’s go back to the “framed painting analogy”. The wooden frame represents the border box. You can choose this frame’s colour, thickness and corner radius, and the same principle applies to the CSS border box.
+
+There are four main properties that pertain to the border box: `border-style`, `border-color` , `border-width` and `border-radius`.
+
+1. `border-style`
+
+   - the style of the border box
+   - can be a solid colour, dotted lines, double lines, and many more.
+   - is a mandatory property. If you don’t set this property, you cannot use the `border-color` property to set the colour.
+
+2. `border-color`
+
+   - set the colour of the border.
+
+3. `border-width`
+
+   - set the width of the border.
+
+4. `border radius`
+   - set the radius of the edges of the Border box, i.e. the “roundness” of the edges.
+
+```css
+h1 {
+  border-style: solid;
+  border-color: blue;
+  border-width: 1rem;
+  border-radius: 1em;
+}
+```
+
+Instead of using a separate property for the style, colour and width, you can use a so-called shorthand property. The purpose of a shorthand property is, as you might have guessed, to shorten the amount of code. The code below shows an example of the use of the shorthand `border` property.
+
+```css
+h1 {
+  border: 1em solid blue;
+  border-radius: 1em;
+}
+```
+
+#### Margin Box​
+
+The margin box is the outer box of the box model. By setting the size of the margin box, you create an invisible space around the border box. Going back to the “framed painting analogy”, let’s say you have four framed paintings. Two paintings are placed at the top and two at the bottom, forming a square. Usually, one would like to have some space between the paintings to avoid the presentation seeming cluttered; in terms of the Box model, this spacing would be achieved by specifying the size of the Margin box.
+
+```css
+h1 {
+  margin-top: 2em;
+  margin-right: 2em;
+  margin-bottom: 2em;
+  margin-left: 2em;
+}
+```
+
+Using the shorthand `margin` property :
+
+```css
+h1 {
+  margin: 2em;
+}
+```
+
+> **📄 DOCUMENTATION**
+>
+> The MDN docs cover the CSS box model in more detail. Please check it out if you want to learn more: [The box model](https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/The_box_model) and [Introduction to the CSS basic box model](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Box_Model/Introduction_to_the_CSS_box_model).
+
+---
+
+## Activities
+
+> **💻 WATCH**
+>
+> Video: [The Box Model](https://www.linkedin.com/learning/css-essential-training-1/the-box-model?u=43268076)
+
+---
+
+## Lesson Task
+
+### Brief
+
+There are practice questions in the master branch of [this repo](https://github.com/Noroff-Education/lesson-task-htmlcss-module2-lesson4).
+
+Attempt the answers before checking them against the answers in the [answers branch](https://github.com/Noroff-Education/lesson-task-htmlcss-module2-lesson4/tree/answers) of the repo.
diff --git a/packages/lms/src/routes/content/feu1/html-css/module-2/forms/+page.md b/packages/lms/src/routes/content/feu1/html-css/module-2/forms/+page.md
new file mode 100644
index 0000000..8b615c2
--- /dev/null
+++ b/packages/lms/src/routes/content/feu1/html-css/module-2/forms/+page.md
@@ -0,0 +1,217 @@
+---
+title: Forms
+tags:
+  - HTML and CSS
+type: Lesson
+---
+
+## Introduction
+
+In this lesson, we’ll look at how you can set up forms correctly.
+
+## The Form Element
+
+The `<form>` element provides a method of collecting a user’s input. We could collect the user’s name, email address, or message. We can also use [checkboxes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/checkbox) and [radio buttons](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/radio) to allow users to choose specific items in the form.
+
+You can use the `<form>` element to create a form that can submit data to a server where this data can be handled.
+
+```html
+<form action="submit.php" method="POST">
+  <input type="text" name="firstname" />
+  <input type="submit" />
+</form>
+```
+
+The form’s action property sets where the data gets sent. In the above example, the data will be sent to a file called `submit.php` where [PHP](https://developer.mozilla.org/en-US/docs/Glossary/PHP) will be used to handle the data.
+
+> ℹ️ **INFO**
+>
+> Note: we won't be working with data handling. It is outside the scope of this course.
+
+In the code example above, you can see an HTML attribute called `method` with the value of `POST`. This attribute sets which _[HTTP request type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods)_ will be used when the form data is submitted; in this case, we use the [POST request](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/POST) to send data. You will learn more about HTTP and be familiarized with different HTTP request methods later in the programme.
+
+> **📄 DOCUMENTATION**
+>
+> - If you're curious about HTTP, you could have a look at the MDN docs: [An overview of HTTP](https://developer.mozilla.org/en-US/docs/Web/HTTP/Overview).
+
+## Inputs
+
+One of the most common ways of collecting data from a user is using the `<input>` element. There are many different input types, and you can specify the input type through the `type` attribute. How they display in the browser depends on their type. By default, `<input>` has a `text` type.
+
+The types of input include the following (although there are more):
+
+- Button
+- Checkbox
+- Date
+- Email
+- Number
+- Password
+- Radio
+- Submit
+- Tel (for telephone numbers, note that you should not use the 'number' type for a telephone number).
+
+### Name attribute
+
+```html
+<input type="text" name="firstname" />
+```
+
+When the form data gets sent to the server, the input name will be sent with its content. The input name is set by simply using the `name` attribute. Since a form may have any number of input fields, these name attributes are essential! What these names are is up to you: you don’t have to call the input for the first name “firstname” – you can call it “forename”, “first_name”, “f_name”, or pretty much whatever you want. Just be sure not to use spaces or illegal characters. For your own sake, it is best to use names that will be easy to remember. While it is possible to name your first name input “wingnut”, it may not be so helpful when you revisit the project six months later.
+
+### Radio Buttons
+
+Grouped radio buttons allow you to choose only one of the supplied options. On an HTML page, only one radio button may be chosen. If one button is chosen, the other radio buttons will deselect. For this reason, grouped radio buttons must share the same name. Here is an example:
+
+```html
+<input type="radio" name="age" value="18-24" id="18-24" />
+<label for="18-24">18-24</label>
+<input type="radio" name="age" value="25-35" id="25-35" />
+<label for="25-35">25-35</label>
+<input type="radio" name="age" value="36-50" id="36-60" />
+<label for="36-60">36-60</label>
+```
+
+> ⚠️ WARNING
+>
+> To enable radio buttons to be selected one at a time, grouped radio buttons must share the same `name` value.
+
+### Labels
+
+The code above shows that a label has been joined to an `<input>`. Semantically this is good, but it also has the added bonus of being good for UX as a user can click the `<label>` and still select the radio button. To link a `<label>` with a `<input>`; the `id` value of the `<input>` needs to match the `for` value of the `<label>`.
+
+If you want the `<input>` and `<label>` elements to each be on separate lines, please do not use `<br>` tags. You can add content after the label and set it to `display: block.`
+
+```html
+<input type="radio" name="age" value="18-24" id="18-24" />
+<label for="18-24">18-24</label>
+<input type="radio" name="age" value="25-35" id="25-35" />
+<label for="25-35">25-35</label>
+<input type="radio" name="age" value="36-50" id="36-60" />
+<label for="36-60">36-60</label>
+```
+
+Another option is to group inputs and labels in a `<div>` or `<section>` element.
+
+### Value attribute
+
+You might have noticed new attribute on these `<input>` elements: the `value` attribute. You can also see that the value of the `value` attribute is set, like this: `value="18-24"`.
+
+What is the difference between the `name` and `value` attributes? The `name` helps to identify the `<input>` element, and the `value` attribute is used to retrieve the associated data of an `<input>` element.
+
+In the case of a text type input field, it would be the user’s typed input. But as radio buttons do not have an associated default value, we must supply it. This is especially important for any input type that does not allow text input – the value must be set in advance.
+
+We mentioned that the `value` attribute is used to retrieve data from an element but can also be used to _set_ the data. Take this text type input element, `<input value="Pre-filled text example">`. In this case, the input field will be pre-filled with text.
+
+### Checkboxes
+
+Checkboxes allow users to pick multiple (or no) options on the form. You will see that each checkbox’s `name` attribute is unique, unlike on radio buttons, where it was the same.
+
+```html
+<input type="checkbox" name="cats" value="cats" id="cats" />
+<label for="cats">Cats</label>
+<input type="checkbox" name="dogs" value="dogs" id="dogs" />
+<label for="dogs">Dogs</label>
+<input type="checkbox" name="dogs" value="hamster" id="hamster" checked />
+<label for="hamster">Hamster</label>
+```
+
+> ℹ️ **INFO**
+>
+> Note: you can _check_ a checkbox by default by adding the `checked` attribute. [Read more.](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/checkbox#checking_boxes_by_default)
+
+### Submit
+
+The `submit` type `<input>` element is used to submit the form data, as you might have guessed. The `submit` type `<input>` is by default styled as a `<button>` element. When you want to add button text to the the submit type `<input>`, you do this through the `value` attribute.
+
+```html
+<input type="submit" value="Send" />
+```
+
+### Select
+
+If you want to create a menu of options list, you can use the `select` element. Each `option` inside the `<select>` should have a `value` set.
+
+```html
+<label for="cities">Choose a city:</label>
+<select name="cities" id="cities">
+  <option value="paris">Paris</option>
+  <option value="oslo">Oslo</option>
+  <option value="amsterdam">Amsterdam</option>
+  <option value="copenhagen">Copenhagen</option>
+</select>
+```
+
+### Datalist
+
+The `<datalist>` element is similar to a `<select>` in that it uses options for the user. The difference between the two is that with a `select`, the user must choose one of the available options, but with the `datalist` element it simply offers suggestions.
+
+```html
+<label for="pet-choice">Choose a pet:</label>
+<input list="pets" id="pet-choice" name="pet-choice" />
+
+<datalist id="pets">
+  <option value="Dog"></option>
+  <option value="Cat"></option>
+  <option value="Bird"></option>
+  <option value="Horse"></option>
+</datalist>
+```
+
+### Textarea
+
+To allow users to input multiple lines of text, as you would in a message, you can use the `<textarea>` element.
+
+```html
+<textarea id="message" name="message" rows="5" cols="30"></textarea>
+```
+
+The `row` and `col` attributes set how large the `<textarea>` element is, although this can cause issues in responsive design. In general, it's best to control the sizing of `<textarea>` elements by using CSS.
+
+### Fieldsets
+
+Fieldsets are a good way of organizing form data. The `<fieldset>` element may be wrapped around any number of input elements.
+
+```html
+<fieldset>
+  <legend>Personal information</legend>
+  <input type="text" name="firstname" />
+  <input type="text" name="lastname" />
+</fieldset>
+```
+
+The `<legend>` tag supplies a caption for the `<fieldset>`, allowing the user to know what this group of inputs is about. More than one `<fieldset>` may be included in a form.
+
+### CSS Attribute Selectors
+
+We will also be looking at another way of styling CSS – CSS attribute selectors. Attribute selectors allow us to define CSS rules by shared attributes. We will be using attribute selectors to style a form, which will illustrate how these may be used and how this will again make for more efficient CSS and less work spent on formatting elements that share attributes. The syntax for CSS attribute selectors is square braces containing the attribute, as follows:
+
+```css
+input[type='text'] {
+  padding: 10px;
+  width: 100%;
+}
+```
+
+This selector will affect any form input element with `text` type. As with other CSS selectors, careful planning will allow us to style multiple elements simultaneously.
+
+> **📄 DOCUMENTATION**
+>
+> If you want to learn more about input types, the MDN docs cover them really well: [The Input (Form Input) element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input).
+
+---
+
+## Activities
+
+**WATCH**
+
+[This tutorial video on using forms.](https://scrimba.com/scrim/cpDVJVHz?pl=paaBbTa) (10m 21s)
+
+---
+
+## Lesson Task
+
+### Brief
+
+There are practice questions in the master branch of [this repo](https://github.com/Noroff-Education/lesson-task-htmlcss-module2-lesson2).
+
+Attempt the answers before checking them against the answers in the [answers branch](https://github.com/Noroff-Education/lesson-task-htmlcss-module2-lesson2/tree/answers) of the repo.
diff --git a/packages/lms/src/routes/content/feu1/html-css/module-2/images-icons/+page.md b/packages/lms/src/routes/content/feu1/html-css/module-2/images-icons/+page.md
new file mode 100644
index 0000000..687340d
--- /dev/null
+++ b/packages/lms/src/routes/content/feu1/html-css/module-2/images-icons/+page.md
@@ -0,0 +1,164 @@
+---
+title: Images and Icons
+tags:
+  - HTML and CSS
+type: Lesson
+---
+
+## Introduction
+
+There are two ways of adding images to the page:
+
+- You can add an image to the HTML document using the `<img>` tag
+- Or you can add the image using the `background-image` CSS property.
+
+Choosing which option is suitable for the image you want to add is essentially one of semantics and the practicalities of your chosen layout.
+
+In general, if the image you’re looking to add is there to make the site look good, then adding it using CSS is best. If the image is there for content reasons and it would be useful for someone using assistive technologies or a search engine to know that this image is in the content of the page, then use the `<img>` tag.
+
+The two most common formats you’ll use for images are PNG, which is great for icons and logos as you can keep space in the image, and JPG, which offers excellent compression for pictures.
+
+## Images in HTML
+
+We add images to HTML using the `<img>` tag like so:
+
+```html
+<img src="images/logo.png" alt="Logo of MyWebsite.com" class="logo" width="500" height="600" />
+```
+
+- The first attribute you will see is the `src` attribute which tells the HTML where the file is located. You should use a relative file path if the image is located in your project folder and not on a different server.
+- The second is the `alt` attribute which sets the alternative text for the image. The `alt` attribute is what assistive technologies and search engines use to know what the image is about. If you are adding an image to the HTML, it needs to have alt text.
+
+### Styling HTML images
+
+You might also note that we’re not setting widths or heights in the HTML. All styling of the image should be handled in CSS. You do have specific HTML attributes called `height` and `width`, but the use of these attributes is mostly deprecated.
+
+```css
+.logo {
+  max-width: 200px;
+}
+```
+
+In the CSS above, we are using `max-width` rather than a fixed `width`. The reason for that is to avoid horizontal scrollbars. The browser will add a scrollbar when an element gets larger than the viewport. You want to avoid unintentional horizontal scrollbars. Setting the `max-width` property ensures that the image won’t get larger than a certain size. However, as soon as other elements bump into it, the logo will reduce in size to allow space for the other elements rather than forcing a horizontal scrollbar to appear.
+
+Another popular way of managing image sizes is using the percentage unit. This is especially useful if the image is inside a containing element such as `<div>` or `<section>` and you are already controlling the size of this element.
+
+```css
+.product {
+  width: 300px;
+}
+
+.product__image {
+  max-width: 100%;
+}
+```
+
+### Object-fit
+
+The `object-fit` property defines how an image is resized. If you're setting both a height and width on an image, it can sometimes get distorted. To fix this, you can use `object-fit: cover` to crop the image on the page. You can also control what part of the image gets cropped using `object-position`.
+
+```css
+.product__image {
+  object-fit: cover;
+  object-position: bottom;
+}
+```
+
+Other values for `object-fit` include `fill`, `contain`, `scale-down`, and `none`.
+
+### Border-radius
+
+If you wanted to create rounded edges on your image, for example, for a profile picture, you would use the `border-radius` property.
+
+`border-radius` can be used on other elements as well.
+
+You can decide how rounded you want the corners and which corners you want to be rounded.
+
+```css
+.profile-pic {
+  border-radius: 50%;
+}
+```
+
+The above code adds a 50% border-radius to each corner of the image, making it a perfect circle. If you only define one value for the `border-radius` property, it will apply to all corners, but you can apply a unique radius to each corner by setting the value for all four, like so:
+
+```css
+.product-image {
+  border-radius: 20px 50px 30px 10px;
+}
+```
+
+The values are applied clockwise, so the first value applies to the top-left corner, then the top-right, then the bottom-right, and then the bottom-left.
+
+## Images in CSS
+
+We need to use the background-image property to add an image using CSS.
+
+```css
+header {
+  background-image: url('../images/header.jpg');
+  background-size: cover;
+  background-repeat: no-repeat;
+}
+```
+
+Above, we can see a `background-image` property is applied to the header. We use the `url()` value to give a file path to the image we want to load. Again, it’s important to use the correct file path and ensure the image is loading correctly. The URL should be relative to the CSS file in which it is written.
+
+### Background-size
+
+We have also set the `background-size` property. In this case, we’ve set it to cover, which means that the image will scale as large as possible without stretching the image, and it will crop the image if there is no space either horizontally or vertically.
+
+Other values for `background-size` include `contain`, which, like `cover`, scales with the element to which it is applied, but it won’t crop. You can also set a pixel length or a percentage.
+
+### Background-repeat
+
+By default, the browser will repeat your background image if there is available space to do so. A repeated background might be fine for a texture or pattern, but generally, it’s not ideal, so setting `background-repeat: no-repeat` ensures the background appears only once. Other values for `background-repeat` include: `repeat`, `repeat-x`, `repeat-y,` `space`, and `round`.
+
+### Background-color
+
+While on the topic of backgrounds, it’s worth mentioning the `background-color` property, which allows you to set the colour of an element. On the other hand, the text colour inside the element is set by the `color` property.
+
+### Background
+
+There is a shorthand for managing backgrounds. Instead of writing each property on its own line, we can write it in one line like so:
+
+```css
+header {
+  background: cover no-repeat url('../images/header.jpg');
+}
+```
+
+## Font Awesome
+
+One of the most popular sets of icons online is the Font Awesome library. Here you are able to add icons directly into your HTML using short code snippets provided to you by Font Awesome.
+
+**Steps:**
+
+- Go to the Font Awesome website.
+- Register for an account. Creating an account will allow you to get access to their CDN (Content Delivery Network), where you will be able to load icons from their network.
+- When you’ve signed up, you’ll be given a script tag which you can add to the head of your HTML document.
+- Once you’ve added the script tag to each HTML page on which you want icons, you can start adding the icons to the HTML.
+
+There is a huge library of icons from which to choose. Once you’ve chosen your icons, you can add them like so:
+
+```html
+<i class="fas fa-arrow-circle-right"></i>
+```
+
+---
+
+## Activities
+
+> **💻 WATCH**
+>
+> [This tutorial video is on using and adding images to the page.](https://scrimba.com/scrim/c7PaPeAZ?pl=paaBbTa) (6m 10s)
+
+---
+
+## Lesson Task
+
+### Brief
+
+There are practice questions in the master branch of [this repo](https://github.com/Noroff-Education/lesson-task-htmlcss-module2-lesson1).
+
+Attempt the answers before checking them against the answers in the [answers branch](https://github.com/Noroff-Education/lesson-task-htmlcss-module2-lesson1/tree/answers) of the repo.
diff --git a/packages/lms/src/routes/content/feu1/html-css/module-2/module-2-checkpoint/+page.md b/packages/lms/src/routes/content/feu1/html-css/module-2/module-2-checkpoint/+page.md
new file mode 100644
index 0000000..56ce382
--- /dev/null
+++ b/packages/lms/src/routes/content/feu1/html-css/module-2/module-2-checkpoint/+page.md
@@ -0,0 +1,53 @@
+---
+title: Checkpoint
+tags:
+  - HTML and CSS
+type: Lesson
+---
+
+## Introduction
+
+It's time to take what you've learned from Module 2 and apply it to your Course Assignment.
+
+## Process
+
+### Images and Icons
+
+1. Decide which images should be added with as an `<img>` element in the HTML and which should be added with CSS. A useful question to ask is 'would a visually impaired user like to know about this image'.
+2. Add the images.
+3. Apply the appropriate styling.
+
+### Forms
+
+1. Look at your prototype and consider what different elements you'll need. For example, text inputs, number inputs, select elements etc.
+2. Open the Contact page in VS Code and add the elements.
+
+### Navigation
+
+1. Style the navigation to look like your prototype. This might include adding the checkbox hack for showing a hamburger menu on mobile and having the navigation displaying on desktop. NOTE: Please don't add two navigations, one for mobile and one for desktop. Have one navigation you style differently for different screen sizes.
+2. Style your links, this could include updating your call-to-action links.
+
+### CSS Box Model
+
+1. Find elements that need padding, margin or border applied to them and style them appropriately.
+
+### Questions to ask yourself about the CA so far
+
+- Are my images loading correctly and look like they should?
+- Is my form using the correct inputs and is it bug free?
+- Does my navigation look good and is it correctly laid out?
+- Have I used padding, margin, and border to add space to elements?
+
+To help answer these questions, you can use:
+
+- [W3C Validator](https://validator.w3.org/)
+- Test on different devices
+
+## Outcomes for this module
+
+You should now be able to say:
+
+- "I can add images with HTML and style them"
+- "I can use the correct input types in forms"
+- "I can style navigation items"
+- "I understand the CSS Box model and how to use it"
diff --git a/packages/lms/src/routes/content/feu1/html-css/module-2/navigation/+page.md b/packages/lms/src/routes/content/feu1/html-css/module-2/navigation/+page.md
new file mode 100644
index 0000000..57ed5b2
--- /dev/null
+++ b/packages/lms/src/routes/content/feu1/html-css/module-2/navigation/+page.md
@@ -0,0 +1,83 @@
+---
+title: Navigation
+tags:
+  - HTML and CSS
+type: Lesson
+---
+
+# Introduction
+
+It is crucial to grasp website navigation by a user.
+
+Here are a few suggestions in terms of setting up your navigation:
+
+- Don’t reinvent the wheel. Users generally expect the navigation to be at the top of the screen on desktop and a hamburger menu on mobile. The only real exception is a dashboard, where the navigation is usually on the left side.
+- Add a `class` to the menu item of the page the user is on. So, if they’re on the About page, somehow highlight ‘About’ in the navigation. In that way, they know on which page they are. On each page, you’ll need to change which item to which the class is applied.
+- The navigation should be consistent across pages, so always have the navigation there for users to move between pages.
+
+## Nav Element
+
+You should hopefully be familiar with semantics and want to choose the most semantic option you can. The primary way to navigate the website should be in a `<nav>` element so that it’s easy for assistive technology to know which is the primary way of moving about the website.
+
+### Nav with a UL
+
+It is debatable, but the most common way of creating navigation is using an unordered list (`<ul>`).
+
+```html
+<nav>
+  <ul>
+    <li><a href="index.html">Home</a></li>
+    <li><a href="about.html">About</a></li>
+    <li><a href="contact.html" class="current">Contact</a></li>
+  </ul>
+</nav>
+```
+
+We have also added typical styling in the CSS:
+
+- By default, the browser indents the `<ul>`, so we remove that by setting the padding to 0px.
+- Next, to display the list items in a horizontal line, we use `display: inline`.
+- If we want to add padding to each navigation item, it’s best to do this on the anchor tag. The reason is that you don’t end up with a situation where the user thinks they should be able to click a link, but the link is applied only to the text.
+- Lastly, we style the current class to bold so that it’s easy to spot.
+
+### Nav without a UL
+
+You can also write the navigation without a ul. CSS Tricks has a [good article about this](https://css-tricks.com/navigation-in-lists-to-be-or-not-to-be/).
+
+To write the navigation without a ul, you can simply add the anchor tags inside the `<nav>` element.
+
+```html
+<nav>
+  <a href="index.html">Home</a>
+  <a href="about.html">About</a>
+  <a href="contact.html">Contact</a>
+</nav>
+```
+
+## CSS-only Hamburger Menu
+
+Usually, you need JavaScript to create a hamburger menu. But it is possible to make a hamburger menu using just CSS. You need to use what is commonly called the ‘checkbox hack’.
+
+The basis of the method is to have a checkbox which can get checked and unchecked. We can add CSS, which applies if the element gets checked and unchecked.
+
+Below is a video explaining how to create a hamburger menu using only CSS.
+
+---
+
+## Activities
+
+**WATCH**
+
+This tutorial video is on building responsive navigation. (11m 42s)
+
+<iframe src="https://player.vimeo.com/video/662883528?h=a4cae2c618&amp;badge=0&amp;autopause=0&amp;player_id=0&amp;app_id=58479" width="1914" height="1036" frameborder="0" allow="autoplay; fullscreen; picture-in-picture" allowfullscreen title="Responsive Navigation"></iframe>
+
+---
+
+## Lesson Task
+
+### Brief
+
+There are practice questions in the master branch of [this repo](https://github.com/Noroff-Education/lesson-task-htmlcss-module2-lesson3).
+
+Attempt the answers before checking them against the answers in the [answers branch](https://github.com/Noroff-Education/lesson-task-htmlcss-module2-lesson3/tree/answers) of the repo.
diff --git a/packages/lms/src/routes/content/feu1/html-css/module-3/+page.md b/packages/lms/src/routes/content/feu1/html-css/module-3/+page.md
new file mode 100644
index 0000000..e16a003
--- /dev/null
+++ b/packages/lms/src/routes/content/feu1/html-css/module-3/+page.md
@@ -0,0 +1,24 @@
+---
+title: Module 3
+tags:
+  - HTML and CSS
+type: Module
+previous: Module 2
+---
+
+In this module, we look at building layouts, a crucial aspect of CSS and one you’ll need to become familiar with.
+
+We’ll start by looking at positioning elements on the page using the `position` property. We also look at using `float` to place images beside the text and have the text flow around the image.
+
+Then we’ll move on to two significant developments in CSS layouts: Flexbox and CSS Grids.
+
+- Flexbox is a handy tool for creating one-dimensional layouts that run horizontally or vertically. The fact that it so easily creates horizontal and vertical layouts makes it ideal for making responsive sites that can be horizontal on large screens but vertical on smaller screens.
+- CSS Grids is a two-dimensional layout system that offers increased flexibility to create even more complex layouts easily.
+
+Take time to get familiar with both Flexbox and CSS Grids.
+
+Finally, we’ll look at a vital part of modern web development: using the `media query` to create responsive websites. It is important to remember a few key things when working with media queries:
+
+1. You must always have the `<meta>` viewport tag in the `<head>` of your HTML document.
+2. Media queries should be placed at the bottom of your stylesheet.
+3. Don’t repeat styles in your `media query` that don’t need changing.
diff --git a/packages/lms/src/routes/content/feu1/html-css/module-3/css-grids/+page.md b/packages/lms/src/routes/content/feu1/html-css/module-3/css-grids/+page.md
new file mode 100644
index 0000000..d4d464b
--- /dev/null
+++ b/packages/lms/src/routes/content/feu1/html-css/module-3/css-grids/+page.md
@@ -0,0 +1,167 @@
+---
+title: CSS Grids
+tags:
+  - HTML and CSS
+type: Lesson
+---
+
+## Introduction
+
+While the [CSS Flexbox](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout/Basic_Concepts_of_Flexbox) works one-dimensionally, either vertically or horizontally, CSS Grids can work two-dimensionally simultaneously. This allows you to create more advanced layouts using the single system.
+
+CSS Grids is so-named because it’s based on the idea of a grid running horizontally and vertically across and down the screen. We can use CSS Grids to determine how many horizontal and vertical spaces in the grid each element should take up.
+
+## Important Concepts
+
+### Grid Container
+
+- To get started using CSS Grids, you need to create what is called the [grid container](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout/Basic_Concepts_of_Grid_Layout#grid_container).
+- To do this, set `display: grid` on a parent element.
+- This will allow you to use CSS Grids to create rows and columns inside of that element.
+
+### Grid Item
+
+- A grid item is one of the direct child elements to the grid container.
+- These are the items that will take up space in our grids.
+
+### Gap
+
+- The `gap` property is used to set the space between columns and rows in the grid.
+
+### Grid-template-columns and rows
+
+- To control the size of rows or columns you use `grid-template-columns` and `grid-template-rows`.
+
+```html
+<section class="container">
+  <div>
+    <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec scelerisque bibendum enim.</p>
+  </div>
+  <div>
+    <p>Sed convallis malesuada nisl, id laoreet nulla vulputate nec.</p>
+  </div>
+  <div>
+    <p>In varius ac ipsum in interdum.</p>
+  </div>
+  <div>
+    <p>
+      Vivamus ornare pretium mauris, tristique vulputate ex porttitor non. Nullam mattis lorem mattis fermentum
+      pulvinar.
+    </p>
+  </div>
+</section>
+```
+
+```css
+.container {
+  display: grid;
+  grid-template-columns: auto 1fr;
+  grid-template-rows: 1fr auto;
+  grid-gap: 10px;
+  min-height: 400px;
+}
+
+.container div {
+  background: lightblue;
+}
+```
+
+- The CSS above creates a grid container with two columns. The first column is set to `auto` and the second column is set to `1fr`.
+- The grid container also has two rows. The first row is set to `1fr` and the second row is set to `auto`. It’s important to see the `min-height` which allows us to see the row heights.
+
+> ℹ️ **INFO**
+>
+> Note: By setting a column or a row to `auto`, the column or row will take up as much space as it _requires_ on the page. When using the `1fr`, the column or row takes up the remaining _available_ space left over.
+
+### Grid-template-areas
+
+One of the greatest aspects of CSS Grids is the ability to create [grid areas](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout/Grid_Template_Areas). Especially useful is that the syntax (how the CSS is written) is how it will appear on the page.
+
+If you had a `<header>`, `<nav>`, `<main>`, `<footer>` in your HTML, you could set these areas as a grid area.
+
+```html
+<header>
+  <h1>Welcome to My Website</h1>
+</header>
+<nav>
+  <ul>
+    <li><a href="index.html">Home</a></li>
+    <li><a href="about.html">About</a></li>
+    <li><a href="contact.html">Contact</a></li>
+  </ul>
+</nav>
+<main>
+  <h2>This site is about a topic</h2>
+  <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>
+  <p>Donec scelerisque bibendum enim. Sed convallis malesuada nisl, id laoreet nulla vulputate nec.</p>
+</main>
+<footer>&copy; Copyright</footer>
+```
+
+```css
+header {
+  grid-area: myheader;
+  background: orange;
+}
+nav {
+  grid-area: mynav;
+  background: lightblue;
+}
+main {
+  grid-area: mymain;
+  background: lightgreen;
+}
+footer {
+  grid-area: myfooter;
+  background: yellow;
+}
+
+body {
+  display: grid;
+  grid-template-areas:
+    'myheader mynav'
+    'mymain mynav'
+    'mymain myfooter';
+}
+```
+
+- Note that the `grid-area` property is used to create the area, and the developer decides the value, for example, `myheader`, `mynav` etc.
+- With the grid areas defined, we can use `grid-template-area`s to arrange our content into rows and columns.
+
+> **📄 DOCUMENTATION**
+>
+> MDN docs on CSS grids: [CSS Grid Layout](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout).
+
+---
+
+## Activities
+
+### Activity 1
+
+**WATCH**
+
+[This tutorial video on CSS grids.](https://scrimba.com/scrim/cWvWwNcP?pl=paaBbTa) (8m 38s)
+
+### Activity 2
+
+**READ**
+
+[A Complete Guide to Grid](https://css-tricks.com/snippets/css/complete-guide-grid/) by CSS Tricks, use this as a reference guide. You might find it difficult to read it all in one go, so read a bit and then experiment and come back to it.
+
+### Activity 3
+
+**WATCH**
+
+Video: Build a Classic Layout FAST in CSS Grid (8m 29s)
+
+<iframe width="560" height="315" src="https://www.youtube.com/embed/KOvGeFUHAC0" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
+
+---
+
+## Lesson Task
+
+### Brief
+
+There are practice questions in the master branch of [this repo](https://github.com/Noroff-Education/lesson-task-htmlcss-module3-lesson3).
+
+Attempt the answers before checking them against the answers in the [answers branch](https://github.com/Noroff-Education/lesson-task-htmlcss-module3-lesson3/tree/answers) of the repo.
diff --git a/packages/lms/src/routes/content/feu1/html-css/module-3/flexbox/+page.md b/packages/lms/src/routes/content/feu1/html-css/module-3/flexbox/+page.md
new file mode 100644
index 0000000..57869c8
--- /dev/null
+++ b/packages/lms/src/routes/content/feu1/html-css/module-3/flexbox/+page.md
@@ -0,0 +1,232 @@
+---
+title: Flexbox
+tags:
+  - HTML and CSS
+type: Lesson
+---
+
+## Introduction
+
+The CSS Flexbox utility is used to create one-dimensional layouts that allow us to place items in rows or columns. It is called a “flexbox” because items adjust to either fill empty space or shrink to fit into smaller spaces, which makes the flexbox ideal for building responsive websites.
+
+It is worth noting that flexbox offers a lot of functionality to developers to create complex layouts, but it is excellent for simple layouts as well. Flexbox and other layout systems are solutions to creating a responsive layout. Before now, floating items and the use of HTML tables are the options developers relied on to lay out their content on a webpage.
+
+## Using Flexbox
+
+### display: flex
+
+To start using flexbox, you need to set a container to `display: flex`, which enables a flex context for all of its direct children. The child items will default to being displayed in a row and will divide the available space in the container amongst the child items. If the child items are too small to take up the whole container, they will stack up from the left margin.
+
+```html
+<section class="container">
+  <div class="item">
+    <p>
+      Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla nec neque pharetra, porta ipsum sed, porta turpis.
+      Proin tristique quam nunc, sed rutrum nulla varius vitae. Nulla non leo sapien. Pellentesque viverra felis eu nunc
+      ullamcorper imperdiet. Nulla a mattis elit. Pellentesque vitae tortor nulla.
+    </p>
+  </div>
+  <div class="item">
+    <p>
+      Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla nec neque pharetra, porta ipsum sed, porta turpis.
+      Proin tristique quam nunc, sed rutrum nulla varius vitae. Nulla non leo sapien. Pellentesque viverra felis eu nunc
+      ullamcorper imperdiet. Nulla a mattis elit. Pellentesque vitae tortor nulla.
+    </p>
+  </div>
+  <div class="item">
+    <p>
+      Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla nec neque pharetra, porta ipsum sed, porta turpis.
+      Proin tristique quam nunc, sed rutrum nulla varius vitae. Nulla non leo sapien. Pellentesque viverra felis eu nunc
+      ullamcorper imperdiet. Nulla a mattis elit. Pellentesque vitae tortor nulla.
+    </p>
+  </div>
+</section>
+```
+
+```css
+.container {
+  display: flex;
+}
+```
+
+```css
+.item {
+  margin: 5px;
+}
+```
+
+### Flexbox Axes
+
+Flexbox is a powerful layout that allows you to lay out the [flex item](https://developer.mozilla.org/en-US/docs/Glossary/Flex_Item) along two axes in a [flex container](https://developer.mozilla.org/en-US/docs/Glossary/Flex_Container). The axes are the main axis and the cross axis. The main axis is the primary axis along which flex items can be laid out. By default, the main axis is horizontal(row) i.e. flex items are laid out from left to right. The code snippet above is a very good example. Once you set the display property of a container to flex, the main axis is on the row while the cross axis is on the column. You can change the default by adjusting the value of the flex-direction property of a flex container.
+
+### flex-direction
+
+By default, the `flex-direction` property is set to `row`, so the flexed items will display in a row. For mobile devices, it is useful that we can switch this direction to a column so that the items now display in a vertical column. We can simply set the `flex-direction` to `column`, overriding the default value of `row`.
+
+You can also set the direction to `row-reverse` or `column-reverse`, and the items will display in the opposite order to how they have been written.
+
+```html
+<section class="container">
+  <div class="item wider-item">
+    <p>
+      Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla nec neque pharetra, porta ipsum sed, porta turpis.
+      Proin tristique quam nunc, sed rutrum nulla varius vitae. Nulla non leo sapien. Pellentesque viverra felis eu nunc
+      ullamcorper imperdiet. Nulla a mattis elit. Pellentesque vitae tortor nulla.
+    </p>
+  </div>
+  <div class="item">
+    <p>
+      Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla nec neque pharetra, porta ipsum sed, porta turpis.
+      Proin tristique quam nunc, sed rutrum nulla varius vitae. Nulla non leo sapien. Pellentesque viverra felis eu nunc
+      ullamcorper imperdiet. Nulla a mattis elit. Pellentesque vitae tortor nulla.
+    </p>
+  </div>
+  <div class="item">
+    <p>
+      Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla nec neque pharetra, porta ipsum sed, porta turpis.
+      Proin tristique quam nunc, sed rutrum nulla varius vitae. Nulla non leo sapien. Pellentesque viverra felis eu nunc
+      ullamcorper imperdiet. Nulla a mattis elit. Pellentesque vitae tortor nulla.
+    </p>
+  </div>
+</section>
+```
+
+```css
+.container {
+  display: flex;
+  flex-direction: column;
+}
+
+.item {
+  margin: 5px;
+  flex: 1;
+}
+```
+
+### flex
+
+To set how much space the flex items take up, you can use the `flex` property followed by a number. All the flex numbers are added together, and each item is divided by the total.
+
+In the example below, the items are set to have `flex: 1`, but the class of ‘wider-item’ is set to `flex: 4`. That means the container has a total of 6 (4+1+1). The `.wider-item` gets a space of 4/6, and the other two items get a space of 1/6 each.
+
+```html
+<section class="container">
+  <div class="item wider-item">
+    <p>
+      Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla nec neque pharetra, porta ipsum sed, porta turpis.
+      Proin tristique quam nunc, sed rutrum nulla varius vitae. Nulla non leo sapien. Pellentesque viverra felis eu nunc
+      ullamcorper imperdiet. Nulla a mattis elit. Pellentesque vitae tortor nulla.
+    </p>
+  </div>
+  <div class="item">
+    <p>
+      Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla nec neque pharetra, porta ipsum sed, porta turpis.
+      Proin tristique quam nunc, sed rutrum nulla varius vitae. Nulla non leo sapien. Pellentesque viverra felis eu nunc
+      ullamcorper imperdiet. Nulla a mattis elit. Pellentesque vitae tortor nulla.
+    </p>
+  </div>
+  <div class="item">
+    <p>
+      Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla nec neque pharetra, porta ipsum sed, porta turpis.
+      Proin tristique quam nunc, sed rutrum nulla varius vitae. Nulla non leo sapien. Pellentesque viverra felis eu nunc
+      ullamcorper imperdiet. Nulla a mattis elit. Pellentesque vitae tortor nulla.
+    </p>
+  </div>
+</section>
+```
+
+```css
+.container {
+  display: flex;
+}
+
+.item {
+  margin: 5px;
+  flex: 1;
+}
+
+.wider-item {
+  flex: 4;
+}
+```
+
+### flex-wrap
+
+By default, the items will all fit on one line to take up the available space in the container. But sometimes, the items can get quite squashed. In this case, set `flex-wrap`: items will be moved, or “wrap”, onto another line if there isn’t available space.
+
+### order
+
+If you would like to restructure the order in which items appear in their container, you can set the order number in which they should appear. The lowest number shows first. This can be especially useful when working with media queries and different layouts for different device screen sizes.
+
+### justify-content
+
+The `justify-content` property sets the alignment and spacing of the flexed items along the main axis.
+
+```html
+<main>
+  <section>One</section>
+  <section>Two</section>
+  <section>Three</section>
+</main>
+```
+
+```css
+main {
+  display: flex;
+  justify-content: space-around;
+}
+
+section {
+  padding: 20px;
+  background-color: lightblue;
+}
+```
+
+In the above example, we use `justify-content: space-around` to distribute the child items evenly and leave a half-size space on either side.
+
+Here are other possible values for the `justify-content` property.
+
+- `center` places items in the `center` of the parent.
+- `start` and `end` place items either at the start of the parent or the end.
+- `space-between` places the first item at the start and the last item at the end. Items in between are then spaced evenly.
+- `space-evenly` places all items evenly with even space between them.
+
+### Gap
+
+The `gap` property is used by both Flexbox and CSS Grids to set the space between columns and rows.
+
+> **ℹ️ INFO**
+>
+> This web app can quickly help you visualize how some of the basic flexbox properties work: [https://flexbox-app.netlify.app/](https://flexbox-app.netlify.app/)
+
+---
+
+## Activities
+
+### Activity 1
+
+> **💻 WATCH**
+>
+> [This tutorial video is on flexbox.](https://scrimba.com/scrim/cNq68Wf2?pl=paaBbTa) (4m 12s)
+
+### Activity 2
+
+> 📖 **READ**
+>
+> [A Complete Guide to Flexbox](https://css-tricks.com/snippets/css/a-guide-to-flexbox/) by CSS Tricks
+
+### Activity 2
+
+> 🚀 **EXPLORE**
+>
+> [Flexbox Froggy](https://flexboxfroggy.com/)
+
+---
+
+## Lesson Task
+
+### Brief
+
+There are practice questions in the master branch of [this repo](https://github.com/Noroff-Education/lesson-task-htmlcss-module3-lesson2).
+
+Attempt the answers before checking them against the answers in the [answers branch](https://github.com/Noroff-Education/lesson-task-htmlcss-module3-lesson2/tree/answers) of the repo.
diff --git a/packages/lms/src/routes/content/feu1/html-css/module-3/media-queries/+page.md b/packages/lms/src/routes/content/feu1/html-css/module-3/media-queries/+page.md
new file mode 100644
index 0000000..745879c
--- /dev/null
+++ b/packages/lms/src/routes/content/feu1/html-css/module-3/media-queries/+page.md
@@ -0,0 +1,131 @@
+---
+title: Media Queries
+tags:
+  - HTML and CSS
+type: Lesson
+---
+
+## Introduction
+
+In the context of CSS, `media` refers to the device being used to consume the website. For example, if a user is on a mobile device, their phone is their medium. If they are viewing a printed web page, the paper is the medium.
+
+So-called `media queries` allow us to customize the appearance of HTML content for multiple devices. Although `media queries` may sound like a complicated concept, the idea is quite simple.
+
+## Media Queries
+
+Here is the syntax for a `media query`:
+
+```css
+@media (min-width: 600px) and (max-width: 1200px) {
+}
+```
+
+You will see several attributes we may include in a `media query`. These include minimum and maximum width, device orientation (for example, if the target is a handheld or wearable device) and many other properties.
+
+### Breakpoints
+
+We may refer to each `media query` as defining one or multiple _breakpoints_. The term breakpoint refers to the viewport size (width and height), and you can set _points_ where the appearance of the CSS should change. Let’s say the viewport width is under `600px`; the page content should be displayed as a column rather than a row.
+
+```css
+.container {
+  display: flex;
+}
+@media (max-width: 600px) {
+  .container {
+    flex-direction: column;
+  }
+}
+```
+
+The breakpoint here is set at `600px` width, and the code within the `media query` should only be applied when for screen sizes _up to_ `600px`, hence using the `max-width` attribute. Mobile devices are mostly under `600px` in display width, so the code inside the `media query` would be applied using `max-width: 600px`. If you’d use the `min-width` attribute instead, `flex-direction: column;` will only be applied if the viewport width is at a _minimum_ of 600px.
+
+Let’s further break down what we see in the example above.
+
+When initializing a `media query`, we use the “@” alpha symbol with “media”. The `alpha` symbol is used extensively in CSS frameworks, such as SASS, which you will learn about later in the course.
+
+### Conditions
+
+As mentioned, we have _conditions_ inside the `media query` parenthesis. Conditionals are a core concept of programming, which will be covered in detail once you start with JavaScript. However, as you need to understand what’s happening here, you’ll get a brief explanation. In simple terms, we check if a condition is true or not. Let’s look at a real-life example; if your driving speed is higher than the speed limit, you might get a fine, but only if you are caught. So the condition for getting a speeding ticket is your speed, and you’re being caught speeding. In most programming languages, we would write conditionals using something called an `if... else` statement; if(condition is true), then (do something). Take this example from JavaScript. Note: the `>` greater-than” sign.
+
+```js
+if (speed > speedLimit) {
+  if (caught) {
+    getFined();
+  } else {
+    arriveFaster();
+  }
+} else {
+  arriveSlower();
+}
+```
+
+The same principle goes for the conditions inside of the media queries: `@media (max-width: 600px)` can be written as, `if(width < 600px) { do something }`
+
+### Images
+
+Any CSS property you set outside of the `media query` can be overridden inside of the `media query`, which can be very useful. We have already looked at changing the `flex-direction` property. You can also change the background image of an element.
+
+```css
+.container {
+  background-image: url('../media/big.jpg');
+}
+@media (max-width: 600px) {
+  .container {
+    background-image: url('../media/small.jpg');
+  }
+}
+```
+
+As we have seen with Working with CSS and images, we may farm out images to CSS instead of embedding them in HTML. We can take this further by using media queries to define different images for different breakpoints, which is immensely useful. As a simple example, smaller images that download more quickly may be specified for mobile devices, making for lighter and quicker content to load. In the code above, you can see that we load a small image on smaller viewports and a bigger one on larger viewports.
+
+Generally speaking, it is best to design for the smallest viewports (mobile-sized devices at the moment, but maybe watches soon) first and create rules for progressively larger screen sizes. This argument for this is twofold: first, you will focus on a limited-size viewport, which will force you to consider the essentials. Second, people spend so much time with their mobile devices, so your website should be optimal on a mobile device viewport. The more appealing your content is on any device, the more chance people will use it on all types of devices.
+
+## META attributes for Responsive CSS
+
+We have already looked at uses for the `<meta>` element. The `<meta>` element may also contain information about how the page should be displayed, which is critical to the optimal functionality of responsive sites.
+
+While media queries help create good, responsive CSS pages, the `<meta>` element holds the final piece of the puzzle. As well as having properties for the page description and author, it includes properties for the device viewport - that is, the size of the device browser window. HTML5 has added this property to optimize the look of HTML pages styled with responsive CSS.
+
+The following meta tag example is how it may be used for optimizing a responsive page:
+
+```html
+<meta name="viewport" content="width=device-width, initial-scale=1" />
+```
+
+The initial scale attribute is also an important component of optimizing responsive content. This will ensure that elements will best fit the width of the viewport.
+
+> **📄 DOCUMENTATION**
+>
+> MDN docs on the media queries: [Using media queries](https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_queries).
+
+---
+
+## Activities
+
+### Activity 1
+
+> **💻 WATCH**
+>
+> Video: [CSS Page Layouts](https://www.linkedin.com/learning/css-page-layouts-2012/responsive-layout-overview?u=43268076) 7. Building Responsive Layouts (50m)
+
+### Activity 2
+
+> 📖 **READ**
+>
+> In _HTML and CSS: Design and Build Website_ Chapter 18: Process & Design, pp. 452-474 (1hr)
+
+### Activity 3
+
+> **💻 WATCH**
+>
+> Video: [CSS Essential Training](https://www.linkedin.com/learning/css-essential-training-2-2/welcome?u=43268076) 4. Responsive and Mobile (30m) Conclusion (32s)
+
+---
+
+## Lesson Task
+
+### Brief
+
+There are practice questions in the master branch of [this repo](https://github.com/Noroff-Education/lesson-task-htmlcss-module3-lesson4).
+
+Attempt the answers before checking them against the answers in the [answers branch](https://github.com/Noroff-Education/lesson-task-htmlcss-module3-lesson4/tree/answers) of the repo.
diff --git a/packages/lms/src/routes/content/feu1/html-css/module-3/module-3-checkpoint/+page.md b/packages/lms/src/routes/content/feu1/html-css/module-3/module-3-checkpoint/+page.md
new file mode 100644
index 0000000..16be9a0
--- /dev/null
+++ b/packages/lms/src/routes/content/feu1/html-css/module-3/module-3-checkpoint/+page.md
@@ -0,0 +1,57 @@
+---
+title: Checkpoint
+tags:
+  - HTML and CSS
+type: Lesson
+---
+
+## Introduction
+
+It's time to take what you've learned from Module 3 and apply it to your Course Assignment.
+
+## Process
+
+### Positioning
+
+Consider which elements need to use positioning. This is crucial because sometimes positioning is incorrectly used. A good example of where to use positioning is if there's a 'View More' button on the bottom right of a container. Or if the navigation is fixed to the top of the viewport.
+
+Use positioning sparingly as it's a common pitfall for students to overuse positioning rather than layout tools like Flexbox and CSS Grids.
+
+1. Add the positioning.
+
+### Flexbox
+
+Look across your site and consider where you might implement Flexbox to create your layouts. Flexbox is especially good at placing items next to each other. If you have a two column layout for your page, Flexbox is perfect for that.
+
+1. Find where Flexbox is best implemented to improve your website.
+2. Add `display: flex` and any other Flexbox properties as appropriate.
+3. Test your website.
+
+### CSS Grids
+
+1. Find where CSS Grids is best implemented to improve your website.
+2. Add `display: grid` and any other CSS Grids properties as appropriate.
+3. Test your website.
+
+### Media Queries
+
+1. Start with the mobile view and write styles to get the best view on mobile as global styles.
+2. Next make a media query for a larger screen. The viewport size you choose to target will be based on what is best for the design but is likely to be around 500-600px wide.
+3. Keep going up until you're writing styles for desktop. This is the mobile-first approach.
+
+### Questions to ask yourself about the CA so far
+
+- Am I using positioning effectively and appropriately?
+- Can I use CSS Grids and/or Flexbox to create responsive websites?
+
+To help answer these questions, you can use:
+
+- Test on different devices
+- Use your developer tools to view the site at different viewports.
+
+## Outcomes for this module
+
+You should now be able to say:
+
+- "I can use positioning effectively"
+- "I can create responsive websites"
diff --git a/packages/lms/src/routes/content/feu1/html-css/module-3/positioning/+page.md b/packages/lms/src/routes/content/feu1/html-css/module-3/positioning/+page.md
new file mode 100644
index 0000000..866b374
--- /dev/null
+++ b/packages/lms/src/routes/content/feu1/html-css/module-3/positioning/+page.md
@@ -0,0 +1,407 @@
+---
+title: Positioning
+tags:
+  - HTML and CSS
+type: Lesson
+---
+
+## Introduction
+
+We will look at how to place elements on the page using `float` and `position`properties.
+
+## Float
+
+The CSS `float` property is ideal if you want to place an image beside the text and have the text wrap around the image. We used to use `float` to build layouts, but we shouldn’t because we now have the CSS Flexbox and CSS Grids to help create solid, multi-column responsive sites.
+
+Floating removes an element from the [normal flow](https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Normal_Flow) of HTML elements and places it on the left or right side of its container or nearest element.
+
+```html
+<div>
+  <div class="float floated-right">Floated</div>
+  <h2>Float right</h2>
+  <p>The image has been floated to the right side of the text.</p>
+</div>
+
+<div>
+  <div class="float floated-left">Floated</div>
+  <h2>Float left</h2>
+  <p>The image has been floated to the right side of the text.</p>
+</div>
+```
+
+```css
+.float {
+  background: lightblue;
+  padding: 30px;
+  margin: 10px;
+}
+
+.floated-right {
+  float: right;
+}
+
+.floated-left {
+  float: left;
+}
+```
+
+> **📄 DOCUMENTATION**
+>
+> For further learning, please check out the MDN docs: [float](https://developer.mozilla.org/en-US/docs/Web/CSS/float).
+
+Two other properties that work with floating are `clear` and `clearfix`.
+
+### Clear
+
+Depending on your layout, you might not want elements to be able to float alongside an element. To help restore the normal flow of the document, we can use the `clear` property.
+
+Essentially what the `clear` property says is that nothing can float to the left side or right side, or both sides of an element. In the example below, you can see the content has two topics: dogs and cats. It only makes sense that the dog image is next to the text about dogs. Unfortunately, we don’t know how long the paragraph will be depending on the screen, so we used `clear` on the section about cats so that the cat’s text doesn’t appear next to the dog’s image.
+
+```html
+<div>
+  <img src="https://images.unsplash.com/photo-1489417139533-915815598d31" class="float" />
+  <h2>Dogs</h2>
+  <p>
+    The domestic dog (Canis lupus familiaris when considered a subspecies of the gray wolf or Canis familiaris when
+    considered a distinct species).
+  </p>
+
+  <h2 class="clear">Cats</h2>
+  <p class="clear">
+    The domestic cat (Felis silvestris catus or Felis catus) is a small, typically furry, carnivorous mammal. They are
+    often called house cats when kept as indoor pets or simply cats when there is no need to distinguish them from other
+    felids and felines. They are often valued by humans for companionship and for their ability to hunt vermin. There
+    are more than seventy cat breeds recognized by various cat registries.
+  </p>
+</div>
+
+<i>Content used under the Creative Commons Attribution-ShareAlike License from Wikipedia</i>
+```
+
+```css
+.float {
+  margin: 10px;
+  float: right;
+  width: 300px;
+}
+
+.clear {
+  clear: right;
+}
+```
+
+```css
+.float {
+  margin: 10px;
+  float: right;
+  width: 300px;
+}
+
+.clear {
+  clear: right;
+}
+```
+
+> **📄 DOCUMENTATION**
+>
+> For further learning, please check out the MDN docs: [clear](https://developer.mozilla.org/en-US/docs/Web/CSS/clear).
+
+### Clearfix
+
+Sometimes the floated content will be larger than the container it is inside, and this will make the layout break. Remember, floated elements are outside of normal document flow, so the parent element doesn’t know to adjust to the floated element’s height.
+
+A problem:
+
+```html
+<div>
+  <img src="https://images.unsplash.com/photo-1489417139533-915815598d31" class="float" />
+  <h2>Dogs</h2>
+  <p>
+    The domestic dog (Canis lupus familiaris when considered a subspecies of the gray wolf or Canis familiaris when
+    considered a distinct species).
+  </p>
+</div>
+```
+
+```css
+.float {
+  margin: 10px;
+  float: right;
+  height: 150px;
+}
+
+.clear {
+  clear: right;
+}
+
+div {
+  border: 1px solid black;
+}
+```
+
+A solution:
+
+```html
+<div class="clearfix">
+  <img src="https://images.unsplash.com/photo-1489417139533-915815598d31" class="float" />
+  <h2>Dogs</h2>
+  <p>
+    The domestic dog (Canis lupus familiaris when considered a subspecies of the gray wolf or Canis familiaris when
+    considered a distinct species).
+  </p>
+</div>
+```
+
+```css
+.float {
+  margin: 10px;
+  float: right;
+  height: 150px;
+}
+
+.clear {
+  clear: right;
+}
+
+div {
+  border: 1px solid black;
+}
+
+.clearfix::after {
+  clear: both;
+  content: '';
+  display: table;
+}
+```
+
+To help solve this issue, developers created a workaround called `clearfix`. We create a pseudo-element `::after`, which goes at the end of the `<div>`. We then clear it to force the container to adjust to the height of the floated element.
+
+## Position
+
+Using the `position` property is another helpful technique for page layout. It’s essential to properly understand positioning before diving in - many junior developers get tripped up by misusing the `position` property. There are five types of positioning: `static`, `relative`, `absolute`, `fixed` and `sticky`.
+
+### Static
+
+All elements in normal document flow have static positioning, which means the elements don’t adjust their positioning to the properties of `top`, `right`, `bottom` or `left`. It just stays in normal flow. Because `static` positioning is the default, you’re unlikely to need to set elements as position: static unless your CSS is being overwritten out of your control.
+
+### Relative
+
+Using `position: relative`, the element stays within the normal flow of the document but is adjusted according to the `top`, `right`, `bottom` or `left` set on the element. The new position is set ‘relative’ to its original position.
+
+```html
+<div class="container">
+  <p>
+    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut ac neque aliquam, semper massa nec, viverra odio. Donec
+    sed pretium lectus. Maecenas dapibus non purus non auctor.
+  </p>
+  <div class="relative-position">Relative positioned content</div>
+</div>
+```
+
+```css
+.relative-position {
+  position: relative;
+  top: 30px;
+  left: 30px;
+  background: lightblue;
+  padding: 10px;
+}
+
+.container {
+  height: 150px;
+}
+```
+
+### Absolute
+
+Using `position: absolute`, move the element out of the document’s normal flow. It sets its positioning based on the next parent element to have `relative` or `absolute` positioning. If there is no positioning element, it will default to the viewport.
+
+> ℹ️ **INFO**
+>
+> Note: we often use `relative` positioning on a parent element to limit an `absolute` positioned element.
+
+```html
+<div class="container">
+  <p>
+    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut ac neque aliquam, semper massa nec, viverra odio. Donec
+    sed pretium lectus. Maecenas dapibus non purus non auctor.
+  </p>
+  <div class="absolute-position">Absolute positioned content</div>
+</div>
+```
+
+```css
+.absolute-position {
+  position: absolute;
+  top: 30px;
+  left: 30px;
+  background: lightblue;
+  padding: 10px;
+}
+
+.container {
+  position: relative;
+  height: 150px;
+}
+```
+
+### Fixed
+
+Fixed positioning also moves the element out of the normal flow (**similar to absolute positioning**), but with fixed positioning, the element is unaffected by scrolling. A fixed element is positioned based on the browser’s viewport.
+
+```html
+<div class="container">
+  <p>
+    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut ac neque aliquam, semper massa nec, viverra odio. Donec
+    sed pretium lectus. Maecenas dapibus non purus non auctor.
+  </p>
+  <p>
+    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut ac neque aliquam, semper massa nec, viverra odio. Donec
+    sed pretium lectus. Maecenas dapibus non purus non auctor.
+  </p>
+  <p>
+    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut ac neque aliquam, semper massa nec, viverra odio. Donec
+    sed pretium lectus. Maecenas dapibus non purus non auctor.
+  </p>
+  <p>
+    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut ac neque aliquam, semper massa nec, viverra odio. Donec
+    sed pretium lectus. Maecenas dapibus non purus non auctor.
+  </p>
+  <p>
+    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut ac neque aliquam, semper massa nec, viverra odio. Donec
+    sed pretium lectus. Maecenas dapibus non purus non auctor.
+  </p>
+  <div class="fixed-position">Fixed positioned content</div>
+</div>
+```
+
+```css
+.fixed-position {
+  position: fixed;
+  top: 30px;
+  left: 30px;
+  background: lightblue;
+  padding: 10px;
+}
+```
+
+### Sticky
+
+`position: sticky` is a mix of `position: relative` and `position: fixed`. It allows us to set an element relatively positioned and, when a certain position is reached, turn it into a `fixed` element. It’s often used with menus to get them to stick to the top of the viewport after the user has scrolled down so that the menu is always available for the user.
+
+```html
+<div class="container">
+  <p>
+    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut ac neque aliquam, semper massa nec, viverra odio. Donec
+    sed pretium lectus. Maecenas dapibus non purus non auctor.
+  </p>
+  <div class="sticky-position">Sticky positioned content</div>
+  <p>
+    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut ac neque aliquam, semper massa nec, viverra odio. Donec
+    sed pretium lectus. Maecenas dapibus non purus non auctor.
+  </p>
+  <p>
+    Quisque et mi sed lectus molestie porttitor et nec orci. Praesent non maximus enim. Aenean fermentum elementum orci
+    ut lacinia. Curabitur rutrum vestibulum elit, vel vehicula nisl sagittis in. Curabitur facilisis nec diam eget
+    consequat.
+  </p>
+  <p>
+    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut ac neque aliquam, semper massa nec, viverra odio. Donec
+    sed pretium lectus. Maecenas dapibus non purus non auctor.
+  </p>
+  <p>
+    Quisque et mi sed lectus molestie porttitor et nec orci. Praesent non maximus enim. Aenean fermentum elementum orci
+    ut lacinia. Curabitur rutrum vestibulum elit, vel vehicula nisl sagittis in. Curabitur facilisis nec diam eget
+    consequat.
+  </p>
+  <p>
+    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut ac neque aliquam, semper massa nec, viverra odio. Donec
+    sed pretium lectus. Maecenas dapibus non purus non auctor.
+  </p>
+  <p>
+    Quisque et mi sed lectus molestie porttitor et nec orci. Praesent non maximus enim. Aenean fermentum elementum orci
+    ut lacinia. Curabitur rutrum vestibulum elit, vel vehicula nisl sagittis in. Curabitur facilisis nec diam eget
+    consequat.
+  </p>
+  <p>
+    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut ac neque aliquam, semper massa nec, viverra odio. Donec
+    sed pretium lectus. Maecenas dapibus non purus non auctor.
+  </p>
+  <p>
+    Quisque et mi sed lectus molestie porttitor et nec orci. Praesent non maximus enim. Aenean fermentum elementum orci
+    ut lacinia. Curabitur rutrum vestibulum elit, vel vehicula nisl sagittis in. Curabitur facilisis nec diam eget
+    consequat.
+  </p>
+</div>
+```
+
+```css
+.sticky-position {
+  position: sticky;
+  top: 20px;
+  background: lightblue;
+  padding: 10px;
+}
+
+.container {
+  height: 500px;
+}
+```
+
+## z-index
+
+With positioning, it’s easy to get elements on top of one another. To determine the order in which elements stack up, we can use the `z-index` property. `z-index` is relatively simple to use; the higher the `z-index` number, the higher the order it goes.
+
+```html
+<div class="container">
+  <div class="one">Block One</div>
+  <div class="two">Block Two</div>
+</div>
+```
+
+```css
+.one {
+  z-index: 2;
+  background: lightblue;
+  padding: 20px;
+  width: 200px;
+  position: relative;
+}
+
+.two {
+  z-index: 1;
+  background: lightgreen;
+  padding: 20px;
+  width: 200px;
+  position: absolute;
+  top: 40px;
+  left: 40px;
+}
+
+.container {
+  position: relative;
+  height: 100px;
+}
+```
+
+> **📄 DOCUMENTATION**
+>
+> For further learning, please check out the MDN docs: [position](https://developer.mozilla.org/en-US/docs/Web/CSS/position).
+
+---
+
+## Activities
+
+> 💻 **WATCH**
+>
+> [This video on float and position.](https://scrimba.com/scrim/c4PN2LTp?pl=paaBbTa) (7m 36s)
+
+---
+
+## Lesson Task
+
+### Brief
+
+There are practice questions in the master branch of [this repo](https://github.com/Noroff-Education/lesson-task-htmlcss-module3-lesson1).
+
+Attempt the answers before checking them against the answers in the [answers branch](https://github.com/Noroff-Education/lesson-task-htmlcss-module3-lesson1/tree/answers) of the repo.
diff --git a/packages/lms/src/routes/content/feu1/html-css/module-4/+page.md b/packages/lms/src/routes/content/feu1/html-css/module-4/+page.md
new file mode 100644
index 0000000..65d068e
--- /dev/null
+++ b/packages/lms/src/routes/content/feu1/html-css/module-4/+page.md
@@ -0,0 +1,15 @@
+---
+title: Module 4
+tags:
+  - HTML and CSS
+type: Module
+previous: Module 3
+---
+
+In this module, we will start by looking at bug fixing. Fixing bugs is a big part of what we do as developers. It shouldn’t be seen as a failure that you get bugs. It’s a natural part of the process. As you become more experienced as a developer, you’ll learn to avoid making certain mistakes and get better at finding what went wrong; however, debugging will always be a part of your process. As a part of debugging, we will look at how to use your browser’s developer tools.
+
+We then move on to CSS animations and transitions, a great way of making your site more exciting and engaging. Try not to make the site too busy, and ensure the CSS you’re adding enhances the user’s experience.
+
+After that, we move on to CSS Variables which is an excellent way of reducing the amount of code you need to write in your CSS, meaning that you have fewer places to look to update your CSS.
+
+Finally, we’ll look at common responsive layouts and how to build them.
diff --git a/packages/lms/src/routes/content/feu1/html-css/module-4/animations-transitions/+page.md b/packages/lms/src/routes/content/feu1/html-css/module-4/animations-transitions/+page.md
new file mode 100644
index 0000000..f04593f
--- /dev/null
+++ b/packages/lms/src/routes/content/feu1/html-css/module-4/animations-transitions/+page.md
@@ -0,0 +1,132 @@
+---
+title: Animations and Transitions
+tags:
+  - HTML and CSS
+type: Lesson
+---
+
+## Introduction
+
+CSS enables you to create animations and transitions with ease.
+
+Animations and transitions:
+
+- enhance the user interface and can make it more engaging.
+- can make the site easier to understand and explain what’s happening, such as showing a section based on a user click or moving between pages.
+- can also focus the user’s attention and help with context switching.
+
+Be careful when adding animations and transitions. Too many of them can make it hard to focus on what is important to the user. Remember that the styling added should improve the user’s experience of the website.
+
+## Animations
+
+To create an animation, choose a name for your `animation` property and set it to the element you’d like to animate.
+
+In this example, we’re going to make a ball that bounces, so the `animation-name` we’ve chosen is ‘bounce’. We also need to set the duration of the animation using the `animation-duration` property.
+
+Once you’ve set the `animation-name` and duration, you need to set what the animation does. To set what the animation does in CSS, we need to use `@keyframes{}` and set what happens at various moments in the animation.
+
+```html
+<div class="ball"></div>
+```
+
+```css
+.ball {
+  animation-name: bounce;
+  animation-duration: 5s;
+  position: relative;
+  top: 300px;
+  height: 50px;
+  width: 50px;
+  background: red;
+  border-radius: 50%;
+}
+
+@keyframes bounce {
+  0% {
+    top: 300px;
+  }
+  50% {
+    top: 0px;
+  }
+  100% {
+    top: 300px;
+  }
+}
+```
+
+At 0% of the animation, we want the ball to be at `300px` from the top of the page. At 50% of the way through the animation, we want the ball to be at the top of the page. Then, at 100% of the animation, we want the ball to be at `300px` from the top again.
+
+You can choose what percentages you use and what styling is applied, but it’s important to see how we use `@keyframes` to decide what our animation does.
+
+> **DOCUMENTATION**
+>
+> Read more about `@keyframes` at the MDN Docs: [@keyframes](https://developer.mozilla.org/en-US/docs/Web/CSS/@keyframes)
+
+### Animation Properties
+
+| **Animation Property**      | What it Does                                               |
+| :-------------------------- | :--------------------------------------------------------- |
+| `animation-name`            | Name to be used in the `@keyframes` rule                   |
+| `animation-duration`        | How long the animation should run                          |
+| `animation-iteration-count` | How many times the animation should run                    |
+| `animation-fill-mode`       | What styles should apply before/after animation has run    |
+| `animation-delay`           | The delay before the animation starts                      |
+| `animation-timing-function` | Manages acceleration in the animation                      |
+| `animation-direction`       | Direction the animation should run in. It can be reversed. |
+
+> **DOCUMENTATION**
+>
+> Read more about animation properties at the MDN Docs: [Using CSS animations](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Animations/Using_CSS_animations#configuring_an_animation)
+
+## Transitions
+
+CSS transitions allow you to smooth out changes in the user interface. Unlike `animation`, they need a _trigger_ to start them. A common trigger in CSS would be a user hovering over an element.
+
+To use a `transition` on an element, you need to set to which of the properties of the element you’d like the transition to apply. In the code example below, the properties of the `.ball` element are `height`, `width`, `background-color` and `border-radius`. These properties can be modified using the CSS `transition`. You can select all or choose specific properties if you want the transition to only apply to them. Choosing individual properties also allows you to run the transitions on different delays.
+
+```html
+<div class="ball"></div>
+```
+
+```css
+.ball {
+  transition-property: background;
+  transition-duration: 2s;
+  height: 50px;
+  width: 50px;
+  background: red;
+  border-radius: 50%;
+}
+
+.ball:hover {
+  background: blue;
+}
+```
+
+In the code above, the ball will change colour on `hover`, but instead of a jarring change from red to blue, there is a two seconds transition which will ease the change.
+
+You can’t use a transition on any styling. There needs to be a way of finding middle points for the transition. For example, transitions won’t work on the `display` property because there’s no middle point; it's either on or off. If you did want to reveal/hide an element, then you would need to use the `opacity` property because there, you can transition between `0.5` and `1`, for example.
+
+> **DOCUMENTATION**
+>
+> Read more about CSS transitions at the MDN Docs: [Using CSS transitions](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Transitions/Using_CSS_transitions)
+
+---
+
+## Activities
+
+> **💻 WATCH**
+>
+> The below tutorial video on animations and transitions (13m 28s).
+
+<iframe src="https://player.vimeo.com/video/630771102?h=9ff631e16b&amp;badge=0&amp;autopause=0&amp;player_id=0&amp;app_id=58479" width="1914" height="1034" frameborder="0" allow="autoplay; fullscreen; picture-in-picture" allowfullscreen title="Animations and Transitions"></iframe>
+
+---
+
+## Lesson Task
+
+### Brief
+
+There are practice questions in the master branch of [this repo](https://github.com/Noroff-Education/lesson-task-htmlcss-module4-lesson2).
+
+Attempt the answers before checking them against the answers in the [answers branch](https://github.com/Noroff-Education/lesson-task-htmlcss-module4-lesson2/tree/answers) of the repo.
diff --git a/packages/lms/src/routes/content/feu1/html-css/module-4/bug-fixing/+page.md b/packages/lms/src/routes/content/feu1/html-css/module-4/bug-fixing/+page.md
new file mode 100644
index 0000000..9b64927
--- /dev/null
+++ b/packages/lms/src/routes/content/feu1/html-css/module-4/bug-fixing/+page.md
@@ -0,0 +1,175 @@
+---
+title: Bug Fixing
+tags:
+  - HTML and CSS
+type: Lesson
+---
+
+## Introduction
+
+One of the essential skills a developer needs is bug-fixing. It’s unlikely that your code will work as you expect it to every time, and being able to diagnose and fix it is a vital part of the process of development.
+
+There’s nothing wrong with debugging; it is just a natural part of development. Sometimes we can feel a bit overwhelmed with the errors we’re getting back, and often it’s a good idea to take a step back for a while and come back to the code with a fresh pair of eyes.
+
+A technique called ‘rubber duck debugging’ is the idea that you should have a rubber duck with you as you develop to help you if you get stuck. When you get stuck, talk to the rubber duck and explain your code to this duck. We can get so caught up in our code that taking a step back and explaining it to a person (or a duck) can give us a bit of perspective.
+
+Over-complicating solutions are one common issue you will get better at as you become more experienced. We try to write CSS in such a way that we don’t repeat ourselves and don’t write too much code, and thus we end up with spaghetti code, unable to tell what is affecting what.
+
+## Developer Tools
+
+Most major browsers have built-in Developer Tools to help you work on your projects. Here you can add and remove HTML elements and CSS styling to eventually find where the issues are and what is causing them.
+
+In this lesson, we’ll look at Firefox’s developer tools, but Chrome has similar ones.
+
+To open your developer tools, press: `Ctrl` + `Shift` + `I` on PC, and `Cmd` + `Opt` + `i` on macOS.
+
+You can also open it by right-clicking an element and then clicking ‘Inspect Element’.
+
+Click on the tabs below to discover more about Firefox’s developer tools.
+
+### Delete Node
+
+When debugging a site, especially if there is a horizontal scrollbar and you can’t find what is causing it, it’s a good idea to find out which element is causing the issue.
+
+Slowly remove elements from the page until you see which element is causing the issue.
+
+To remove elements from the page, right-click and select ‘delete node’.
+
+<div align="center">
+    <figure>
+        <img src="../images/htmlcss/4-1-deletenode.png" alt="Delete node">
+    </figure>
+    <figcaption>Figure: Delete node</figcaption>
+</div>
+
+You can also create a new node or duplicate a node.
+
+### Edit as HTML
+
+To change the HTML displayed on the page by directly editing from the console, choose ‘Edit As HTML’.
+
+Select the parent element you want to edit, and then add/change/remove any HTML inside your browser window.
+
+### Style Rules
+
+You can see what styles are applied to an element by selecting it in the inspector and then viewing the styles applied under ‘Rules’.
+
+In this example, we are looking at the `<h1>`.
+
+We can see the following:
+
+- it has a `font-size` of `3em`, which is applied in a `media query` on line 18.
+- its colour is set on line 12.
+- the sizing of `2em` is overridden by the `media query` and is crossed out.
+- it inherits its font from the body element set on line 1.
+
+<div align="center">
+    <figure>
+        <img src="../images/htmlcss/4-1-stylerules.png" alt="Style rules">
+    </figure>
+    <figcaption>Figure: Style rules</figcaption>
+</div>
+
+### WCAG Checker
+
+Another useful tool is the WCAG checker, which allows you to see if the colour of your text is WCAG compliant. Simply click the colour circle under ‘Rules’, and it’ll open up an option to adjust the colour. At the bottom, it compares the text colour with the background colour and tells you whether it is compliant. In this case, the colours are not WCAG compliant.
+
+<div align="center">
+    <figure>
+        <img src="../images/htmlcss/4-1-wcag.png" alt="WCAG">
+    </figure>
+    <figcaption>Figure: WCAG</figcaption>
+</div>
+
+### Layout
+
+The ’ Layout’ tab is a handy tool when working with Flexbox and CSS Grids, as well as for spotting any issues with the CSS Box Model.
+
+The example below shows that the main is set to flex, and we can see which items are flex items. We can also see that the header is using CSS Grid.
+
+Below, we can see that the selected element has a margin of `10px`, a `border` of `0px`, and a `padding` of `5px`. These values can be edited directly in the developer tools.
+
+<div align="center">
+    <figure>
+        <img src="../images/htmlcss/4-1-layout.png" alt="Layout">
+    </figure>
+    <figcaption>Figure: Layout</figcaption>
+</div>
+
+### Responsive Design Mode
+
+The Responsive Design Mode allows you to test your site at various screen sizes. To toggle it on, you can click the icon, which looks like a phone and tablet or press Ctrl + Shift + M on PC or Cmd + Opt + M on macOS.
+
+<div align="center">
+    <figure>
+        <img src="../images/htmlcss/4-1-designmode.png" alt="Design mode">
+    </figure>
+    <figcaption>Figure: Design mode</figcaption>
+</div>
+
+From here, you can choose a preset screen to view. You can update and choose which device screen size you’d like it to mimic. You can also update the orientation to see how a user might see the screen in landscape on a tablet, for example.
+
+<div align="center">
+    <figure>
+        <img src="../images/htmlcss/4-1-designmode2.png" alt="Design mode 2">
+    </figure>
+    <figcaption>Figure: Design mode 2</figcaption>
+</div>
+
+A great feature of Firefox is that it allows you to close the inspector and still have the responsive design mode on.
+
+> **📄 DOCUMENTATION**
+>
+> MDN docs on browser developer tools: [What are browser developer tools?](https://developer.mozilla.org/en-US/docs/Learn/Common_questions/What_are_browser_developer_tools)
+
+### More to Explore
+
+There is plenty more to explore on the developer tools. Experiment with different features to see what helps your development process. As we work with JavaScript later in the course, you’ll get even more out of the developer tools.
+
+> ℹ️ **NOTE**
+>
+> If you right-click and choose ‘View Page Source’, any issues, such as typos or unclosed elements, will be highlighted in red to show you where you went wrong.
+
+## Testing and Validation
+
+A key part of development is validating your code to ensure there aren’t simple errors. You might not spot a basic typo or error if you’ve worked with the same code for a long time. Using external tools to validate and test your site is key to creating bug-free code.
+
+### Validator.w3.org
+
+One tool you can use to validate your HTML is [validator.w3.org](https://validator.w3.org/). Simply paste your web page’s URL into the address bar, and it will point out any basic errors or mistakes. It will usually also make recommendations on how to fix each error.
+
+### WAVE Web Accessibility Evaluation Tools
+
+The [WAVE tools](https://wave.webaim.org/) allows you to test whether your website follows best practices for accessibility. It's great for conducting audits of your site. You can post the url on the website, or download the browser extension to test as you work.
+
+### Google Lighthouse
+
+Another popular tool for auditing your website is Google Lighthouse, which is available through Chrome’s Developer Tools. Google Lighthouse runs a series of checks on your website to tell you how the page has scored on aspects like performance, accessibility, best practices, and SEO. It also gives you suggestions for improving these different aspects.
+
+### Cross-Device Testing
+
+A very useful way of testing your website is to use it on a variety of devices. The more devices, operating systems, and browsers you can use to test your site, the better. Catching things like fonts not loading correctly is easy to spot. Occasionally a browser will fix an error in the code to present a page that looks correct but isn’t; another browser might not fix that same mistake.
+
+It’s worth noting that for your studies, we do not expect you to support Internet Explorer.
+
+> **📄 DOCUMENTATION**
+>
+> For further learning, please check out the docs: [Debugging HTML](https://developer.mozilla.org/en-US/docs/Learn/HTML/Introduction_to_HTML/Debugging_HTML)
+
+---
+
+## Activities
+
+### Activity 1
+
+> **💻 WATCH**
+>
+> The below tutorial video is on Debugging and Firefox Developer Tools. (38m 44s)
+
+<iframe src="https://player.vimeo.com/video/455465991?h=ef1fe37f62&amp;badge=0&amp;autopause=0&amp;player_id=0&amp;app_id=58479" width="1456" height="720" frameborder="0" allow="autoplay; fullscreen; picture-in-picture" allowfullscreen title="Debugging and Firefox Developer Tools"></iframe>
+
+### Activity 2
+
+> 📖 **READ**
+>
+> Reference guide: [Firefox Developer Tools](https://developer.mozilla.org/en-US/docs/Tools)
diff --git a/packages/lms/src/routes/content/feu1/html-css/module-4/common-layouts/+page.md b/packages/lms/src/routes/content/feu1/html-css/module-4/common-layouts/+page.md
new file mode 100644
index 0000000..21b20e9
--- /dev/null
+++ b/packages/lms/src/routes/content/feu1/html-css/module-4/common-layouts/+page.md
@@ -0,0 +1,73 @@
+---
+title: Common Layouts
+tags:
+  - HTML and CSS
+type: Lesson
+---
+
+## Introduction
+
+Let's look at common layouts you’ll find on the web. One of the first things to note is that with almost any layout, there will be multiple ways of solving the same problem.
+
+## Page Layout
+
+Let’s look at a website called Rightmove, which is used to find properties to buy or rent. The home page has a relatively simple structure, as you can see here:
+
+<div align="center">
+    <figure>
+        <img src=".../images/htmlcss/4-4-pagelayout.jpg" alt="Rightmove">
+    </figure>
+    <figcaption>Figure: Rightmove</figcaption>
+</div>
+
+Using rectangles, we can start to see how the page is laid out. There are essentially four main sections for the page:
+
+- a navigation section for which we’d use the HTML5 `<nav>` element.
+- a search section with a [call-to-action](<https://en.wikipedia.org/wiki/Call_to_action_(marketing)>).
+- a content section with links to articles etc.
+- a footer.
+
+<div align="center">
+    <figure>
+        <img src="../images/htmlcss/4-4-pagelayout2.jpg" alt="Rightmove 2">
+    </figure>
+    <figcaption>Figure: Rightmove 2</figcaption>
+</div>
+
+If we drill down into the content section, we can see that it has a two-column layout, and one of the columns has a three-column layout inside it. This nesting of columns is relatively standard across the web, and it is vital to understand how these sections nest and interact with the other sections around them.
+
+<div align="center">
+    <figure>
+        <img src="../images/htmlcss/4-4-nestingcolumns.jpg" alt="Nesting columns">
+    </figure>
+    <figcaption>Figure: Nesting columns</figcaption>
+</div>
+
+Now let’s take out the content and view the orange rectangles for the whole page. The background for the sections has been filled in to make it easier to see.
+
+<div align="center">
+    <figure>
+        <img src="../images/htmlcss/4-4-nestingcolumns2.jpg" alt="Outline">
+    </figure>
+    <figcaption>Figure: Outline</figcaption>
+</div>
+
+Let’s build the layout using CSS Grids.
+
+---
+
+## Activities
+
+> **💻 WATCH**
+>
+> [This tutorial video is on building a common layout, this time using Flexbox.](https://scrimba.com/scrim/cRqk2wCD?pl=paaBbTa) (5m)
+
+---
+
+## Lesson Task
+
+### Brief
+
+There are practice questions in the master branch of [this repo](https://github.com/Noroff-Education/lesson-task-htmlcss-module4-lesson4).
+
+Attempt the answers before checking them against the answers in the [answers branch](https://github.com/Noroff-Education/lesson-task-htmlcss-module4-lesson4/tree/answers) of the repo.
diff --git a/packages/lms/src/routes/content/feu1/html-css/module-4/css-variables/+page.md b/packages/lms/src/routes/content/feu1/html-css/module-4/css-variables/+page.md
new file mode 100644
index 0000000..9f7fb0d
--- /dev/null
+++ b/packages/lms/src/routes/content/feu1/html-css/module-4/css-variables/+page.md
@@ -0,0 +1,74 @@
+---
+title: CSS Variables
+tags:
+  - HTML and CSS
+type: Lesson
+---
+
+## Introduction
+
+On large sites, you might find that you start repeating common values. Colours are a common place where you’d repeat the same colour codes. CSS variables (also known as Custom Properties) allow you to create variables you can reuse throughout your stylesheet. It not only helps you follow the [DRY](https://en.wikipedia.org/wiki/Don%27t_repeat_yourself) (Don’t Repeat Yourself) principle but also makes the code easier to read.
+
+## CSS Variables
+
+### Syntax
+
+We set a variable’s name and value using the following syntax: `--bright-blue: #2b88ff`.
+
+The property name is set using a double hyphen, `--`. To make the variable available globally, we can set it to the `:root` pseudo-class, but there might be times you want to limit the variable’s scope.
+
+Once we’ve set the variable name and assigned it a value, we can use it to style an element using the `var()` function like so:
+
+```html
+<button>Click me</button>
+```
+
+```css
+:root {
+  --bright-blue: #2b88ff;
+  --white: #fff;
+  --horizontal-space: 0px 10px;
+}
+
+button {
+  background-color: var(--bright-blue);
+  color: var(--white);
+  padding: var(--horizontal-space);
+}
+```
+
+You can set many different properties and are likely to use them on things like font families, font sizes, colours, spacing, and more.
+
+CSS variables are subject to CSS’s cascading rules and so can be overridden. This can be especially useful if you change the value of a variable in your media queries.
+
+We mentioned that you could limit the variable _scope_. When you place the CSS variables inside the `<body>` element, these variables can be accessed by each of its direct child elements. If you place these variables inside a `<nav>` element, all the child elements can access these variables; however, sibling or parent elements of the `<nav>` elements cannot. In this way, you can limit the variable’s accessibility, or in other words, its _scope_.
+
+The term _scoping_ is one you will be more familiarized with once you start with JavaScript.
+
+### Compatibility
+
+There are some compatibility concerns. CSS Variables are not supported on Internet Explorer (IE), but most modern browsers do support it. If the site you’re developing has a significant number of users on IE, you might need to add fallback values when using your variable, although this defeats quite a lot of the purpose of using CSS Variables. As with many compatibility concerns, especially with IE, it’s a choice you need to make about how important IE is.
+
+### @import
+
+The `@import` rule allows us to import styles from other stylesheets. We might choose to make multiple stylesheets for different aspects of our site. Having one stylesheet for all our styles is better for performance as there are fewer calls to the server, but it doesn’t give a good experience as a developer.
+
+To see an example of how to set that up, you can clone [this repo](https://github.com/NoroffFEU/import-for-css-variables) and see how @import is used to load stylesheets into one style.css file.
+
+---
+
+## Activities
+
+> **💻 WATCH**
+>
+> Video: [CSS custom properties overview](https://www.linkedin.com/learning/css-variables-and-fluid-layouts/css-custom-properties-overview) (3m 44s) Video: [Configure CSS custom properties](https://www.linkedin.com/learning/css-variables-and-fluid-layouts/configure-css-custom-properties) (2m 26s) Video: [CSS custom properties and inheritance](https://www.linkedin.com/learning/css-variables-and-fluid-layouts/css-custom-properties-and-inheritance) (4m 27s)
+
+---
+
+## Lesson Task
+
+### Brief
+
+There are practice questions in the master branch of [this repo](https://github.com/Noroff-Education/lesson-task-htmlcss-module4-lesson3).
+
+Attempt the answers before checking them against the answers in the [answers branch](https://github.com/Noroff-Education/lesson-task-htmlcss-module4-lesson3/tree/answers) of the repo.
diff --git a/packages/lms/src/routes/content/feu1/html-css/module-4/module-4-checkpoint/+page.md b/packages/lms/src/routes/content/feu1/html-css/module-4/module-4-checkpoint/+page.md
new file mode 100644
index 0000000..8100fbd
--- /dev/null
+++ b/packages/lms/src/routes/content/feu1/html-css/module-4/module-4-checkpoint/+page.md
@@ -0,0 +1,48 @@
+---
+title: Checkpoint
+tags:
+  - HTML and CSS
+type: Lesson
+---
+
+## Introduction
+
+It's time to take what you've learned from Module 3 and apply it to your Course Assignment.
+
+## Process
+
+### Bug Fixing
+
+1. Open up your developer tools in your browser.
+2. Use the responsive design mode and make sure that there are no horizontal scrollbars at any width, as well as that the site looks good across screen sizes.
+3. If you do encounter bugs and issues, use the developer tools to figure out what went wrong and how to fix it.
+4. Use the [Wave tools](https://wave.webaim.org/) to test the site's accessibility.
+5. Use the [W3C Markup Validation Service](https://validator.w3.org/) to test the HTML of your site.
+
+### Animations and Transitions
+
+1. Consider if there are any places you can add animations or transitions to your website to smooth out the interactions. If there are, add them to the website.
+
+### CSS Variables
+
+1. Identify values that get used often, fonts and colors are usually a good examples.
+2. Create your CSS Variables and update the values to use your newly created variables.
+
+### Questions to ask yourself about the CA so far
+
+- Is my code bug-free?
+- Can I use CSS Variables to avoid repeated values?
+- Can I use animations and transitions to smoothe interactions on the site?
+
+To help answer these questions, you can use:
+
+- [W3C Validator](https://validator.w3.org/)
+- Test on different devices
+
+## Outcomes for this module
+
+You should now be able to say:
+
+- "I write bug-free HTML"
+- "I am confident with using CSS Variables"
+- "I understand how animations and transitions are added, and can add them to a website"
diff --git a/packages/lms/src/routes/content/feu1/introduction/+page.md b/packages/lms/src/routes/content/feu1/introduction/+page.md
new file mode 100644
index 0000000..d4b88ec
--- /dev/null
+++ b/packages/lms/src/routes/content/feu1/introduction/+page.md
@@ -0,0 +1,5 @@
+---
+title: Introduction
+tags:
+type: Course
+---
diff --git a/packages/lms/src/routes/content/feu1/introduction/ca/+page.md b/packages/lms/src/routes/content/feu1/introduction/ca/+page.md
new file mode 100644
index 0000000..e379c37
--- /dev/null
+++ b/packages/lms/src/routes/content/feu1/introduction/ca/+page.md
@@ -0,0 +1,19 @@
+---
+title: Course Assignment
+tags:
+  - Introduction
+  - test
+  - abc
+type: Assessment
+previous: Module 1
+---
+
+## Brief
+
+At the end of every course is a course assignment. This Course Assignment isn't for marks, but it's good to get used to the process of reading a brief and process for the Course Assignment. The main aim in this assignment is to meet your classmates and get to know the people you're studying with.
+
+## Level 1 Process
+
+1. A link to MS Teams was sent in your welcoming email from a student success manager. Go to the class Team and request to join. Once you're added to the Team, write a presentation of yourself including things like your background, location and interests.
+
+2. Now update your user profile on Moodle. Provide a picture or an avatar, and write about yourself and your interests, so that tutors and fellow students get to know you. This could for instance be a shorter version of what you posted on Teams.
diff --git a/packages/lms/src/routes/content/feu1/introduction/module-1/+page.md b/packages/lms/src/routes/content/feu1/introduction/module-1/+page.md
new file mode 100644
index 0000000..f935827
--- /dev/null
+++ b/packages/lms/src/routes/content/feu1/introduction/module-1/+page.md
@@ -0,0 +1,54 @@
+---
+title: Module 1
+tags:
+  - Introduction
+type: Module
+---
+
+Welcome to the Front-end Development study-programme! We're excited to have you joining us on this course.
+
+Front-end Development is an exciting, new field that is quickly becoming an important role in the modern world. As businesses and organisations have started to understand the importance of having a good user experience online, so the importance of front-end development has risen.
+
+Front-end differs from other areas of programming because of its dual-focus: code on the one hand, and design on the other. A Front-end Developer is able to understand the needs and wants of a user, and then how to use code and design to achieve those results.
+
+![HTMl, CSS, JS plus Design](../images/introduction/introduction-code-and-design.png)
+
+We will be giving you all the skills and building blocks you need to become a great front-end developer; able to design user-friendly websites and use HTML, CSS, and JavaScript to build them.
+
+**NOTE:** This first course contains an introduction module where you will learn how to be a webstudent. We will help you go through and learn everything you need to focus 100% on your studies. Please read the text below this table, before you start on the content. It contains important information that you should be aware of.
+
+## Course assignment
+
+Each course in the programme will have from one to several modules, and each module will have their own overview. Here it is suggested how the student should spread his/her study time across the various lessons. The times supplied for each lesson are an approximation, and could vary from student to student, and lesson to lesson.
+
+In addition, in this first course, everything will be explained in more detail than in later courses. If you are ever unsure what something means, go back to this introduction course and read the descriptions carefully. Please make sure you read through the Important Information section on Moodle.
+
+## Course, modules and lessons
+
+This course only contains one module, which spans for four days for full-time students, and eight days for part-time students.
+
+The estimated time a student should be prepared to spend is around 20 hours in total - around half of a "normal" module, which is around 40 hours.
+
+A lesson (including its assignment, if any) has an estimated workload of approximately 8 hours, but this might vary slightly. This equals one day for full-time students, and two days for part-time students. For this introduction week, the workload is set up to be slightly lower so that we are sure you will have enough time to understand everything.
+
+Each module contains all the lessons and assignments that you should complete, a suggested schedule to help you plan your time. You may complete everything at your own pace, as long as you meet the delivery deadline for each module. The deadines are listed in your progression plan.
+
+The time estimated each day gives you an indication on how much we are expecting from you for each task. If you are ever in doubt if you have done the task correctly, ask your tutor or fellow students, using the Discussions-feature.
+
+If anything is unclear, check your course plan, and/or contact a tutor on the discussions.
+
+## Deliveries
+
+The assignments tied to the lessons are normally not to be delivered (unless stated otherwise), but they might require you to participate in a discussion, to complete a quiz, or even produce material for your later module assignments.
+
+Normally, each module will contain a module assignment. However, there are exceptions, such as if there is a course assignment in its place. This will often be the case on the last module of a course. In the case of the introduction-course, there is only one module in the course - and you are therefore taken straight to your course assignment.
+
+Please note that all module and course assignments are to be submitted within their respective deadlines listed in your progression plan, via the LMS unless stated otherwise.
+
+Late deliveries on a course assignment or project, will cause you to fail.
+
+Now you can start on the lessons. Make sure you go through the lessons and assignments in order.
+
+## Extra lessons/videos
+
+From time to time, we might link useful content in the overview that is not necessarily a part of the study plan, but is considered "very useful" and "nice to know". This we recommend that you have a look at if you have time to spare.
diff --git a/packages/lms/src/routes/content/feu1/introduction/module-1/file-delivery-lanekassen/+page.md b/packages/lms/src/routes/content/feu1/introduction/module-1/file-delivery-lanekassen/+page.md
new file mode 100644
index 0000000..12100aa
--- /dev/null
+++ b/packages/lms/src/routes/content/feu1/introduction/module-1/file-delivery-lanekassen/+page.md
@@ -0,0 +1,111 @@
+---
+title: File delivery and Lånekassen
+tags:
+  - Introduction
+type: Lesson
+---
+
+## Introduction
+
+Welcome to the lesson on File Delivery and Lånekassen. Remember, if you have questions just start a discussion and we will be there to help.
+
+## Lånekassen
+
+Within 24 hours of your first login on the course, Noroff will send a message to Lånekassen that you have met. This is of course only relevant for those who have applied for a student loan and/or scholarships there. If by 48 hours you still haven't been confirmed, make sure to contact us as soon as possible.
+
+## Invoices
+
+By now, you have most likely received an invoice from Noroff for your first semester. Depending on when you have applied, this might have a tight due date - and perhaps you still need to wait a couple of days before you have your funding from Lånekassen.
+
+Don't worry - we will not send out a payment reminder the first week past the due date. However, should you discover early that you might get problems with paying within this timeframe, please contact <regnskap@noroff.no> as early as possible.
+
+Invoice dates (as of 2020) are as follows:
+
+| Startup      | January     | March    | August       | October     |
+| ------------ | ----------- | -------- | ------------ | ----------- |
+| Invoice Date | 1 February  | 1 April  | 1 September  | 1 November  |
+| Due Date     | 15 February | 15 April | 15 September | 15 November |
+
+## Student ID
+
+Online students can [follow this guide](https://noroff.sharepoint.com/:o:/r/sites/Pub/Helpdesk/Students/Technical%20guides%20for%20students?d=w456b8f231d7545c68094741f35dfca98&csf=1&web=1&e=UF9r9U) to get a student ID.
+
+## How to deliver
+
+There are a few rules that you must follow, such as naming conventions, file formats, image resolutions and more. The Level 1 process is mandatory for all assignments, while Level 2 is optional for students looking to stretch themselves.
+
+### What to include
+
+For all assignments and projects, you should include a set of files. Normally this will be listed in the assignment. It could be idea development files, work files and assets, finished products, and reports. To make it clean and tidy, you should always name these files a certain way, and put them into separate folders for each category.
+
+If the assignment asks for a submission in PDF, please ensure the boundaries of the page fit in the PDF and there is no clipping on the edges.
+
+## Main folder
+
+Always submit your work for any assignment as one or more separate files. Your submission file(s) should be named as follows:
+
+- Date(YYYY-MM-DD)\_Course_AssignmentShortcode_YourName_FileType
+
+Examples of filenames based on this scheme are:
+
+- 2017-08-24_intro_ma1_John-Doe_report.pdf
+- 2017-11-13_design1_ca_Jane-Doe_fp.mov
+- 2018-02-21_htmlcss_ma2_Ola-Nordmann_fp.png
+
+**NOTE:** Your files always need to named using the file naming convention, unless told otherwise on the assignment brief.
+
+## File categories
+
+Below are some of the file categories that you might encounter:
+
+- Drawings (dr)
+- Idea Development (id)
+  - Sketches
+  - Brainstorming
+  - Research
+  - Other
+- Work file (wf) – Any relevant working file, for instance from illustrator, photoshop or similar.
+- Finished product(s) (fp) – The finished product for delivery.
+- Report (report) – In depth, reflective summary of every phase in your assignment or project and a detailed self-evaluation. This must always be delivered as a PDF.
+
+## Upload your files
+
+When you click on the delivery-link in Moodle for your assignment or project, you'll be asked to add and upload your files.
+
+You can add comments to your delivery, but tutors do not get notified of these comments and may miss your comments. We encourage you to rather make use of Teams when you would like to ask for specific feedback on a delivery.
+
+You can edit your submission and delete / re-add files, but for your submission to be accepted it must be **submitted** before the deadline. This moves us to the next step: **Submit Assignment**.
+
+Once you hit that button, the submission will be confirmed and marked as delivered. You can no longer edit or add anything except comments.
+
+When submitting assignments you will be asked to confirm that you have not plagiarised in the submission (you will read more about plagiarism in your next lesson). Before saving changes to a submission, there will be a checkbox to tick on the delivery. Please check it before you deliver.
+
+## Missing a deadline
+
+COMPUTER CRASH (and similar reasons, cat stole your mouse, etc.) will not be accepted as an excuse for missing a delivery. You are responsible for your own equipment, and responsible for keeping daily backups!
+
+### Working inside a cloud folder
+
+It can be a very good idea to either duplicate, or work inside a cloud-folder - for instance Dropbox, Onedrive or similar. This way you are (almost) guaranteed that you won't lose your work, or even accidentally overwrite a file, as the mentioned services keeps a file history.
+
+## Extensions
+
+Students are always encouraged to make assignment deadlines on time. It is understood that students sometimes have reasons for needing an extension of an assignment delivery date due to unforeseen circumstances. Things could happen that may entail valid reasons for needing an extension such as sickness, death of a family member, having to travel, etc.
+
+If you are unable to make an assignment delivery, you must contact a student success manager by **Friday 4pm before the submission date**. The student success manager/s will assess your reason for the extension, and you will be told if you have been granted an extension and for how long.
+
+Only extensions for health reasons will be accepted with a valid doctor's note.
+
+---
+
+## Lesson task
+
+If you haven't done so already, now will be a good time to set up your personal learning environment on your home computer. It can be a good idea to work inside a cloud folder.
+
+### Setting up your personal learning environment
+
+• Create a main folder for your Front-end Development-programme. If relevant, place this inside your cloud folder so that it is always synced. Make sure you have easy access to the folder at all times. Inside this folder, you should create a structure that you find comfortable. For instance, you can create folders for all the different courses (design1, htmlcss, webcom, etc - extract this from your progression plan). It's up to you.
+
+• On the course assignment, you will have to deliver some files, so you might as well set up your folder for your first assignment right now.
+
+• Make sure you have an office-package available. Office 365 is provided by Noroff, but you can also use Google Docs. Both of these packages allow you to save your documents as PDF, which is a requirement for delivering written content.
diff --git a/packages/lms/src/routes/content/feu1/introduction/module-1/moodle-reflective-journal/+page.md b/packages/lms/src/routes/content/feu1/introduction/module-1/moodle-reflective-journal/+page.md
new file mode 100644
index 0000000..195da49
--- /dev/null
+++ b/packages/lms/src/routes/content/feu1/introduction/module-1/moodle-reflective-journal/+page.md
@@ -0,0 +1,110 @@
+---
+title: Moodle and Reflective Journal
+tags:
+  - Introduction
+type: Lesson
+---
+
+## Introduction
+
+Welcome to the second lesson of the Introduction course. Hopefully you've had a nice start, and started to familiarise yourself with your learning environment. Remember, if you have questions to use Discord or the forums and we will be there to help. Be sure to go through everything in the lesson, and then complete the lesson assignment at the end.
+
+## Moodle
+
+Moodle is our web-based portal for learning. Here you’ll find all the information and resources you need as a student. It will serve as your digital classroom. Below is a basic overview of what you will find on Moodle.
+
+## Forum
+
+In our digital classroom, an important area for learning is the forums. You’ll find dedicated forums for each subject in the digital classroom.
+
+Our forums are basically like a regular classroom filled with students and teachers, with a few minor differences (except the obvious physical ones!).
+
+When you have a question in a regular classroom, you’ll first get the teachers attention by reaching your hand in the air, and then ask your question. If you have a question in our digital classroom, you’ll first do a search (both internal on the forums, and if relevant - also Google/Yahoo!/Bing), and then ask your question in the appropriate forum.
+
+Unlike in a regular classroom where both the question and answer will disappear in thin air as soon as they are given, your questions with all their answers will be saved for you and your fellow students to review at a later stage. Also, the forums are always open to students, so you can ask questions at any time. Fellow students might be able to answer you even at night (if you are lucky), however tutors follow their normal contact hours listed previously in lesson 1.
+
+The forum is to be used for all academic and study related contact. E-mail can be used if:
+
+• You encounter a problem that hinders you in continuing the course or the delivery of an assignment/project (sickness, etc.)
+
+• You feel like the course is not at the level you would expect.
+
+• You lack the motivation to plan your days.
+
+• You have questions of a sensitive matter, or not appropriate for our dedicated forums.
+
+• New modules and lessons (Access to new modules and lessons will normally be available every Monday before 10:00. You can check your progression plan to get more information on which week you are supposed to gain access to a certain module.)
+
+## Teams
+
+The front-end development programme uses Teams as a way for students to chat between students, but also to message tutors for assistance. It’s a really useful tool to get quick feedback and direction.
+
+Classes that are active on Teams tend to produce the best results, and staying active and chatting with fellow students and asking tutors for help is an important part of your studies.
+
+## Delivery
+
+When you gain access to a new subject you will receive access to the course assignment.
+
+Refer to your progression plan for the deadlines. Normally, all assignments and projects are to be delivered before Sundays at 23:59, unless stated otherwise.
+
+## Reflective journal
+
+We recommend that students create their own reflective journal which they maintain throughout the course. It is important to be aware that the reflective journal is **not for the tutors**, but for you as a student and learner.
+
+### What is it (and not?)
+
+A reflective journal is not just a log where you list or summarise what you've done or gone through. In a reflective journal, you should focus more on your reactions, thoughts and feelings and reflect upon your work. Don't only include your success, but be sure to reflect upon your failures and mistakes too. What have you actually learned?
+
+### What should it include?
+
+• Points that you found especially interesting in your reading, and would like to follow up in more detail.
+
+• Questions that came up in your mind, because of points made in material you read on this topic.
+
+• Notes from other material you read as a result of the course - whether this was publications cited, or relevant material that you happened to read (such as newspaper articles).
+
+• A record of everything you read in this subject area, while you're doing the course, with a sentence or two on the main points an article was making and how useful you found it.
+
+• Your reflections on this course, and how well it is meeting your needs.
+
+• How your learning in this course is related to what you're learning in other ways.
+
+• Thoughts that aren't yet fully formed, but that you want to refine later. This could include your feelings about the course and your progress in it, and theories that are developing in your mind.
+
+Each time you submit your reflective journal, think back over everything you've done since the last time. Which sources did you learn most from? Which did you learn least from, and why was that? (Did you know the material already?) Write a paragraph or two about the sources of your new learning.
+
+### Maintain it
+
+Maintain your journal. Get used to writing every day, for instance after you've completed the lesson assignments. Reflect both on the lessons you've read, the videos you've watched, and the assignments you've done. Whenever you come across something interesting and relevant to your current module - or the course as a whole - get it in your journal.
+
+### What tools to use?
+
+We recommend that you use one of the many free blogging tools out there, for instance Wordpress, or a similar CMS.
+
+## LinkedIn Learning
+
+All students get **free access** to the entire training library at LinkedIn Learning featuring Lynda videos. From time to time, we will refer to videos that you must watch from this library.
+
+You can only access LinkedIn Learning via student.noroff.no. Before watching a video please ensure you are logged into student.noroff.no, and click the “LinkedIn Learning” box.
+
+## Progression plans
+
+You’ll always find an updated progression plan on the [main page of this introduction course](https://lms.noroff.no/mod/folder/view.php?id=14437).
+
+There is one progression plan for full-time students and one for part-time students. Be sure to read the correct one. This will give you an overview of your current lessons, module assignments, course assignments and projects dates. The modules are divided up in weeks so you can easily know how much time you should spend on each of them.
+
+Note that all the full-time groups will be listed in the same full-time progression plan (and similar for part-time). You can find your class on the tab at the bottom of the spreadsheets, and the dates are listed below your group-name.
+
+Please note that the progression plan dates might change slightly, especially for dates that are more than 6 months from the published version. Published dates are always included in the progression plan name. Keep an eye on Discord and the Announcements board on Moodle for any changes in the progression plan.
+
+---
+
+## Lesson task
+
+### Extracting from progression plan
+
+• Download your progression plan, and open it.
+
+• Find the deadlines for all Course Assignments and Projects.
+
+• Make a note of the deadlines. If you use a calendar such as Google Calendar or the Exchange Calendar, we recommend that you add all the deadlines there.
diff --git a/packages/lms/src/routes/content/feu1/introduction/module-1/plagiarism-referencing/+page.md b/packages/lms/src/routes/content/feu1/introduction/module-1/plagiarism-referencing/+page.md
new file mode 100644
index 0000000..5c4b725
--- /dev/null
+++ b/packages/lms/src/routes/content/feu1/introduction/module-1/plagiarism-referencing/+page.md
@@ -0,0 +1,110 @@
+---
+title: Plagiarism and Referencing
+tags:
+  - Introduction
+type: Lesson
+---
+
+## Introduction
+
+This lesson goes into plagiarism and referencing.
+
+## Plagiarism
+
+Plagiarism is a very serious offense. Copying and pasting someone else’s work might be easy, but it won’t be accepted at any tertiary institution including Noroff. If you are caught for plagiarism you could be referred to the national reporting system and could be banned from studying at any tertiary institution in Norway for 2 years.
+
+Avoiding plagiarism is very easy. All you need to do is ensure that all the work you submit is your own and nobody else’s.
+
+Here are some reasons why plagiarism is so serious:
+
+• **It’s stealing.** When you plagiarise, you are taking someone else’s intellectual property and submitting it without permission. This is illegal - at an academic level but also at a professional level. If you had to plagiarise as a professional it could lead to dismissal and law suits.
+
+• **You won’t learn anything.** If you copy someone else’s work you won’t improve yourself. Work at the assignment and try and solve it yourself. If you are struggling to understand, speak to your tutor and they will assist you. Noroff is a vocational school and the aim is to make you fit for the workplace. When you’re working for a company you won’t be able to just copy someone else’s work, you’ll need to be able to do it yourself.
+
+• **You can’t be assessed.** If you copy someone else’s work, then your tutor can’t assess whether you understand the work. The marks should actually then go to whoever wrote, designed, or coded that work.
+
+## Referencing
+
+You should reference when you have been influenced by someone else’s work or ideas. This does not mean you can copy what they have done. Your references can only be used as inspiration, and acknowledges that you didn’t know that information without that source or didn’t originate that style.
+
+If you have taken ideas from someone and not referenced them, this is also plagiarism and therefore it is important to credit your sources.
+
+In development, it is sometimes challenging to determine which resources need a citation and which resources don't. The general rule is to cite code that you did not create by yourself so as to give credit to the creator. Some code - whether it is the ideas or programs - can be stated as "common knowledge". This is an exception that does not require a citation. The same applies to cases where there is only one commonly used way to program a specific problem.
+
+When in doubt about references, the safest option is to ask for advice from your tutor.
+
+## Citing computer code in report
+
+To cite either a computer program or piece of source code you will need the following information:
+
+• Author(s) name (Individual or corporation)
+
+• Date
+
+• Title of program/source code
+
+• Code version
+
+• Type (e.g. computer program, source code)
+
+• Web address or publisher (e.g. program publisher, URL) When writing a report and citing within the text, the following method (based on common IEEE and ACM citation rules for other types of references) can be used:
+
+### For a website
+
+Author(s). "Title of page being referenced", Year published. Internet: URL. [Date it was accessed]. For example:
+
+If you were influenced by code from css-tricks.com about Flex Box you would reference them like so:
+
+R. Rendle, "Does CSS Grid Replace Flexbox?", 2017. Internet: <https://css-tricks.com/css-grid-replace-flexbox/>. [Accessed: 09- Nov- 2017].
+
+### For a book
+
+Author(s). Title of book. City: Publisher, Year published, Pages For example:
+
+S. Krug, "Don't Make Me Think Re-visited". San Francisco: New Riders, 2014, p55-p57
+
+## Frequently asked questions
+
+### Can I use someone else’s images for projects?
+
+Unless the assignment is specifically about making images, you can use images that are in the public domain or images that you have the rights to use. If you do use images in the public domain, make sure to follow their licenses and attributions and reference where the images originated from.
+
+Try looking for images from the following free stock sites: pexels.com, pixabay.com, and unsplash.com.
+
+### Can I use Lorem Ipsum or another placeholder text?
+
+Again, as long as that isn’t what is being assessed and you have the rights to use the text, you can.
+
+### Can I copy someone else’s words as long as I say whose words I used?
+
+No, because then you are submitting words that aren’t your own. You can quote a sentence from another source, but the bulk of the work must be your own.
+
+### Can I use someone else’s work if I have permission?
+
+If it is part of the submission that is going to be assessed for marks, then no you can’t. The elements of the project you are going to be marked on, must be your own.
+
+For example, if you are creating a web page and are only going to be assessed on the code and you need placeholder text, you can use someone else’s text as long as you have permission. However, if someone gives you permission to use their code, you can’t use it because then you can’t be assessed on your work.
+
+### When do I use references?
+
+You use references to say who you have been influenced by. You can’t copy from these sources, but you can be influenced by them.
+
+---
+
+## Lesson task
+
+### Explore Moodle
+
+Take a look around Moodle to familiarize yourself with its layout. Try find the following:
+
+• Profile
+
+• Participants
+
+• Forums
+
+• Progression Plans
+
+• Lessons
+
+• Deliveries
diff --git a/packages/lms/src/routes/content/feu1/introduction/module-1/planning-communication/+page.md b/packages/lms/src/routes/content/feu1/introduction/module-1/planning-communication/+page.md
new file mode 100644
index 0000000..1722d68
--- /dev/null
+++ b/packages/lms/src/routes/content/feu1/introduction/module-1/planning-communication/+page.md
@@ -0,0 +1,164 @@
+---
+title: Planning and Communication
+tags:
+  - Introduction
+type: Lesson
+---
+
+## Course language for online students
+
+This course is only offered in English. Most of the course tutors are English, and cannot read or write Norwegian. This means that ALL your communication for this course must be in English only. This includes: forum posts, emails, blogs, reflective journal entries, questions, answers and assignments.
+
+We also encourage you to only use Discord in English, even when speaking with fellow students. This helps tutors and student success managers follow conversations and jump in to help when possible.
+
+## Campus students
+
+We encourage you to use English whenever you communicate with others online.
+
+## Academic and calendar weeks
+
+It is important to understand the difference between an **academic week** and a **calendar week**.
+
+The **Calendar Week** (CW) follows the Norwegian calendar standard, which means that week 01 of the year starts in the first week with 4 weekdays or more (first week with a Thursday).
+
+The **Academic Week** (AW) is normally 40 hours of content (8 hours x 5 days), which is based upon an average full-time student's study pace. We've set up the courses so that a Module in most cases will equal one Academic Week. Please note that we never recommend to combine full-time work with being a full-time student.
+
+### Part-time students
+
+Part-time students, who should study approximately 20 hours per week, will spend two calendar weeks to complete one academic week (or one Module). Or two calendar days to complete one academic day (or one Lesson) for that matter.
+
+## Make your own plan
+
+Being a webstudent is about having the freedom to study whenever you want, within certain limitations. As long as you meet the deadlines listed in your progression plan, it's completely up to you when you want to study.
+
+We recommend that at the start of each module, you spend at least 15-30 minutes to plan ahead. Are you going to spend time on the weekend or in the evenings? Things to consider are also the teacher and tutor-support availability - more on that below.
+
+### Tutors and support
+
+• Tutor support is normally given four days a week (Tuesday - Friday).
+
+• Tutors are not available on Mondays, or over weekends – although they might choose to respond if they so wish.
+
+• The core time of tutoring is between 09:00 and 14:00 on Tuesday to Friday.
+
+• Questions asked within this period will normally be answered within a couple of hours.
+
+• Questions asked outside this time might not be answered before the next available tutor-time.
+
+For instance, if you ask a question at 13:59 on a Tuesday, it will normally be answered that same day. If you ask a question at 14:30 on a Wednesday, you might have to wait until Thursday. Any questions asked after 16:00 on Thursdays might not be answered until Monday.
+
+Plan accordingly!
+
+## Feedback types
+
+### Guidance
+
+As one of our main tutoring instruments, guidance is relevant feedback that is given to you as a tool for improving in specific areas. This constructive criticism is provided in order to help you to improve your work, and you should spend time to work through it. In many cases, this feedback also incorporates some teaching, and more clarification of materials. Guidance can be given on Discord and on the forums when requested.
+
+### Assessment
+
+Assessment is direct feedback on what worked and what didn't in a student's Module or Course Assignment.
+
+## Assignments and projects
+
+In the Front-end development programme (FEU), we have a few different types of activities or assignments. This lesson provides a short explanation of what types there are, how you will be given feedback and how your answers will be assessed.
+
+### Lesson Activities (AC)
+
+Inside a lesson, you might find one or more activities.
+
+The lesson activities are often short tasks that won't take long to complete.
+
+If you want to get feedback or help on these, you have to post them on Discord or the relevant forum. Here you can get feedback both from tutors and fellow students. **Activities are not marked.**
+
+### Lesson Tasks (LT)
+
+Normally, each lesson has a task. These are slightly more extensive than an activity, and sometimes they will form part of a module or course assignment. This will be clearly stated though, but generally the main rule for a lesson task is that it is not to be handed in. LTs are normally not marked.
+
+### Module Assignments (MA)
+
+In some modules there will be a module assignment which reflects on the work covered in that module. Some module assignments might be delivered, and some are for your you to do by yourself.
+
+Full-time students normally have a full week (7 days) to complete these assignments. Part-time students normally have two full weeks (14 days) to complete the same assignment. You are encouraged before starting the lessons of a module to read through your module/course assignment first. The deadline is usually on a Sunday before 23:59. However, always check submission dates against your progression plan.
+
+These module assignments will normally either be given a pass/fail or numerical grade within one week. You will often receive a summarized set of feedback comments, plus some guidance on what to improve. The passing grade for an MA is 4/10 (40%).
+
+Re-delivery past the submission deadline is not an option for those who haven't delivered at all, or just thrown something together to meet the deadline.
+
+### Course Assignment (CA)
+
+At the end of each course, you will also have to deliver a course assignment. This is normally a bit more extensive than a regular module assignment, and sometimes you will also have more time to complete these. Please note that all Course **Assignment marks will be listed on your Noroff Certificate as pass/fail grades.**
+
+A course assignment will normally be assessed within two weeks, and you will be given concrete feedback on whether or not your approach to the assignment was correct. The passing grade for a CA is 4/10 (40%).
+
+If you fail a CA you will be required to compete a resit with a new assignment brief. This re-sit costs an admin fee of 1500 NOK. More information on resits follows on the next page.
+
+### Projects (P)
+
+Throughout the FEU-programme, there will be a few larger projects/exams. These are graded from A-F, and will show on your Noroff Certificate as well. Refer to your progression plan to get dates for the different projects.
+
+The project will normally be graded within four weeks (20 working days) of completion and delivery. If you receive an F, you will need to resit the project in order to pass the FEU-programme.
+
+## LinkedIn Learning
+
+As a student at Noroff, you get free access to the LinkedIn Learning library of video content for the duration of your studies at Noroff. To activate your account, please follow the steps outlined below.
+
+### 1. Log in
+
+Log into <https://student.noroff.no>
+
+![My page](../images/introduction/introduction-login.jpg)
+
+### 2. Click LinkedIn icon
+
+Once logged in, click on the LinkedIn Learning icon.
+
+![My page](../images/introduction/introduction-student-access.jpg)
+
+### 3. Sync
+
+This will sync your Noroff account with LinkedIn Learning.
+
+Once you have done this, you will be able to access the links within the content to LinkedIn Learning on Moodle. Please note that you need to continue to remain logged into Moodle for this to function properly.
+
+We encourage all you to dig deeper into the themes and topics discussed in the content and LinkedIn Learning is a wonderful resource and worth digging into.
+
+### 4. Troubleshooting
+
+If for any reason you have problems viewing LinkedIn Learning videos at a later stage, please try the following before contacting support:
+
+• Go to student.noroff.no
+
+• Log out if you are logged in
+
+• Log in again
+
+• Click the LinkedIn Learning icon
+
+• Follow any instructions
+
+• You should now be able to view the videos again
+
+## Resits
+
+For all course assignments and projects/exams, the passing grade is 4/10 (40%). Assessments that receive a grade of 39% or lower will appear as a Fail grade on your Noroff Certificate. You need to pass all course assignments, projects and exams in order to pass the FEU-programme.
+
+If students wish to do a resit, they are required to register themselves for it during the resit periods. More information about this can be found under the Resits section on the FEU homepage.
+
+First attempts for all assignments are included in the tuition fee, and each resit will incur an admin fee. You have a total of 3 attempts at an assignment - your first/original attempt and two resit attempts. An unsubmitted assignment counts as an attempt.
+
+You will be invoiced for a resit once it is submitted. If you do not submit a resit on the agreed upon date or fail a resit, you will still be invoiced.
+
+You are always encouraged to attempt a course assignment/project the first time round. Your resit will be a new assignment brief, and tutor support will be limited during the resit period.
+
+### To be eligible for a resit, the student must
+
+• Show evidence of engagement during the course or provide valid reasons supported by documentation.
+
+• Register for a resit through the proper channel, after the grading of the original assignment, has been finalized.
+
+• Resits due to valid health or other reasoning supported by documentation will be free of charge.
+
+• Students cannot register for a resit unless a grade has been set during the first attempt.
+
+[Costs for resits can be found here.](https://www.noroff.no/en/admission/payment-loans-grants)
diff --git a/packages/lms/src/routes/content/feu1/introduction/module-1/what-to-expect/+page.md b/packages/lms/src/routes/content/feu1/introduction/module-1/what-to-expect/+page.md
new file mode 100644
index 0000000..93bc773
--- /dev/null
+++ b/packages/lms/src/routes/content/feu1/introduction/module-1/what-to-expect/+page.md
@@ -0,0 +1,16 @@
+---
+title: What to expect from first year
+tags:
+  - Introduction
+type: Lesson
+---
+
+To get you excited about your first year of Front-end Development and give you an insight into the sorts of things we’ll be doing on the programme, we’ve created an introduction video showing you the basics of HTML, CSS and JavaScript. You can watch the video below and see the code from the video in a GitHub repository:
+
+<div style="padding:53.92% 0 0 0;position:relative;"><iframe src="https://player.vimeo.com/video/499652381?h=7f2e09b74f&amp;badge=0&amp;autopause=0&amp;player_id=0&amp;app_id=58479" frameborder="0" allow="autoplay; fullscreen; picture-in-picture" allowfullscreen style="position:absolute;top:0;left:0;width:100%;height:100%;" title="Introduction to First Year of Front-end Development"></iframe></div><script src="https://player.vimeo.com/api/player.js"></script>
+
+[Vimeo for the above video](https://vimeo.com/499652381/7f2e09b74f)
+
+[Code from the video.](https://github.com/Noroff-Education/lesson-task-introduction)
+
+This is it - the last lesson of the introduction course. Remember if you have any questions about how, what or when to deliver - please use your class channel on Discord.
diff --git a/packages/lms/src/routes/content/feu1/javascript-1/+page.md b/packages/lms/src/routes/content/feu1/javascript-1/+page.md
new file mode 100644
index 0000000..f08bd8c
--- /dev/null
+++ b/packages/lms/src/routes/content/feu1/javascript-1/+page.md
@@ -0,0 +1,11 @@
+---
+title: JavaScript 1
+tags:
+  - JavaScript 1
+  - JavaScript
+  - JS
+  - ECMA
+  - ECMAScript
+type: Course
+previous: Semester Project 1
+---
diff --git a/packages/lms/src/routes/content/feu1/javascript-1/ca/+page.md b/packages/lms/src/routes/content/feu1/javascript-1/ca/+page.md
new file mode 100644
index 0000000..0e88c12
--- /dev/null
+++ b/packages/lms/src/routes/content/feu1/javascript-1/ca/+page.md
@@ -0,0 +1,59 @@
+---
+title: Course Assignment
+tags:
+  - JavaScript 1
+  - JavaScript
+  - JS
+  - ECMA
+  - ECMAScript
+type: Assessment
+previous: Module 4
+---
+
+## Course Assignment
+
+### Brief
+
+In this assignment, you will be required to modify your existing Cross-Course Project to fetch products from an external API. Your project should already have a product list page and a product detail page with hardcoded data, but you will now need to modify them to fetch data dynamically from the API.
+
+The product list page should display a list of all products fetched from the API, and the user should be able to click on a product to view its details on a separate product detail page. You should ensure that the product data is not hardcoded into the HTML, but instead fetched dynamically from the API to display the latest data. Your API calls should include a loading indicator to show the user that data is being fetched. Additionally, you should implement error handling to catch any errors that may occur when fetching data and display an appropriate message on the page. Make sure that your project is tested thoroughly to ensure that it works as expected.
+
+Here are the API documents for each of the APIs.
+
+- [Rainy Days API docs](https://docs.noroff.dev/ecom-endpoints/rainy-days)
+- [GameHub API docs](https://docs.noroff.dev/ecom-endpoints/gamehub)
+- [Square Eyes API docs](https://docs.noroff.dev/ecom-endpoints/square-eyes)
+
+The base URL for the API is `https://api.noroff.dev/api/v1/`.
+
+Level 1 is required.
+
+Level 2 is optional.
+
+Choosing appropriate variable and function names will form part of your assessment, as will proper and consistent formatting of your code.
+
+## Level 1 Process
+
+1. Look through your website and assess where API calls need to be made to dynamically add content. You should have a products page and a product details page, but there might be other pages like the home page where products are loaded.
+2. Remove the hardcoded products from the HTML.
+3. Fetch the products from the API and dyncamically add them to the page with links to the product details page. Use the ID as a query string parameter so that on the product details page you know which item has been clicked on.
+4. On the product details page make a request to the API for the specific data for the product that the user has clicked on.
+5. Add loading indicators when making API calls.
+6. Ensure proper error handling.
+7. Test the site.
+8. Remove console.logs you've been using for testing.
+9. Deliver the link to your site and your repository.
+
+## Level 2 Process
+
+Make a working shopping cart so that the user can add items to a shopping cart and the correct products display on the checkout page.
+
+## Information
+
+### Rules
+
+- You may only use plain JavaScript for this assignment, no libraries or frameworks. You will be given a mark of 'not passed' if you use a library or framework for your JavaScript code.
+
+### Submission
+
+- A link to your repository with the latest code committed, and a link to the site deployed on Netlify.
diff --git a/packages/lms/src/routes/content/feu1/javascript-1/ca/marking-criteria/+page.md b/packages/lms/src/routes/content/feu1/javascript-1/ca/marking-criteria/+page.md
new file mode 100644
index 0000000..b18280a
--- /dev/null
+++ b/packages/lms/src/routes/content/feu1/javascript-1/ca/marking-criteria/+page.md
@@ -0,0 +1,99 @@
+---
+title: Marking Criteria
+tags:
+  - JavaScript 1
+  - JavaScript
+  - JS
+  - ECMA
+  - ECMAScript
+type: Lesson
+---
+
+<table style="max-width: 100%">
+  <tr>
+    <th>Assessment Criteria</th>
+    <th>Learning Outcomes</th>
+    <th>Completed</th>
+  </tr>
+  <tr>
+    <td>DOM Manipulation
+      <ul>
+        <li>The API results are rendered correctly on the page</li>
+        <li>The title is updated on the details.html page</li>
+      </ul>
+    </td>
+    <td>
+      <ul>
+        <li>has knowledge of the Document Object Model (DOM)</li>
+        <li>can apply knowledge of the Document Object Model (DOM) to influence structure,content and design in HTML documents</li>
+      </ul>
+    </td>
+    <td>
+      <input type="checkbox">
+    </td>
+  </tr>
+  <tr>
+    <td>API calls
+      <ul>
+        <li>The API results display correctly on index.html</li>
+        <li>The API results display correctly on details.html when a user clicks an item from index.html</li>
+      </ul>
+    </td>
+    <td>
+      <ul>
+        <li>has knowledge or methods used to make API calls to retrieve data from servers</li>
+      </ul>
+    </td>
+    <td>
+      <input type="checkbox">
+    </td>
+  </tr>
+  <tr>
+    <td>Follows best practices
+      <ul>
+        <li>JavaScript is well-formatted</li>
+        <li>The correct syntax is followed</li>
+        <li>There are no errors in the console</li>
+        <li>The site functions as expected</li>
+      </ul>
+    </td>
+    <td>
+      <ul>
+        <li>has knowledge of JavaScript which is used for developing interactive and dynamic web solutions</li>
+        <li>has knowledge of tools that are used for writing source code</li>
+        <li>has knowledge of JavaScript syntax and structure</li>
+        <li>has knowledge of key methods for debugging JavaScript</li>
+        <li>can update his/her vocational knowledge of programming with JavaScript and revisions of the language and new versions</li>
+        <li>can apply knowledge of industry-relevant software for programming and web development with JavaScript</li>
+        <li>can develop simple, interactive and dynamic solutions with JavaScript</li>
+      </ul>
+    </td>
+    <td>
+      <input type="checkbox">
+    </td>
+  </tr>
+   <tr>
+    <td colspan="2">
+    </td>
+    <td class="grade">
+    </td>
+  </tr>
+</table>
+
+<script>
+  const checkboxes = document.querySelectorAll("input[type='checkbox']");
+  const grade = document.querySelector(".grade");
+  let criteriaPassed = 0;
+  checkboxes.forEach(item => item.onclick = function(e){
+    if(e.target.checked === true){
+      criteriaPassed++;
+      if(criteriaPassed === checkboxes.length){
+        grade.innerHTML = "Passed";
+      }
+    }
+    else {
+      criteriaPassed--;
+      grade.innerHTML = "";
+    }
+  })
+</script>
diff --git a/packages/lms/src/routes/content/feu1/javascript-1/module-1/+page.md b/packages/lms/src/routes/content/feu1/javascript-1/module-1/+page.md
new file mode 100644
index 0000000..cf52b7a
--- /dev/null
+++ b/packages/lms/src/routes/content/feu1/javascript-1/module-1/+page.md
@@ -0,0 +1,17 @@
+---
+title: Module 1
+tags:
+  - JavaScript 1
+  - JavaScript
+  - JS
+  - ECMA
+  - ECMAScript
+type: Module
+---
+
+In this module, we will:
+
+- Begin by looking at some core concepts we will use throughout our JavaScript studies, such as using the console, const and let variables, creating strings with backticks and functions as properties of objects.
+- Examine what the DOM is and how to manipulate it.
+- Look at what JSON is and how it is sent from API calls and see how we can create HTML from objects.
+- Look at function arguments and return values and how to create HTML inside a function.
diff --git a/packages/lms/src/routes/content/feu1/javascript-1/module-1/html-from-objects/+page.md b/packages/lms/src/routes/content/feu1/javascript-1/module-1/html-from-objects/+page.md
new file mode 100644
index 0000000..e2c47f2
--- /dev/null
+++ b/packages/lms/src/routes/content/feu1/javascript-1/module-1/html-from-objects/+page.md
@@ -0,0 +1,96 @@
+---
+title: Creating HTML from Objects
+tags:
+  - JavaScript 1
+  - JavaScript
+  - JS
+  - ECMA
+  - ECMAScript
+type: Lesson
+---
+
+## Introduction
+
+In this part, we’ll look at the following topics:
+
+- Arrays as properties of objects.
+- JSON - JavaScript Object Notation.
+- Loading multiple JavaScript files.
+- Creating HTML from objects.
+
+## Arrays as properties of objects
+
+We’ve seen that objects can have strings, numbers, Booleans and functions as property values.
+
+Object properties can also hold arrays:
+
+```js
+const dogs = { breeds: ['golden retriever', 'labrador', 'poodle'] };
+```
+
+[Scrimba video](https://scrimba.com/c/cKg2e7uP)
+
+## JSON
+
+**JSON** stands for JavaScript Object Notation.
+
+It is used to exchange data and is used by [REST](https://developer.mozilla.org/en-US/docs/Glossary/REST) APIs to send data between browsers (or apps) and servers.
+
+It looks like an ordinary JavaScript object.
+
+This video looks at how JSON is sent from a server via an API call.
+
+<iframe src="https://player.vimeo.com/video/444361111?h=3f57c9b751&amp;badge=0&amp;autopause=0&amp;player_id=0&amp;app_id=58479" width="2560" height="1080" frameborder="0" allow="autoplay; fullscreen; picture-in-picture" allowfullscreen title="Introduction to JSON"></iframe>
+
+## Loading multiple JavaScript files
+
+You can link to multiple JavaScript files from an HTML page, and variables and functions will be available in the order they are included.
+
+If you load multiple files like this:
+
+```js
+<script src="js/script1.js"></script>
+<script src="js/script2.js"></script>
+```
+
+Anything declared in script1.js will be available to the code in script2.js.
+
+<iframe src="https://player.vimeo.com/video/444338027?h=73615fb5ff&amp;badge=0&amp;autopause=0&amp;player_id=0&amp;app_id=58479" width="2560" height="1080" frameborder="0" allow="autoplay; fullscreen; picture-in-picture" allowfullscreen title="Using multiple JavaScript files"></iframe>
+
+## Creating HTML from objects
+
+The following three videos examine creating HTML from objects.
+
+### 1. Using a single object to create HTML
+
+The first video looks at creating HTML from a single object’s properties and adding default values for missing properties.
+
+<iframe src="https://player.vimeo.com/video/444562202?h=3290e75a25&amp;badge=0&amp;autopause=0&amp;player_id=0&amp;app_id=58479" width="2560" height="1080" frameborder="0" allow="autoplay; fullscreen; picture-in-picture" allowfullscreen title="Creating HTML from objects - Part 1"></iframe>
+
+[Code](https://github.com/NoroffFEU/creating-html-from-an-array-of-objects) from the video.
+
+### 2. Setting the innerHTML of individual elements
+
+This video looks at setting the `innerHTML` property of individual DOM elements from a single object.
+
+<iframe src="https://player.vimeo.com/video/444582197?h=4a27b67841&amp;badge=0&amp;autopause=0&amp;player_id=0&amp;app_id=58479" width="2560" height="1080" frameborder="0" allow="autoplay; fullscreen; picture-in-picture" allowfullscreen title="Creating HTML from objects - Part 2"></iframe>
+
+[Code](https://github.com/NoroffFEU/creating-html-from-an-array-of-objects/tree/part-2) from the video.
+
+### 3. Creating HTML from an array of objects
+
+In this video, HTML is created by looping through an array of objects.
+
+<iframe src="https://player.vimeo.com/video/444696340?h=adfa854388&amp;badge=0&amp;autopause=0&amp;player_id=0&amp;app_id=58479" width="2560" height="1080" frameborder="0" allow="autoplay; fullscreen; picture-in-picture" allowfullscreen title="Creating HTML from objects - Part 3"></iframe>
+
+[Code](https://github.com/NoroffFEU/creating-html-from-an-array-of-objects/tree/part-3) from the video.
+
+<hr>
+
+## Lesson Task
+
+### Brief
+
+There are practice questions in the master branch of [this repo](https://github.com/NoroffFEU/lesson-task-js1-module1-lesson3).
+
+Attempt to answer the questions before checking them against the answers in the [answer branch](https://github.com/NoroffFEU/lesson-task-js1-module1-lesson3/tree/answers) of the repo.
diff --git a/packages/lms/src/routes/content/feu1/javascript-1/module-1/html-in-functions/+page.md b/packages/lms/src/routes/content/feu1/javascript-1/module-1/html-in-functions/+page.md
new file mode 100644
index 0000000..710384a
--- /dev/null
+++ b/packages/lms/src/routes/content/feu1/javascript-1/module-1/html-in-functions/+page.md
@@ -0,0 +1,91 @@
+---
+title: Creating HTML in functions
+tags:
+  - JavaScript 1
+  - JavaScript
+  - JS
+  - ECMA
+  - ECMAScript
+type: Lesson
+---
+
+## Introduction
+
+In this part, we will look at the following topics:
+
+- Function arguments.
+- Returning values from functions, together with a practical example.
+- Creating HTML inside a function from the values inside an array.
+
+## Function arguments
+
+Function arguments are values that get passed into functions.
+
+Technically, in function declarations, the variables are called parameters.
+
+In the code below, `name` is the parameter. It’s up to you, the developer, to decide what to call the parameter. It’s called 'name’ here, but this is only one example. Giving function parameters descriptive names that reflect the expected data category or data type is a good idea.
+
+```js
+function printName(name) {
+  console.log(name);
+}
+```
+
+When we call the function using parenthesis, the value passed into the function parameter is called an `argument`.
+
+```js
+printName('Sofie');
+```
+
+What we pass in the parenthesis becomes the value of the `name` in the function. In this case, `name` will receive the value “Sofie”.
+
+So, the console log inside the function will display Sofie in the console.
+
+We want to pass different values into a function so that the code inside can perform the same actions on different values (data).
+
+![Function arguments](../images/js/1-4-functionarguments.png)
+
+[This Scrimba takes a further look at function arguments.](https://scrimba.com/c/crqy9NuP)
+
+## Returning values from functions
+
+We can return a value from a function, and we can assign that return value to a variable.
+
+[We look at how to do that in this Scrimba.](https://scrimba.com/c/czLNwafP)
+
+## A function return value example
+
+Below is an example of using the return value of a function.
+
+[In this Scrimba, a simple age-checking function for a website is created.](https://scrimba.com/c/ceqmb6fB)
+
+## Creating HTML in a function
+
+A common task you will perform when fetching data from APIs is how to use functions to create HTML with the values inside an array.
+
+[In this Scrimba:](https://scrimba.com/c/ceqmWphQ)
+
+- An array is passed into a function as an argument.
+- An HTML string is created inside the function from items in the array.
+- The string is returned from the function and assigned to a variable.
+- The variable is assigned to the innerHTML property of an existing HTML element.
+
+<hr>
+
+## Activities
+
+**WATCH**
+
+The below tutorial video on HTML in Loops (1h 51m).
+
+<iframe src="https://player.vimeo.com/video/698117262?h=a442c4c07f&amp;badge=0&amp;autopause=0&amp;player_id=0&amp;app_id=58479" width="1920" height="1080" frameborder="0" allow="autoplay; fullscreen; picture-in-picture" allowfullscreen title="HTML in Loops"></iframe>
+
+<hr>
+
+## Lesson Task
+
+### Brief
+
+There are practice questions in the master branch of [this repo](https://github.com/NoroffFEU/lesson-task-js1-module1-lesson4).
+
+Attempt to answer the questions before checking them against the answers in the [answer branch](https://github.com/NoroffFEU/lesson-task-js1-module1-lesson4/tree/answers) of the repo.
diff --git a/packages/lms/src/routes/content/feu1/javascript-1/module-1/intro-concepts/+page.md b/packages/lms/src/routes/content/feu1/javascript-1/module-1/intro-concepts/+page.md
new file mode 100644
index 0000000..1b41f4f
--- /dev/null
+++ b/packages/lms/src/routes/content/feu1/javascript-1/module-1/intro-concepts/+page.md
@@ -0,0 +1,168 @@
+---
+title: Introductory Concepts
+tags:
+  - JavaScript 1
+  - JavaScript
+  - JS
+  - ECMA
+  - ECMAScript
+type: Lesson
+---
+
+## Introduction
+
+We will now look at some concepts we will use throughout our JavaScript studies.
+
+The topics we will cover are:
+
+- Using the browser console
+- ES6
+- Declaring variables with the const and `let` keywords
+- Creating strings with backticks
+- Accessing object properties using brackets
+- Functions as properties of objects.
+
+## The browser console
+
+The browser console is one of your most essential tools when writing JavaScript.
+
+It is a good idea to keep it open to view variables you log and any errors you may encounter.
+
+We suggest using either Firefox or Chrome when developing with JavaScript.
+
+The video below will look at logging variable values using the console.
+
+<iframe src="https://player.vimeo.com/video/443132927?h=bb68f831f5&amp;badge=0&amp;autopause=0&amp;player_id=0&amp;app_id=58479" width="2560" height="1080" frameborder="0" allow="autoplay; fullscreen; picture-in-picture" allowfullscreen title="Console Commands"></iframe>
+
+## ES6
+
+ECMAScript (ES) is the official specification for JavaScript. It decides what features should be in the language.
+
+ES6, or ES2015, was released in 2015 and introduced many improvements to the language after a long gap in updates to the specification. New features are now continuously being added.
+
+ES6 is often, somewhat confusingly, used to refer to the modern versions of JavaScript.
+
+You can check the browser support for a feature (JavaScript and CSS) by using [caniuse.com](https://caniuse.com/)
+
+## const and let
+
+ES6 introduced the <b>const</b> and <b>let</b> keywords for declaring variables.
+
+A key difference between `const` and `let` is that `let` can have its value reassigned, whereas `const` cannot.
+
+If we declare a variable using `const` and assign it a value:
+
+```js
+const count = 1;
+```
+
+We cannot give it a different value. We cannot now do this, for example:
+
+```js
+count = 2;
+```
+
+[There are more details on const and let in this Scrimba video.](https://scrimba.com/scrim/cDkbEWTM)
+
+The cast begins with a brief look at the undefined value.
+
+## Strings using backticks
+
+Previously, we’ve seen that we can create strings using double or single quotes and that you should pick one and use it consistently (for any Noroff code, use double quotes).
+
+There is another way to create strings - with backticks, which is this character: `.
+
+Using backticks:
+
+- Provides an easy way to split strings across lines.
+- Provides a cleaner way to embed variables in strings.
+
+On many keyboards, the key is situated top left.
+
+<iframe src="https://player.vimeo.com/video/443988703?h=fa6ab718df&amp;badge=0&amp;autopause=0&amp;player_id=0&amp;app_id=58479" width="2560" height="1080" frameborder="0" allow="autoplay; fullscreen; picture-in-picture" allowfullscreen title="Creating strings with backticks (template literals)"></iframe>
+
+[Code](https://github.com/NoroffFEU/creating-strings-with-backticks) from the video.
+
+## Accessing object properties using brackets
+
+Previously, we accessed object properties using dot notation – a full stop.
+
+We can also access object properties using square brackets [], with the key of the property as the value inside the brackets:
+
+```js
+const pet = { type: 'dog' };
+console.log(pet['type']);
+```
+
+[This Scrimba video explores this further.](https://scrimba.com/scrim/cMgvkECv)
+
+## Functions inside objects
+
+We’ve previously seen objects with properties with string, number, or Boolean values.
+
+Objects can also have functions as properties. These are often called <b>methods</b>.
+
+[Scrimba video.](https://scrimba.com/c/cMgvJKHK)
+
+## Imports/exports
+
+We can split our code up into files using modules.
+
+To import code from another file, we need to export it first.
+
+There are two kinds of exports:
+
+1. Named exports
+2. Default exports.
+
+### Named exports
+
+Named exports are exported with the <b>export</b> keyword and imported using their name between braces.
+
+![Named exports](../images/js/1-1-namedexports.png)
+
+One file can contain many named exports.
+
+You can alias a named export using the <b>as</b> keyword.
+
+![Named exports](../images/js/1-1-namedexports2.png)
+
+### Default exports
+
+Default exports are exported with the <b>export default</b> keywords and imported without braces.
+
+![Default exports](../images/js/1-1-defaultexports.png)
+
+When you import a default export, you can import it using any name, the name you use in the import is just an alias.
+
+### Navigating directories
+
+**- Go up a folder**
+
+`../` - go back (or up) one directory (folder) from the current directory. You can use several of these to navigate further back into the directory. `../../../` will take you three folders back.
+
+**- Look in the current folder**
+
+`./` - look in the current folder for the path using imports and exports.
+
+The following video looks at using imports and exports.
+
+<iframe src="https://player.vimeo.com/video/457199012?h=f3e2f37cfe&amp;badge=0&amp;autopause=0&amp;player_id=0&amp;app_id=58479" width="2560" height="1080" frameborder="0" allow="autoplay; fullscreen; picture-in-picture" allowfullscreen title="Imports and exports with modules"></iframe>
+
+**Import/export example**
+
+The following video converts a small existing project to use modules, splitting the code up using imports and exports.
+
+<iframe src="https://player.vimeo.com/video/456346771?h=61a3fcad19&amp;badge=0&amp;autopause=0&amp;player_id=0&amp;app_id=58479" width="2560" height="1080" frameborder="0" allow="autoplay; fullscreen; picture-in-picture" allowfullscreen title="Import and export example"></iframe>
+
+[Code](https://github.com/NoroffFEU/import-export-example) from the video.
+
+<hr>
+
+## Lesson Task
+
+### Brief
+
+There are practice questions in the master branch of [this repo](https://github.com/NoroffFEU/lesson-task-js1-module1-lesson1).
+
+Attempt to answer the questions before checking them against the answers in the script.js file in the [answer branch](https://github.com/NoroffFEU/lesson-task-js1-module1-lesson1/tree/answer) of the repo.
diff --git a/packages/lms/src/routes/content/feu1/javascript-1/module-1/manipulating-dom/+page.md b/packages/lms/src/routes/content/feu1/javascript-1/module-1/manipulating-dom/+page.md
new file mode 100644
index 0000000..0d229cc
--- /dev/null
+++ b/packages/lms/src/routes/content/feu1/javascript-1/module-1/manipulating-dom/+page.md
@@ -0,0 +1,110 @@
+---
+title: Manipulating the DOM
+tags:
+  - JavaScript 1
+  - JavaScript
+  - JS
+  - ECMA
+  - ECMAScript
+type: Lesson
+---
+
+## Introduction
+
+Manipulating the DOM means adding, editing and deleting content on a web page.
+
+In this part, we’ll look at the following topics:
+
+- What the DOM is
+- How we can edit DOM elements.
+
+## The DOM
+
+DOM is:
+
+- An acronym for Document Object Model.
+- An interface, specifically an Application Programming Interface (API).
+- Provided by browsers to interact with and manipulate web pages.
+
+If you view the source of a web page (right-click -> View Page Source), what is displayed is the content - the HTML, CSS, JavaScript, etc. - sent to the browser by the server.
+
+The browser uses the DOM to manipulate this content and display the web page.
+
+How browsers implement the DOM (and JavaScript) leads to differences in how web pages are displayed.
+
+This was mainly a problem when Microsoft’s Internet Explorer (IE) was the dominant browser. Microsoft didn’t follow the ECMAScript standard, which led to frontend developers spending a lot of time getting pages to render correctly in various versions of IE.
+
+Today, IE is no longer maintained by Microsoft, and fewer companies are willing to spend time on IE fixes (though many places still drive their developers mad by insisting on catering for IE).
+
+Differences in how mobile versions of browsers implement the DOM are more likely to cause issues when rendering correctly across various devices and browsers.
+
+We can use JavaScript to manipulate the DOM by adding, editing, and deleting elements and content.
+
+### window and document objects
+
+The `window` object is the parent object in a web page displayed by a browser.
+
+One of the properties of the window object is `screen` that holds information about the screen.
+
+Type `window.screen` or just `screen` into a console and press enter to see information about your screen.
+
+Another property of `window` is `document`. The word _document_ makes up the _D_ in _DOM_.
+
+On any web page, enter the following into the console: `window document` or just `document`.
+
+`document` contains all the nodes (HTML elements) in the DOM and all the methods (functions) and properties the browser and developers can use to manipulate those elements.
+
+The video below is an intro to the DOM.
+
+<iframe src="https://player.vimeo.com/video/444052197?h=983809296b&amp;badge=0&amp;autopause=0&amp;player_id=0&amp;app_id=58479" width="2560" height="1080" frameborder="0" allow="autoplay; fullscreen; picture-in-picture" allowfullscreen title="Introduction to the DOM"></iframe>
+
+## DOM selectors
+
+To manipulate the DOM, we first need to select an element on which to do this.
+
+Many tutorials use `getElementById()` to select a node - an HTML element - by its `id` attribute. This was one of the first ways to select something in the DOM, which is still valid. We, however, will be using the newer method:
+
+- `querySelector()` - to select one element, such as a single `h1` element on a page.
+- `querySelectorAll()` - to select many elements, such as all the `li` tags in a ul element.
+
+We can call both these methods from the document object in the following way:
+
+`document.querySelector();` and `document.querySelectorAll();`
+
+The argument we pass into each of these methods is the element we want to select: a tag ("h1"), a class (".heading2") or an id ("#accordion").
+
+The video below explores selecting and editing DOM elements.
+
+<iframe src="https://player.vimeo.com/video/444301212?h=e51a5a074e&amp;badge=0&amp;autopause=0&amp;player_id=0&amp;app_id=58479" width="2560" height="1080" frameborder="0" allow="autoplay; fullscreen; picture-in-picture" allowfullscreen title="Manipulating the DOM"></iframe>
+
+[Code](https://github.com/NoroffFEU/manipulating-the-dom) from the video.
+
+## localStorage
+
+The following video looks at using `localStorage` as a variable store and the difference between `localStorage` and `sessionStorage`.
+
+<iframe src="https://player.vimeo.com/video/456596964?h=8f0cf7767a&amp;badge=0&amp;autopause=0&amp;player_id=0&amp;app_id=58479" width="2560" height="1080" frameborder="0" allow="autoplay; fullscreen; picture-in-picture" allowfullscreen title="localStorage"></iframe>
+
+## Building a favourites page
+
+In the video below, we will build a favourites page using localStorage.
+
+On the index page, clicking an icon button will add or remove an item from an array in localStorage.
+
+On the favourites page, the items in storage will be retrieved and displayed.
+
+Because `localStorage` can only store string values, we’ll use `JSON.stringify` and `JSON.parse` to set and get the array of favourites to and from storage.
+
+<iframe src="https://player.vimeo.com/video/457504978?h=726aababe6&amp;badge=0&amp;autopause=0&amp;player_id=0&amp;app_id=58479" width="2560" height="1080" frameborder="0" allow="autoplay; fullscreen; picture-in-picture" allowfullscreen title="Building a favourites page with localStorage"></iframe>
+
+[Code](https://github.com/NoroffFEU/localstorage-example) from the video.
+
+<hr>
+
+## Lesson Task
+
+### Brief
+
+There are practice questions in the master branch of [this repo](https://github.com/NoroffFEU/lesson-task-js1-module1-lesson2).
+
+Attempt to answer the questions before checking them against the answers in the script.js file in the [answer branch](https://github.com/NoroffFEU/lesson-task-js1-module1-lesson2/tree/answers) of the repo.
diff --git a/packages/lms/src/routes/content/feu1/javascript-1/module-2/+page.md b/packages/lms/src/routes/content/feu1/javascript-1/module-2/+page.md
new file mode 100644
index 0000000..fbbb8ec
--- /dev/null
+++ b/packages/lms/src/routes/content/feu1/javascript-1/module-2/+page.md
@@ -0,0 +1,17 @@
+---
+title: Module 2
+tags:
+  - JavaScript 1
+  - JavaScript
+  - JS
+  - ECMA
+  - ECMAScript
+type: Module
+previous: Module 1
+---
+
+In this module we will:
+
+- look at callback functions, forEach loops, and delayed code execution using setTimeout and setInterval.
+- examine what DOM events are and look at practical examples of them in use.
+- use string methods and properties on the values received from DOM events, and look at event bubbling, data attributes, and adding click event handlers to a variable number of elements using a loop.
diff --git a/packages/lms/src/routes/content/feu1/javascript-1/module-2/callback-functions/+page.md b/packages/lms/src/routes/content/feu1/javascript-1/module-2/callback-functions/+page.md
new file mode 100644
index 0000000..135ade5
--- /dev/null
+++ b/packages/lms/src/routes/content/feu1/javascript-1/module-2/callback-functions/+page.md
@@ -0,0 +1,81 @@
+---
+title: 'forEach, setTimeout and setInterval'
+tags:
+  - JavaScript 1
+  - JavaScript
+  - JS
+  - ECMA
+  - ECMAScript
+type: Lesson
+---
+
+## Introduction
+
+In this lesson we will look at functions as arguments - passing functions into functions.
+
+This is something that happens frequently. Functions get passed into other functions and are executed inside the receiving function.
+
+We will first take a look at how that works, and then discuss practical implementations of this pattern when looking at:
+
+- forEach method
+- setTimeout method
+- setInterval method
+
+## Functions as arguments
+
+These are often called **callbacks**. It is very common to pass functions as arguments to other functions and have the receiving function execute them.
+
+[Scrimba video](https://scrimba.com/c/cMgggbHG)
+
+## forEach method
+
+The **forEach** method (function) is an alternative to the **for** loop.
+
+When you use a forEach function, you will pass in a function to be executed by the forEach function for each item in the array you are looping over.
+
+It does have some limitations though, such as the inability to use **break** or **continue**.
+
+[Scrimba video](https://scrimba.com/c/cJggwKAN)
+
+## setTimeout
+
+The setTimeout method is used to execute a function after a specified period.
+
+It has the following structure:
+
+```js
+setTimeout(function () {
+    // do something},
+1000);
+```
+
+It has two required arguments:
+
+1. the function to be executed.
+2. the delay - the delay in milliseconds before the function is executed.
+
+[Scrimba video](https://scrimba.com/c/cLgggqTQ)
+
+## SetInterval
+
+The setInterval method is similar to setTimeout but it executes a function at a certain interval until it is cleared.
+
+It has the following structure:
+
+```js
+setInterval(function () {
+  // do something
+}, 1000);
+```
+
+[Scrimba video](https://scrimba.com/c/czLLpgfv)
+
+<hr>
+
+## Lesson Task
+
+### Brief
+
+There are practice questions in the master branch of [this repo](https://github.com/NoroffFEU/lesson-task-js1-module2-lesson1).
+
+Attempt the answers before checking them against the answers in the [answers branch](https://github.com/NoroffFEU/lesson-task-js1-module2-lesson1/tree/answers) of the repo.
diff --git a/packages/lms/src/routes/content/feu1/javascript-1/module-2/dom-events/+page.md b/packages/lms/src/routes/content/feu1/javascript-1/module-2/dom-events/+page.md
new file mode 100644
index 0000000..cd64059
--- /dev/null
+++ b/packages/lms/src/routes/content/feu1/javascript-1/module-2/dom-events/+page.md
@@ -0,0 +1,81 @@
+---
+title: DOM Events
+tags:
+  - JavaScript 1
+  - JavaScript
+  - JS
+  - ECMA
+  - ECMAScript
+type: Lesson
+---
+
+## Introduction
+
+In this lesson we will look at:
+
+- what DOM events are.
+- the click event.
+- the remainder operator.
+- the onchange event.
+
+## Introduction to Events
+
+When something happens in the browser - such as a page loading, a form being submitted or a user clicking a button, the DOM sends an Event.
+
+We can write code to respond to that event.
+
+Some examples of events include:
+
+- **click** - when the mouse button is clicked
+- **keydown** - when any key is pressed
+- **keyup** - when any key is released
+- **mouseover** - when the mouse cursor moves over a DOM element or its children elements
+- **mouseout** - when the mouse cursor moves off an element
+- **submit** - when a form is submitted
+
+You can find a full list of events [here](https://developer.mozilla.org/en-US/docs/Web/Events).
+
+An event is an object with properties.
+
+The video below is an introduction to DOM events and the click event in particular.
+
+<iframe src="https://player.vimeo.com/video/446926083?h=a8818b2a53&amp;badge=0&amp;autopause=0&amp;player_id=0&amp;app_id=58479" width="1280" height="720" frameborder="0" allow="autoplay; fullscreen; picture-in-picture" allowfullscreen title="DOM Events - Introduction to the click event"></iframe>
+
+[Code](https://github.com/NoroffFEU/dom-events-introduction-and-click-event) from the video.
+
+## The remainder operator
+
+The remainder operator %, sometimes referred to as the modulus operator, returns the remaining integer value after dividing two integers:
+
+```js
+const remainder = 5 % 2;
+// remainder will equal 1
+```
+
+[Scrimba video](https://scrimba.com/c/cMgg4eha)
+
+## The onchange event
+
+The following video looks at the onchange event of a select element and how to create HTML inside that event function.
+
+<iframe src="https://player.vimeo.com/video/446960321?h=90ff412ae1&amp;badge=0&amp;autopause=0&amp;player_id=0&amp;app_id=58479" width="2560" height="1080" frameborder="0" allow="autoplay; fullscreen; picture-in-picture" allowfullscreen title="DOM Events - onchange event"></iframe>
+
+[Code](https://github.com/NoroffFEU/dom-events-onchange-event) from the video.
+
+## Example with setTimeout
+
+In the next a video, a setTimeout function is used to mimic a loading state when creating the HTML.
+
+<iframe src="https://player.vimeo.com/video/448278416?h=ad6d582ef7&amp;badge=0&amp;autopause=0&amp;player_id=0&amp;app_id=58479" width="2560" height="1080" frameborder="0" allow="autoplay; fullscreen; picture-in-picture" allowfullscreen title="onchange event - mimicing a loading state"></iframe>
+
+[Code](https://github.com/NoroffFEU/dom-events-onchange-event/tree/extra) from the video.
+
+<hr>
+
+## Lesson Task
+
+### Brief
+
+There are practice questions in the master branch of [this repo](https://github.com/NoroffFEU/lesson-task-js1-module2-lesson2).
+
+Attempt to answer the questions before checking them against the answers in the [answers branch](https://github.com/NoroffFEU/lesson-task-js1-module2-lesson2/tree/answers) of the repo.
diff --git a/packages/lms/src/routes/content/feu1/javascript-1/module-2/length-trim-eventlistener/+page.md b/packages/lms/src/routes/content/feu1/javascript-1/module-2/length-trim-eventlistener/+page.md
new file mode 100644
index 0000000..01a5dbd
--- /dev/null
+++ b/packages/lms/src/routes/content/feu1/javascript-1/module-2/length-trim-eventlistener/+page.md
@@ -0,0 +1,50 @@
+---
+title: 'length, trim, addEventListener and onkeyup'
+tags:
+  - JavaScript 1
+  - JavaScript
+  - JS
+  - ECMA
+  - ECMAScript
+type: Lesson
+---
+
+## Introduction
+
+In this lesson we will look at:
+
+- the length property and trim() method.
+- the addEventListener function.
+- the onkeyup event.
+
+## length and trim()
+
+We can use the length property to count the number of characters in a string.
+
+The trim() method is used to remove the spaces at the beginning and end of strings.
+
+[Scrimba video](https://scrimba.com/c/cQRRVdTq)
+
+## addEventListener
+
+The Scrimba below explains how to use the addEventListener method to add event listeners to elements.
+
+[Scrimba video](https://scrimba.com/c/ckwGdkCv)
+
+## onkeyup event
+
+The following explores the onkeyup event by building a character counter for a message input.
+
+<iframe src="https://player.vimeo.com/video/448275148?h=729cff210a&amp;badge=0&amp;autopause=0&amp;player_id=0&amp;app_id=58479" width="2560" height="1080" frameborder="0" allow="autoplay; fullscreen; picture-in-picture" allowfullscreen title="DOM events - onkeyup"></iframe>
+
+[Code](https://github.com/NoroffFEU/dom-events-onkeyup) from the video.
+
+<hr>
+
+## Lesson Task
+
+### Brief
+
+There are practice questions in the master branch of [this repo](https://github.com/NoroffFEU/lesson-task-js1-module2-lesson3).
+
+Attempt to answer the questions before checking them against the answers in the [answers branch](https://github.com/NoroffFEU/lesson-task-js1-module2-lesson3/tree/answers) of the repo.
diff --git a/packages/lms/src/routes/content/feu1/javascript-1/module-2/more-dom-concepts/+page.md b/packages/lms/src/routes/content/feu1/javascript-1/module-2/more-dom-concepts/+page.md
new file mode 100644
index 0000000..c6e89e4
--- /dev/null
+++ b/packages/lms/src/routes/content/feu1/javascript-1/module-2/more-dom-concepts/+page.md
@@ -0,0 +1,62 @@
+---
+title: More DOM concepts
+tags:
+  - JavaScript 1
+  - JavaScript
+  - JS
+  - ECMA
+  - ECMAScript
+type: Lesson
+---
+
+## Introduction
+
+In this lesson we will look at:
+
+- event bubbling.
+- data attributes.
+- adding event handlers in a loop.
+- the mouseover and mouseout events.
+- the scroll event.
+
+## Event bubbling
+
+Events "bubble up" through the DOM. This video explores what that means.
+
+<iframe src="https://player.vimeo.com/video/448069050?h=4068416ad2&amp;badge=0&amp;autopause=0&amp;player_id=0&amp;app_id=58479" width="2560" height="1080" frameborder="0" allow="autoplay; fullscreen; picture-in-picture" allowfullscreen title="Event bubbling"></iframe>
+
+[Code](https://github.com/NoroffFEU/event-bubbling) from the video.
+
+## Data attributes
+
+Data attributes are a way to store information (or values) on DOM elements.
+
+We will look at how to use them in the Scrimba in the next section.
+
+## Adding event handlers in a loop
+
+[This Scrimba looks at data attributes and adding click event handlers to a variable number of elements using a loop.](https://scrimba.com/scrim/c36wvqh8)
+
+## mouseover and mouseout events
+
+The following Scrimba looks at the mouseover and mouseout events and then provides an example of using them together with data attributes.
+
+[Scrimba video](https://scrimba.com/c/cyw3zwu4)
+
+## scroll event
+
+Here we'll look at the window.scroll event using a practical example.
+
+<iframe src="https://player.vimeo.com/video/448306814?h=50c2df1c8b&amp;badge=0&amp;autopause=0&amp;player_id=0&amp;app_id=58479" width="2560" height="1080" frameborder="0" allow="autoplay; fullscreen; picture-in-picture" allowfullscreen title="Scroll event"></iframe>
+
+[Code](https://github.com/NoroffFEU/scroll-event) from the video.
+
+<hr>
+
+## Lesson Task
+
+### Brief
+
+There are practice questions in the master branch of [this repo](https://github.com/NoroffFEU/lesson-task-js1-module2-lesson4).
+
+Attempt to answer the questions before checking them against the [answers branch](https://github.com/NoroffFEU/lesson-task-js1-module2-lesson4/tree/answers) of the repo.
diff --git a/packages/lms/src/routes/content/feu1/javascript-1/module-3/+page.md b/packages/lms/src/routes/content/feu1/javascript-1/module-3/+page.md
new file mode 100644
index 0000000..4cf694f
--- /dev/null
+++ b/packages/lms/src/routes/content/feu1/javascript-1/module-3/+page.md
@@ -0,0 +1,20 @@
+---
+title: Module 3
+tags:
+  - JavaScript 1
+  - JavaScript
+  - JS
+  - ECMA
+  - ECMAScript
+type: Module
+previous: Module 2
+---
+
+In this module, we will:
+
+- look at what truthy and falsy values are.
+- look at what query strings are.
+- discuss how to make API calls using GET requests.
+- examine default parameter values in functions, build reusable functions to create HTML, and error handling.
+- see how to use arrow functions and what promises are when we use the regular promise syntax to make API calls.
+- look at what CORS errors are and how to get around them.
diff --git a/packages/lms/src/routes/content/feu1/javascript-1/module-3/arrow-functions-promises/+page.md b/packages/lms/src/routes/content/feu1/javascript-1/module-3/arrow-functions-promises/+page.md
new file mode 100644
index 0000000..dd1a361
--- /dev/null
+++ b/packages/lms/src/routes/content/feu1/javascript-1/module-3/arrow-functions-promises/+page.md
@@ -0,0 +1,148 @@
+---
+title: Arrow functions and promises
+tags:
+  - JavaScript 1
+  - JavaScript
+  - JS
+  - ECMA
+  - ECMAScript
+type: Lesson
+---
+
+## Introduction
+
+In this lesson, we look at:
+
+- arrow functions.
+- asynchronous code.
+- promises.
+- making API calls with the **then** and **catch** methods - regular promise syntax.
+
+## Arrow functions
+
+Arrow functions don’t use the function keyword and use the => characters instead, hence their name.
+
+We can rewrite the following function:
+
+```js
+function logMessage(message) {
+  console.log(message);
+}
+```
+
+like this:
+
+```js
+const logMessage = (message) => console.log(message);
+```
+
+[Scrimba video](https://scrimba.com/c/cg29pns6)
+
+## Asynchronous code
+
+In the GET request API call, we used the async and await keywords to make the call.
+
+That was an example of **asynchronous code**.
+
+Previously the code we wrote had been executed or returned a value as soon as it was encountered in the program, apart from in the setTimeout method, where we deliberately delay the execution.
+
+Async/await is a fairly recent addition to JavaScript that allows us to work with promises in a more readable fashion, but we need to also look at using promises in the regular way, as you will encounter this syntax in other people's code.
+
+If you log a message
+
+```js
+console.log('I am the first log');
+```
+
+the message is displayed as soon as the code is run.
+
+If you declare a function
+
+```js
+function logMessage() {
+  console.log('Function called');
+}
+```
+
+the function is run as soon as it's called:
+
+```js
+logMessage(); // Function called
+```
+
+The following will be executed after the function has been called.
+
+```js
+console.log('I am the second log');
+```
+
+Running all the statements above will log:
+
+```js
+// I am the first log
+// Function called
+// I am the second log
+```
+
+The code is called statement by statement and each statement waits for the previous one to finish before running. This is called synchronous code.
+
+![Asynchronous code](../images/js/3-3-asyncode.png)
+
+That might seem obvious, but sometimes it's not a good idea to wait for the previous statement to finish before executing the next one.
+
+If we made a call to a server and the user's Internet connection was slow or the server was busy, waiting for the call to return before running the next code would create a poor user experience as the interface would appear unresponsive.
+
+**Asynchronous** code doesn't wait for the current statement to finish running before executing the next statement.
+
+## Promises
+
+Promises are a way to execute code asynchronously. When we call a promise, our code doesn’t wait for a response, but moves on to the next line of code.
+
+![Promises](../images/js/3-3-promises.png)
+
+Once executed, the promise is **pending**. At some point it will return and will either have been **fulfilled** or **rejected**.
+
+![Promises2](../images/js/3-3-promises2.png)
+
+From [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise):
+
+A Promise is in one of these states:
+
+- **pending**: initial state, neither fulfilled nor rejected.
+- **fulfilled**: meaning that the operation completed successfully.
+- **rejected**: meaning that the operation failed.
+
+### Promise chaining
+
+Sometimes what is executed in our fulfilled function also returns a promise. This is called promise chaining.
+
+![Promises chaining](../images/js/3-3-promisechaining.png)
+
+- **Fulfilled** states are handled by a Promise's **then** method.
+- **Rejected** states are handled by a **catch** method.
+
+Both these methods take a function as an argument. This is where we can write code to handle the return value of the promise.
+
+These functions, in turn, receive an argument which is the return value of the promise (if successful and the promise has resolved) or the error from a rejected promise.
+
+![Promises chaining 2](../images/js/3-3-promisechaining2.png)
+
+Most of the time, you won’t write your own promises but will rather use libraries and other existing code built on promises.
+
+## then/catch example
+
+We will rewrite the async/await API call in this video to use regular promise syntax.
+
+<iframe src="https://player.vimeo.com/video/450776515?h=1adda6b1fd&amp;badge=0&amp;autopause=0&amp;player_id=0&amp;app_id=58479" width="2560" height="1080" frameborder="0" allow="autoplay; fullscreen; picture-in-picture" allowfullscreen title="GET request with regular promises"></iframe>
+
+[Code](https://github.com/NoroffFEU/get-request-with-regular-promise-syntax) from the video.
+
+<hr>
+
+## Lesson Task
+
+### Brief
+
+There are practice questions in the master branch of [this repo](https://github.com/NoroffFEU/lesson-task-js1-module3-lesson3).
+
+Attempt to answer the questions before checking them against the [answers branch](https://github.com/NoroffFEU/lesson-task-js1-module3-lesson3/tree/answers) of the repo.
diff --git a/packages/lms/src/routes/content/feu1/javascript-1/module-3/handling-errors/+page.md b/packages/lms/src/routes/content/feu1/javascript-1/module-3/handling-errors/+page.md
new file mode 100644
index 0000000..b442cd1
--- /dev/null
+++ b/packages/lms/src/routes/content/feu1/javascript-1/module-3/handling-errors/+page.md
@@ -0,0 +1,68 @@
+---
+title: Handling Errors
+tags:
+  - JavaScript 1
+  - JavaScript
+  - JS
+  - ECMA
+  - ECMAScript
+type: Lesson
+---
+
+## Introduction
+
+In this lesson, we will focus on:
+
+- default parameter values in functions.
+- creating dynamic HTML inside a function based on arguments.
+- handling errors with a try-catch-finally statement.
+
+## Default parameter values
+
+To provide default values for parameters, we assign values in the function parameter list, e.g.
+
+```js
+function printMessage(message = 'No message provided') {
+  // do something
+}
+```
+
+If we call printMessage() and don't pass in an argument to the message parameter, message will have the default value of "No message provided".
+
+[Scrimba video](https://scrimba.com/c/cB3qn6u7)
+
+## A reusable HTML function
+
+In this video, we look at passing arguments to a function that will return different HTML based on what we pass in.
+
+We might call this function a **component**. It will return a limited amount of HTML we can use elsewhere in our code.
+
+<iframe src="https://player.vimeo.com/video/450469640?h=6418d40dd5&amp;badge=0&amp;autopause=0&amp;player_id=0&amp;app_id=58479" width="2560" height="1080" frameborder="0" allow="autoplay; fullscreen; picture-in-picture" allowfullscreen title="A reusable HTML function"></iframe>
+
+[Code](https://github.com/NoroffFEU/reusable-html-function) from the video.
+
+## Handling errors
+
+In the following video, we look at how to use the **try-catch-finally** statement to catch errors and provide feedback to the user rather than simply logging an error to the console that the user will never see.
+
+<iframe src="https://player.vimeo.com/video/450419821?h=90aad7a333&amp;badge=0&amp;autopause=0&amp;player_id=0&amp;app_id=58479" width="2560" height="1080" frameborder="0" allow="autoplay; fullscreen; picture-in-picture" allowfullscreen title="try-catch-finally"></iframe>
+
+[Code](https://github.com/NoroffFEU/try-catch-finally) from the video.
+
+## API call error handling
+
+In this video, we will add error handling to our API call with a try-catch statement.
+
+<iframe src="https://player.vimeo.com/video/450417105?h=28c585beaa&amp;badge=0&amp;autopause=0&amp;player_id=0&amp;app_id=58479" width="2560" height="1080" frameborder="0" allow="autoplay; fullscreen; picture-in-picture" allowfullscreen title="GET requests - handling errors"></iframe>
+
+[Code](https://github.com/NoroffFEU/get-requests-handling-errors) from the video.
+
+<hr>
+
+## Lesson Task
+
+### Brief
+
+There are practice questions in the master branch of [this repo](https://github.com/NoroffFEU/lesson-task-js1-module3-lesson2).
+
+Attempt to answer the questions before checking them against the [answers branch](https://github.com/NoroffFEU/lesson-task-js1-module3-lesson2/tree/answers) of the repo.
diff --git a/packages/lms/src/routes/content/feu1/javascript-1/module-3/more-about-apis/+page.md b/packages/lms/src/routes/content/feu1/javascript-1/module-3/more-about-apis/+page.md
new file mode 100644
index 0000000..0611c1a
--- /dev/null
+++ b/packages/lms/src/routes/content/feu1/javascript-1/module-3/more-about-apis/+page.md
@@ -0,0 +1,169 @@
+---
+title: More about calling APIs
+tags:
+  - JavaScript 1
+  - JavaScript
+  - JS
+  - ECMA
+  - ECMAScript
+type: Lesson
+---
+
+## Introduction
+
+In this lesson, we will look at:
+
+- fixing CORS errors.
+- how to find free APIs to use.
+- adding header values to API calls.
+
+## CORS
+
+CORS stands for Cross-Origin Resource Sharing.
+
+APIs that are not configured to accept requests from different origins or domains to their own will block the requests.
+
+Many websites make calls to different APIs living on different servers, so we need a way around this.
+
+There are two ways to solve this issue:
+
+1. The API can be configured to allow cross-origin requests.
+2. We can send the API calls through a proxy service.
+
+Because we don’t have control over how the API is configured unless we develop the API, the second option is our only solution.
+
+The API found at [https://noroffcors.onrender.com/](https://noroffcors.onrender.com/) is a service we can use to enable cross-origin requests.
+
+To use it, we prepend that URL to the URL of the API we want to use.
+
+The following API endpoint returns a list of elephants: [https://elephant-api.herokuapp.com/elephants](https://elephant-api.herokuapp.com/elephants)
+
+If you called that URL with fetch like this:
+
+```js
+const elephantUrl = 'https://elephant-api.herokuapp.com/elephants';
+const response = await fetch(elephantUrl);
+const results = await response.json();
+```
+
+an error similar to this would be returned:
+
+Access to fetch at '<https://elephant-api.herokuapp.com/elephants>' from origin '<http://127.0.0.1:5501>' has been blocked by CORS policy: No 'Access-Control-Allow-Origin' header is present on the requested resource.
+
+To get around this, we can add the cors-anywhere URL to the beginning of the URL:
+
+```js
+const elephantUrl = 'https://elephant-api.herokuapp.com/elephants';
+const corsEnabledUrl = 'https://noroffcors.onrender.com/' + elephantUrl;
+const response = await fetch(corsEnabledUrl);
+const results = await response.json();
+```
+
+Now the API call will work.
+
+<iframe src="https://player.vimeo.com/video/450829010?h=7bcbfbcb51&amp;badge=0&amp;autopause=0&amp;player_id=0&amp;app_id=58479" width="2560" height="1080" frameborder="0" allow="autoplay; fullscreen; picture-in-picture" allowfullscreen title="GET request with CORS fix"></iframe>
+
+[Code](https://github.com/NoroffFEU/get-request-with-cors-fix) from the video.
+
+## Authenticating an API call
+
+Everything that you need to know about fetching data from an API should be in its documentation, including if you need to add additional information when making the API call, so make sure you read the documentation thoroughly. Each API is different, with unique endpoints, parameters and data, as well as ways of authenticating the request.
+
+### No authentication
+
+Some APIs don’t require authentication. You can make a request to one of their endpoints, and they’ll give you the data.
+
+An example is [https://api.punkapi.com/v2/beers?brewed_before=11-2012](https://api.punkapi.com/v2/beers?brewed_before=11-2012)
+
+This endpoint has no authentication, but you can see that additional information is passed in the query string to ask for data from before November 2012. The question mark is used to differentiate a query string from the rest of the URL, and the parameter ‘brewed_before’ is listed in the API documentation to filter the results for that endpoint.
+
+A fetch request for this API would look like:
+
+```js
+const url = 'https://api.punkapi.com/v2/beers?brewed_before=11-2012';
+
+async function getData(url) {
+  const response = await fetch(url);
+
+  const data = await response.json();
+
+  console.log(data);
+}
+```
+
+## Authenticating in the URL
+
+Some APIs require you to have an API key and to send it with your URL as a query string parameter. In the above example, we passed a date as a query string, but some APIs want the API key as a parameter in the url.
+
+An example is [https://api.spoonacular.com/recipes/716429/information?apiKey=YOUR-API-KEY&includeNutrition=true](https://api.spoonacular.com/recipes/716429/information?apiKey=YOUR-API-KEY&includeNutrition=true)
+
+For that endpoint we’re adding the API key as a parameter, and whether to include nutrition as another parameter with the & sign.
+
+A fetch request for this API would look like:
+
+```js
+const key = '12345abcdef';
+
+const url = `https://api.spoonacular.com/recipes/716429/information?apiKey=${key}&includeNutrition=true`;
+
+async function getData(url) {
+  const response = await fetch(url);
+
+  const data = await response.json();
+
+  console.log(data);
+}
+```
+
+**READ**
+
+Page: [Authentication](https://spoonacular.com/food-api/docs#Authentication) if you want to read more about authentication with the Spoonacular API.
+
+## Authenticating in the init object
+
+fetch() is a global method which accepts two arguments. The first argument is the resource you want to fetch. This is usually a string for the URL, eg. fetch("<https://api.com>") and is mandatory for making the API call. There is a second, optional argument which is an object called ‘init’ where we’re able to place additional information for the API we’re calling. These could include things like what method to use for equest or credentials to authenticate the request.
+
+Rapid API offers a list of APIs we can use, some of them are free to use for up to a certain amount of API calls. An example is the Tasty API, which requires sending a host name and key in the headers property of the ‘init’ object, which gets added to the fetch method after the URL. We’ve named the ‘init’ object options in the example below.
+
+```js
+const options = {
+  method: 'GET',
+
+  headers: {
+    'X-RapidAPI-Host': ' tasty.p.rapidapi.com',
+
+    'X-RapidAPI-Key': '12345abcdef'
+  }
+};
+
+const url = 'https://tasty.p.rapidapi.com/recipes/auto-complete?prefix=pasta';
+
+async function getData(url) {
+  const response = await fetch(url, options);
+
+  const data = await response.json();
+
+  console.log(data);
+}
+```
+
+**READ**
+
+Page: [Tasty API Documentation](https://rapidapi.com/apidojo/api/tasty/) to read more about this API.
+
+## Free API lists
+
+- [https://apilist.fun/](https://apilist.fun/)
+- [https://rapidapi.com/collection/list-of-free-apis](https://rapidapi.com/collection/list-of-free-apis)
+- [https://github.com/public-apis/public-apis](https://github.com/public-apis/public-apis)
+- Many others are available through a search.
+
+<hr>
+
+## Lesson Task
+
+### Brief
+
+There are practice questions in the master branch of [this repo](https://github.com/NoroffFEU/lesson-task-js1-module3-lesson4).
+
+Attempt to answer the questions before checking them against the [answers branch](https://github.com/NoroffFEU/lesson-task-js1-module3-lesson4/tree/answers) of the repo.
diff --git a/packages/lms/src/routes/content/feu1/javascript-1/module-3/query-string-parameters/+page.md b/packages/lms/src/routes/content/feu1/javascript-1/module-3/query-string-parameters/+page.md
new file mode 100644
index 0000000..a174baa
--- /dev/null
+++ b/packages/lms/src/routes/content/feu1/javascript-1/module-3/query-string-parameters/+page.md
@@ -0,0 +1,54 @@
+---
+title: Query string parameters
+tags:
+  - JavaScript 1
+  - JavaScript
+  - JS
+  - ECMA
+  - ECMAScript
+type: Lesson
+---
+
+## Introduction
+
+In this lesson, we will look at the following:
+
+- Retrieving parameters from the query string.
+- Passing variables to other pages in the query string.
+
+## Retrieving parameters
+
+In this video, we will look at how we can retrieve parameter values (essential variables) from the query string using code like the one below:
+
+```js
+// get the query string
+const queryString = document.location.search;
+
+// create an object that will allows us to access all the query string parameters
+const params = new URLSearchParams(queryString);
+
+// get the id parameter from the query string
+const id = params.get('id');
+```
+
+<iframe src="https://player.vimeo.com/video/453021027?h=cc9e8cce3f&amp;badge=0&amp;autopause=0&amp;player_id=0&amp;app_id=58479" width="2560" height="1080" frameborder="0" allow="autoplay; fullscreen; picture-in-picture" allowfullscreen title="Retrieving parameters from the querystring"></iframe>
+
+[Code](https://github.com/NoroffFEU/retrieving-parameters-from-querystrings) from the video.
+
+## Adding parameters
+
+In this video, we will add a variable to the href value in an <a> tag, retrieve it from the query string on a separate page, and then use its value in an API call.
+
+<iframe src="https://player.vimeo.com/video/453080750?h=328b6f90fd&amp;badge=0&amp;autopause=0&amp;player_id=0&amp;app_id=58479" width="2560" height="1080" frameborder="0" allow="autoplay; fullscreen; picture-in-picture" allowfullscreen title="Passing parameters from one page to another using the querystring"></iframe>
+
+[Code](https://github.com/NoroffFEU/passing-variables-to-other-pages-in-the-querystring) from the video.
+
+<hr>
+
+## Lesson Task
+
+### Brief
+
+There are practise questions in the master branch of [this repo](https://github.com/NoroffFEU/lesson-task-js1-module4-lesson3).
+
+Attempt to answer the questions before checking them against the [answers branch](https://github.com/NoroffFEU/lesson-task-js1-module4-lesson3/tree/answers) of the repo.
diff --git a/packages/lms/src/routes/content/feu1/javascript-1/module-4/+page.md b/packages/lms/src/routes/content/feu1/javascript-1/module-4/+page.md
new file mode 100644
index 0000000..458974c
--- /dev/null
+++ b/packages/lms/src/routes/content/feu1/javascript-1/module-4/+page.md
@@ -0,0 +1,23 @@
+---
+title: Module 4
+tags:
+  - JavaScript 1
+  - JavaScript
+  - JS
+  - ECMA
+  - ECMAScript
+type: Module
+previous: Module 3
+---
+
+In this module, we begin with the most critical part of making API calls: examining the JSON they return.
+
+We also look at:
+
+- Skipping certain objects when looping over an array of objects.
+- Fetching and displaying a single result from an API call.
+- Retrieving parameters from the query string.
+- Passing variables to other pages in the query string.
+- Regular expressions.
+- Preventing the default behaviour of forms.
+- Simple form validation.
diff --git a/packages/lms/src/routes/content/feu1/javascript-1/module-4/form-validation/+page.md b/packages/lms/src/routes/content/feu1/javascript-1/module-4/form-validation/+page.md
new file mode 100644
index 0000000..297849d
--- /dev/null
+++ b/packages/lms/src/routes/content/feu1/javascript-1/module-4/form-validation/+page.md
@@ -0,0 +1,85 @@
+---
+title: Form validation
+tags:
+  - JavaScript 1
+  - JavaScript
+  - JS
+  - ECMA
+  - ECMAScript
+type: Lesson
+---
+
+## Introduction
+
+In this lesson, we look at:
+
+- Regular expressions.
+- Preventing the default behaviour of forms.
+- Simple form validation.
+
+## Regular expressions
+
+Regular expressions are used to match patterns. We place the pattern in between two forward slashes / /.
+
+We can use the test() method to see if there is a match between a regular expression and a string. The return value is a boolean value.
+
+The below will test if there is a match between the regular expression /hello/ and the string "Oh hello there". In other words, does the string contain the characters hello?
+
+```js
+const stringToTest = 'Oh hello there';
+// the expression is placed between / /
+const expression = /hello/;
+const result = expression.test(stringToTest);
+console.log(result);
+// true
+```
+
+Everyday use for regular expressions is to test if form input values match a specific pattern, e.g., if a value looks like an email address.
+
+The function below could be used to test if the argument passed in looks like an email address:
+
+```js
+function validateEmail(email) {
+  const regEx = /\S+@\S+\.\S+/;
+  const patternMatches = regEx.test(email);
+  return patternMatches;
+}
+```
+
+If the argument looks like an email address, this function will return true and false if it doesn't.
+
+You will not often have to create your own regular expressions. You can see in the regex example above that they can be challenging to read. Most of the time, you can find regular expressions on the Internet to test for patterns, e.g., is a phone number in a particular format or is a password complicated enough.
+
+**READ**
+
+Article: [Top 15 commonly used regex](https://digitalfortress.tech/tips/top-15-commonly-used-regex/) for a list of common regular expressions.
+
+## Preventing default form behaviour
+
+To prevent the default behaviour of submitted forms, which includes reloading the page, we can use:
+
+```js
+event.preventDefault();
+```
+
+<iframe src="https://player.vimeo.com/video/453361604?h=765aa36966&amp;badge=0&amp;autopause=0&amp;player_id=0&amp;app_id=58479" width="2560" height="1080" frameborder="0" allow="autoplay; fullscreen; picture-in-picture" allowfullscreen title="Preventing the default behaviour of a form"></iframe>
+
+[Code](https://github.com/NoroffFEU/submit-event-preventDefault) from the video.
+
+## Simple form validation
+
+We're going to use the **trim()** method and the **length** property to help us add simple validation to a form.
+
+<iframe src="https://player.vimeo.com/video/453789618?h=501a1e3296&amp;badge=0&amp;autopause=0&amp;player_id=0&amp;app_id=58479" width="2560" height="1080" frameborder="0" allow="autoplay; fullscreen; picture-in-picture" allowfullscreen title="Simple form validation"></iframe>
+
+[Code](https://github.com/NoroffFEU/simple-form-validation) from the video.
+
+<hr>
+
+## Lesson Task
+
+### Brief
+
+There are practise questions in the master branch of [this repo](https://github.com/NoroffFEU/lesson-task-js1-module4-lesson4).
+
+Attempt to answer the questions before checking them against the [answers branch](https://github.com/NoroffFEU/lesson-task-js1-module4-lesson4/tree/answers) of the repo.
diff --git a/packages/lms/src/routes/content/feu1/javascript-1/module-4/get-requests/+page.md b/packages/lms/src/routes/content/feu1/javascript-1/module-4/get-requests/+page.md
new file mode 100644
index 0000000..ce9a18b
--- /dev/null
+++ b/packages/lms/src/routes/content/feu1/javascript-1/module-4/get-requests/+page.md
@@ -0,0 +1,90 @@
+---
+title: Query strings and GET requests
+tags:
+  - JavaScript 1
+  - JavaScript
+  - JS
+  - ECMA
+  - ECMAScript
+type: Lesson
+---
+
+## Introduction
+
+In this lesson, we will look at what truthy and falsy values are, and then examine query strings and GET requests.
+
+## Truthy and falsy values
+
+Each value in JavaScript has a Boolean value associated with it, known as truthy or falsy.
+
+The following values are falsy:
+
+- false
+- 0 - the number zero
+- "", '' or - empty strings
+- null
+- undefined
+- Nan - Not a Number
+
+Every other value is truthy.
+
+If we are trying to check if a value exists (if it isn't null or undefined) for example, we can do this:
+
+```js
+if (someVariable) {
+  console.log('someVariable exists');
+}
+```
+
+rather than having to check for both null and undefined like this:
+
+```js
+if (someValue !== null && someValue !== undefined) {
+  console.log('someValue exists');
+}
+```
+
+That applies to all the falsy values, so we can check that a variable's value is not one of the falsy values by writing an if statement like this:
+
+```js
+if (someVariable) {
+  // someVariable has a truthy value
+}
+```
+
+[Scrimba video](https://scrimba.com/c/c7qJwDS4)
+
+## Query strings
+
+The query string is the part of the URL after the ?. It can be used to pass values around.
+
+In the URL: <https://youtube.com/watch?v=abcd1234>  
+**?v=abcd1234** is the query string. It has one parameter called v with a value of **abcd1234**.
+
+<iframe src="https://player.vimeo.com/video/449681615?h=89157e550d&amp;badge=0&amp;autopause=0&amp;player_id=0&amp;app_id=58479" width="2560" height="1080" frameborder="0" allow="autoplay; fullscreen; picture-in-picture" allowfullscreen title="Query strings"></iframe>
+
+## Introduction to GET requests
+
+One of the main things you will need to do as a front-end developer is connect to APIs.
+
+In this introduction to GET requests we are going make a call to fetch data from an API.
+
+This data will be in JSON format, and we can loop over it to create HTML like we have before with arrays of objects.
+
+<iframe src="https://player.vimeo.com/video/449846877?h=6f1810d53d&amp;badge=0&amp;autopause=0&amp;player_id=0&amp;app_id=58479" width="2560" height="1080" frameborder="0" allow="autoplay; fullscreen; picture-in-picture" allowfullscreen title="GET requests - Introduction"></iframe>
+
+The following video takes another look at the same code.
+
+<iframe src="https://player.vimeo.com/video/450070174?h=77cfd12556&amp;badge=0&amp;autopause=0&amp;player_id=0&amp;app_id=58479" width="2560" height="1080" frameborder="0" allow="autoplay; fullscreen; picture-in-picture" allowfullscreen title="GET requests Introduction - Part 2"></iframe>
+
+[Code](https://github.com/NoroffFEU/get-requests-introduction) from the video.
+
+<hr>
+
+## Lesson Task
+
+### Brief
+
+There are practice questions in the master branch of [this repo](https://github.com/NoroffFEU/lesson-task-js1-module3-lesson1).
+
+Attempt to answer the questions before checking them against the [answers branch](https://github.com/NoroffFEU/lesson-task-js1-module3-lesson1/tree/answers) of the repo.
diff --git a/packages/lms/src/routes/content/feu1/javascript-1/module-4/single-api-results/+page.md b/packages/lms/src/routes/content/feu1/javascript-1/module-4/single-api-results/+page.md
new file mode 100644
index 0000000..f43432a
--- /dev/null
+++ b/packages/lms/src/routes/content/feu1/javascript-1/module-4/single-api-results/+page.md
@@ -0,0 +1,74 @@
+---
+title: Single API results and the filter method
+tags:
+  - JavaScript 1
+  - JavaScript
+  - JS
+  - ECMA
+  - ECMAScript
+type: Lesson
+---
+
+## Introduction
+
+In this lesson, we examine fetching and displaying a single result from an API call. We also look at filtering data using the filter() method.
+
+## Displaying a single result
+
+Sometimes we retrieve only a single result from an API call. In this case, we will work with a single object rather than an array of objects.
+
+Because we are not working with an array, we access the result properties directly.
+
+<iframe src="https://player.vimeo.com/video/453002751?h=9420e026bd&amp;badge=0&amp;autopause=0&amp;player_id=0&amp;app_id=58479" width="2560" height="1080" frameborder="0" allow="autoplay; fullscreen; picture-in-picture" allowfullscreen title="Fetching and displaying a single result from an API call"></iframe>
+
+[Code](https://github.com/NoroffFEU/get-requests-fetching-a-single-result) from the video.
+
+## Filter method
+
+If you want to filter the data displayed to a user, you can use the filter method. The filter method is used to create a new array from an existing array that the filter method is called on.
+
+The filter method takes a function as an argument. This function receives each item in the array as an argument. If the function returns true, the item is added to the new array.
+
+### Filter method with numbers
+
+[This Scrimba looks at using the filter method on an array of numbers.](https://scrimba.com/scrim/cvwqVzT8)
+
+### Filter method with strings
+
+[This Scrimba looks at using the filter method on an array of strings.](https://scrimba.com/scrim/cpMKVPTa)
+
+### Filter method with objects
+
+[This Scrimba looks at using the filter method on an array of objects.](https://scrimba.com/scrim/cwwvEJt9)
+
+## Filter example
+
+In the video below, the filter method is used to filter a static array of objects on a keyup event.
+
+<iframe src="https://player.vimeo.com/video/457404171?h=47b82295b4&amp;badge=0&amp;autopause=0&amp;player_id=0&amp;app_id=58479" width="2560" height="1080" frameborder="0" allow="autoplay; fullscreen; picture-in-picture" allowfullscreen title="Filter method example"></iframe>
+
+[Code](https://github.com/NoroffFEU/filter-example) from the video.
+
+### Filter example with API data
+
+The video below builds on the one above, adding data from an API call and moving the code into reusable functions.
+
+<iframe src="https://player.vimeo.com/video/457423739?h=2f671f7298&amp;badge=0&amp;autopause=0&amp;player_id=0&amp;app_id=58479" width="1280" height="720" frameborder="0" allow="autoplay; fullscreen; picture-in-picture" allowfullscreen title="Filter example with API data"></iframe>
+
+[Code](https://github.com/NoroffFEU/filter-example-with-api-call) from the video.
+
+## Find method
+
+The find method is similar to the filter method, though it only returns a single item (or undefined) rather than an array of items.
+
+[Scrimba video](https://scrimba.com/scrim/cVvLZLhp)
+
+<hr>
+
+## Lesson Task
+
+### Brief
+
+There are practise questions in the master branch of [this repo](https://github.com/NoroffFEU/lesson-task-js1-module4-lesson2).
+
+Attempt to answer the questions before checking them against the [answers branch](https://github.com/NoroffFEU/lesson-task-js1-module4-lesson2/tree/answers) of the repo.
diff --git a/packages/lms/src/routes/content/feu1/javascript-1/module-4/skipping-certain-api-results/+page.md b/packages/lms/src/routes/content/feu1/javascript-1/module-4/skipping-certain-api-results/+page.md
new file mode 100644
index 0000000..e115376
--- /dev/null
+++ b/packages/lms/src/routes/content/feu1/javascript-1/module-4/skipping-certain-api-results/+page.md
@@ -0,0 +1,56 @@
+---
+title: Skipping certain API results
+tags:
+  - JavaScript 1
+  - JavaScript
+  - JS
+  - ECMA
+  - ECMAScript
+type: Lesson
+---
+
+## Introduction
+
+In this lesson, we will look at:
+
+- Inspecting the results of API calls.
+- Skipping certain objects when looping over an array of objects.
+
+## Inspecting the results of API calls
+
+When making API calls, the most important thing to do is to inspect the JSON that the call returns.
+
+You can't make assumptions about what the JSON will contain and what properties you can access.
+
+You can use a simple **console.log** or software like [Postman](https://www.postman.com/downloads/).
+
+<iframe src="https://player.vimeo.com/video/452802372?h=41b688b066&amp;badge=0&amp;autopause=0&amp;player_id=0&amp;app_id=58479" width="2560" height="1080" frameborder="0" allow="autoplay; fullscreen; picture-in-picture" allowfullscreen title="Inspecting the results of API calls"></iframe>
+
+[Code](https://github.com/NoroffFEU/inspecting-the-results-of-api-calls) from the video.
+
+## Skipping certain results
+
+Sometimes you will want to ignore certain objects in an array. Perhaps they are missing specific properties, or the properties have useless values.
+
+We can do this using the **continue** keyword inside a for loop.
+
+**continue** causes the loop not to execute the code in its current iteration and jumps to the next iteration.
+
+Like **break**, continue cannot be used inside a forEach function.
+
+- **break** - exit the loop entirely.
+- **continue** - skip this particular iteration of the loop.
+
+<iframe src="https://player.vimeo.com/video/452856488?h=7bd3c974a7&amp;badge=0&amp;autopause=0&amp;player_id=0&amp;app_id=58479" width="2560" height="1080" frameborder="0" allow="autoplay; fullscreen; picture-in-picture" allowfullscreen title="Skipping certain objects when looping over an array of objects"></iframe>
+
+[Code](https://github.com/NoroffFEU/get-requests-skipping-certain-results) from the video.
+
+<hr>
+
+## Lesson Task
+
+### Brief
+
+There are practise questions in the master branch of [this repo](https://github.com/NoroffFEU/lesson-task-js1-module4-lesson1).
+
+Attempt to answer the questions before checking them against the [answers branch](https://github.com/NoroffFEU/lesson-task-js1-module4-lesson1/tree/answers) of the repo.
diff --git a/packages/lms/src/routes/content/feu1/porfolio-1/+page.md b/packages/lms/src/routes/content/feu1/porfolio-1/+page.md
new file mode 100644
index 0000000..a357f70
--- /dev/null
+++ b/packages/lms/src/routes/content/feu1/porfolio-1/+page.md
@@ -0,0 +1,10 @@
+---
+title: Porfolio 1
+type: Course
+tags:
+  - Porfolio 1
+  - Portfolio
+previous: Project Exam 1
+---
+
+This is a template course. It is used to create new courses.
diff --git a/packages/lms/src/routes/content/feu1/project-exam-1/+page.md b/packages/lms/src/routes/content/feu1/project-exam-1/+page.md
new file mode 100644
index 0000000..2cd33d9
--- /dev/null
+++ b/packages/lms/src/routes/content/feu1/project-exam-1/+page.md
@@ -0,0 +1,10 @@
+---
+title: Project Exam 1
+type: Assessment
+tags:
+  - Project Exam 1
+  - Project Exam
+previous: Agency 1
+---
+
+This is a template assessment. It is used to create new assessments.
diff --git a/packages/lms/src/routes/content/feu1/project-methodology/+page.md b/packages/lms/src/routes/content/feu1/project-methodology/+page.md
new file mode 100644
index 0000000..12cfac4
--- /dev/null
+++ b/packages/lms/src/routes/content/feu1/project-methodology/+page.md
@@ -0,0 +1,7 @@
+---
+title: Project Methodology
+tags:
+  - Course
+type: Course
+previous: HTML and CSS
+---
diff --git a/packages/lms/src/routes/content/feu1/project-methodology/ca/+page.md b/packages/lms/src/routes/content/feu1/project-methodology/ca/+page.md
new file mode 100644
index 0000000..428d05e
--- /dev/null
+++ b/packages/lms/src/routes/content/feu1/project-methodology/ca/+page.md
@@ -0,0 +1,44 @@
+---
+title: Course Assignment
+tags:
+  - Project Methodology
+type: Assessment
+previous: Module 1
+---
+
+## Goal
+
+To showcase the skills learned over the Project Methodology course and plan for your Semester Project 1.
+
+## Brief
+
+You have been tasked with planning for your Semester Project 1. You will receive the full brief when you start Semester Project 1, but here are some of the functional specifications so that you know what will be required.
+
+- The website shall be neatly designed and should appeal to the target audience.
+- A GitHub repository will be set up, and the site will be deployed on Netlify.
+- The website shall have 4 to 6 pages and be responsive across screen sizes.
+- The HTML shall be neat and semantic, and the CSS shall follow the DRY principle.
+- The site shall follow WCAG and SEO guidelines.
+- A report documenting the process and explaining decisions will be delivered.
+
+You will have four weeks (full-time) and eight weeks (part-time) to build Semester Project 1.
+
+## Level 1 Process
+
+1. Choose either a Gantt chart or a Trello board to plan your project.
+2. Consider the tasks you will need to complete the project and add them to either the Gantt chart or your Trello board.
+3. Choose the deadlines for the tasks and add them to your Gantt chart or Trello cards. Based on your experience thus far, you can estimate how long each task will take you. Once you receive the full brief, you might want to make some adjustments.
+4. Write a report of 500-1000 words explaining why you chose the project planning tool you did. Also, explain the chosen tasks and plan for your project. Please use the report template provided below.
+5. Add your Gantt chart or a screenshot of your Trello board to the report you submit.
+
+## Resources
+
+- Gantt chart examples:
+  - [Example 1](https://s.studiobinder.com/wp-content/uploads/2017/11/Create-A-Free-Gantt-Chart-Online-Modern-Gantt-Chart-Sample-Excell-StudioBinder.jpg)
+  - [Example 2](https://www.projectengineer.net/wp-content/uploads/2018/09/gantt-chart-toms-planner-768x310.png)
+- [Report Template](../resources/FEU1reporttemplate.docx)
+
+## Submission
+
+- Screenshots of the project management tools(trello or gantt chart) or a link.
+- The report. See template at [Download the report](../resources/FEU1reporttemplate.docx)
diff --git a/packages/lms/src/routes/content/feu1/project-methodology/ca/marking-criteria/+page.md b/packages/lms/src/routes/content/feu1/project-methodology/ca/marking-criteria/+page.md
new file mode 100644
index 0000000..4a13e88
--- /dev/null
+++ b/packages/lms/src/routes/content/feu1/project-methodology/ca/marking-criteria/+page.md
@@ -0,0 +1,80 @@
+---
+title: Marking Criteria
+tags:
+  - Project Methodology
+type: Lesson
+---
+
+<table style="max-width: 100%">
+  <tr>
+    <th>Assessment Criteria</th>
+    <th>Learning Outcomes</th>
+    <th>Completed</th>
+  </tr>
+  <tr>
+    <td>Proficiency with Project Management Tools
+      <ul>
+        <li>User stories/Task definitions should be specific.</li>
+        <li>User stories should include time estimation i.e. the due date.</li>
+        <li>The progress of the tasks should be known.</li>
+      </ul>
+    </td>
+    <td>
+      <ul>
+        <li>has a knowledge of organisational  requirements and  workflows in  relation  to  web  development  and agile  project  methods.</li>
+        <li>has knowledge of processes and tools that are used in project management and documentation.</li>
+        <li>masters  relevant tools and techniques for project planning, process documentation and project completion.</li>
+      </ul>
+    </td>
+    <td>
+      <input type="checkbox">
+    </td>
+  </tr>
+  <tr>
+    <td>Project Documentation
+      <ul>
+        <li>Has a good understanding of the project.</li>
+        <li>Different stages of SDLC should be highlighted.</li>
+        <li>Should include references where required</li>
+      </ul>
+    </td>
+    <td>
+      <ul>
+      <li>has knowledge of concepts and processes that are used for analysis, project planning, completion, reports and presentations</li>
+<li>has a knowledge of organisational requirements and workflows in relation to  web
+development  and agile  project  methods</li>
+        <li>can apply knowledge of project methodologies for efficient project completion.</li>
+        <li>can  find information and material that is relevant for project development with agile project methods.</li>
+        <li> can carry out work with files and file systems and develop methods to ensure lean workflow in a development project.</li>
+        <li> can build relations with his/her peers, also across discipline boundaries and work as part of a team.</li>
+      </ul>
+    </td>
+    <td>
+      <input type="checkbox">
+    </td>
+  </tr>
+   <tr>
+    <td colspan="2">
+    </td>
+    <td class="grade">
+    </td>
+  </tr>
+</table>
+
+<script>
+  const checkboxes = document.querySelectorAll("input[type='checkbox']");
+  const grade = document.querySelector(".grade");
+  let criteriaPassed = 0;
+  checkboxes.forEach(item => item.onclick = function(e){
+    if(e.target.checked === true){
+      criteriaPassed++;
+      if(criteriaPassed === checkboxes.length){
+        grade.innerHTML = "Passed";
+      }
+    }
+    else {
+      criteriaPassed--;
+      grade.innerHTML = "";
+    }
+  })
+</script>
diff --git a/packages/lms/src/routes/content/feu1/project-methodology/module-1/+page.md b/packages/lms/src/routes/content/feu1/project-methodology/module-1/+page.md
new file mode 100644
index 0000000..4c36304
--- /dev/null
+++ b/packages/lms/src/routes/content/feu1/project-methodology/module-1/+page.md
@@ -0,0 +1,10 @@
+---
+title: Module 1
+tags:
+  - Project Methodology
+type: Module
+---
+
+This short but important course will introduce you to the basic principles of project development and practical working methods. These tools will allow you to work more effectively and transparently. At first, you will use them in study assignments and later in real customer projects.
+
+Check your progression plan, or contact a tutor on the forums if anything is unclear.
diff --git a/packages/lms/src/routes/content/feu1/project-methodology/module-1/agile-scrum/+page.md b/packages/lms/src/routes/content/feu1/project-methodology/module-1/agile-scrum/+page.md
new file mode 100644
index 0000000..b38b40d
--- /dev/null
+++ b/packages/lms/src/routes/content/feu1/project-methodology/module-1/agile-scrum/+page.md
@@ -0,0 +1,154 @@
+---
+title: Agile and Scrum
+tags:
+  - Project Methodology
+type: Lesson
+---
+
+# What is Agile?
+
+The English definition of “agile” means to move quickly or at a rapid pace. In software development, the term “Agile” is used for [iterative development](https://en.wikipedia.org/wiki/Iterative_and_incremental_development). Iterative development entails breaking down the development from large chunks to smaller pieces. Agile, in software development, is a set of values and principles under which [Agile requirements](https://www.indeed.com/career-advice/career-development/agile-requirements) and [Agile solutions](https://monday.com/blog/project-management/agile-solution/) are built through cross-functioning and self-organizing teams. It is a much-disciplined methodology which encourages flexibility and is also very fast-paced.
+
+One example of a business using Agile is Spotify. Spotify has a lot of significant competitors, and Spotify is made up of many teams worldwide, meaning that they constantly have to be on top of their game to be better than the competition. Because they use Agile and specifically _Scrum_, which we will learn about later - they can continually develop and push out new software without disturbing other teams or waiting on documentation. They love the Agile method so much that management even employs separate Agile coaches to join the teams.
+
+Two of the most widely used methodologies in Agile are Scrum and Kanban. We will discuss these a bit later. Firstly, let’s get stuck into the values and principles of Agile.
+
+## Values of Agile
+
+### Individual interactions over process and tools
+
+Investing in team communication is vital for a project to be successful. Employees drive the processes and tools, and if they understand the need of the project and its scope, the processes and tools necessary to achieve the goals will fall into place due to the fast-paced nature of Agile. Communication and interaction with the team are critical to ensure the project’s success.
+
+### Working software over comprehensive documentation
+
+As seen previously, there was a big emphasis on documentation during the SDLC process. The Agile process values working software more than documentation, which takes enormous time. However, Agile does not eliminate documentation. Instead of fully scoped specifications, Agile utilizes user stories that the developer will use to develop.
+
+### Customer collaboration over contract negotiation
+
+With Agile, the customer is involved throughout the development process, which ensures that the customer’s needs are met and the requirement is as close to the customer’s needs as possible. With Agile, there may also be periodic system demos, especially if the project is big; this is mainly used for customer interaction to ensure that their requirements are being met.
+
+### Responding to change over following a plan
+
+In the traditional [SDLC](https://en.wikipedia.org/wiki/Systems_development_life_cycle), the development would only start after the specifications had been approved and signed off by all the stakeholders. The process would be repeated if any functionality changes were needed, wasting time and costs.
+
+## The 12 principles of Agile
+
+The Agile software development manifesto is based on 12 principles of Agile, which are:
+
+1. Customer satisfaction by early and continuous delivery of valuable software
+2. Welcome changing requirements, even in late development
+3. Working software is delivered frequently (weeks rather than months)
+4. Close, daily cooperation between businesspeople and developers
+5. Projects are built around motivated individuals, who should be trusted
+6. Face-to-face conversation is the best form of communication (co-location)
+7. Working software is the primary measure of progress
+8. Sustainable development, able to maintain a constant pace
+9. Continuous attention to technical excellence and good design
+10. Simplicity - the art of maximizing the amount of work not done - is essential
+11. Best architectures, requirements, and designs emerge from self-organizing teams
+12. Regularly, the team reflects on how to become more effective and adjusts accordingly
+
+> **📄 DOCUMENTATION**
+>
+> Agile docs: [The 12 Principles behind the Agile Manifesto](https://www.agilealliance.org/agile101/12-principles-behind-the-agile-manifesto/).
+
+## Scrum
+
+Scrum is a project management method used within the Agile framework and is one of the most widely used project method frameworks. Scrum is used when the scope of the project is not clearly defined and when there are many complexities.
+
+### Scrum roles
+
+Like in the traditional project management methodology, Scrum also has a set of roles which are linked to responsibilities. The Scrum roles are as follows:
+
+- Product owner – 1 person and usually a representative from the business
+- Scrum master – 1 person who is the Scrum Coach and assists the team in reaching their goals
+- Development team – usually between 3 – 9 people.
+
+<div align="center">
+    <figure>
+        <img src="../images/project-methodology/1-2-scrum.png" alt="Scrum roles">
+    </figure>
+    <figcaption>Figure: Scrum roles</figcaption>
+</div>
+
+**Product owner**
+
+The product owner is a representative from a business who is responsible for the product backlog. They usually prioritize the product backlog and will determine which user stories are of importance to the business. Product owners understand the business and can easily translate the requirement from the business to the development team.
+
+**Scrum master**
+
+The Scrum Master fully understands the Scrum process and tries to facilitate and help the development team understand the Scrum processes by training and coaching the team. The Scrum master also assists the product owner by constantly giving regular feedback on the development process.
+
+The Scrum Master usually forms part of the development team. The Scrum master can also be part of more than one project.
+
+**Development team**
+
+The development team is responsible for the delivery of the product backlog. The development team manages their own time and is not driven by orders given. User stories which are assigned to the development team during the sprint planning are to be completed at the end of every sprint. All development team members are responsible for successfully delivering the user stories in the sprint, even though some of the user stories are assigned to only one person.
+
+Now that we have a better understanding of the Scrum team let’s have a look at the different events in Scrum in more detail.
+
+## Sprint
+
+One development cycle in Scrum is called a “sprint". Projects are delivered incrementally in Scrum, and these are referred to as sprints. Unlike the traditional software development life cycle, where a project is delivered as a whole, Scrum uses iterations to deliver sprints. The project is broken down into smaller, manageable pieces. A sprint can range between 2 to 4 weeks. The sprint is the container for the four other Scrum events.
+
+### Sprint planning
+
+Sprint planning is usually conducted in a time-contained meeting. During this meeting, the product backlog is discussed and assigned to the development team. The development team will then decide on the user stories to be delivered to the sprint, and the time it will take to deliver these.
+
+Each product backlog is noted on sticky paper and pasted to the board. During the sprint planning meeting, these sticky notes are broken down further into detailed tasks, which are then assigned to the development team.
+
+<div align="center">
+    <figure>
+        <img src="../images/project-methodology/1-2-sprintplanning.jpg" alt="Sprint planning">
+    </figure>
+    <figcaption>Figure: Daily scrum.
+    <i>By Wiki Education Foundation [CC BY-SA 4.0 (https://creativecommons.org/licenses/by-sa/4.0)], from Wikimedia Commons</i></figcaption>
+</div>
+
+### Daily Scrum or stand up
+
+Each person in the developments has a few minutes to speak about three things.
+
+- What they have done on the previous day
+- What they are going to do today
+- If they are facing any blockers (Something blocking you from completing your task).
+
+In case you needed a visualization of Scrum, here’s NASA in the 1970s during a daily stand-up:
+
+<div align="center">
+    <figure>
+        <img src="../images/project-methodology/1-2-dailyscrum.jpg" alt="Scrum roles">
+    </figure>
+    <figcaption>Figure: Daily scrum.<i>By NASA on The Commons [No restrictions], via Wikimedia Commons</i></figcaption>
+</div>
+
+## Sprint review
+
+At the end of each sprint, the Scrum team meets with the stakeholders to discuss the product backlog items completed during the sprint and marked as “done”.
+
+## Sprint Retrospective
+
+Before a new sprint begins, the Scrum team has a meeting to discuss and give feedback on the sprint they have just completed. In this meeting, the process of the sprint and any lessons learnt during the sprint is discussed.
+
+## Activity
+
+> **💻 WATCH**
+>
+> Video: [Scrum: The Basics](https://www.linkedin.com/learning/scrum-the-basics?u=43268076&auth=true) (1h)
+
+---
+
+## Lesson Task
+
+### Brief
+
+In this task, you will be required to demonstrate your understanding of Scrum through its roles and events and how they relate to one another.
+
+### Level 1 Process
+
+1. List the Scrum roles and briefly discuss each in your own words.
+2. Draw a flow diagram illustrating the Scrum events.
+
+### Level 2 Process
+
+1. Discuss each Scrum event in detail and list all the Scrum roles which are involved and/or responsible for each Scrum event.
diff --git a/packages/lms/src/routes/content/feu1/project-methodology/module-1/gantt/+page.md b/packages/lms/src/routes/content/feu1/project-methodology/module-1/gantt/+page.md
new file mode 100644
index 0000000..cc0531a
--- /dev/null
+++ b/packages/lms/src/routes/content/feu1/project-methodology/module-1/gantt/+page.md
@@ -0,0 +1,121 @@
+---
+title: Gantt
+tags:
+  - Project Methodology
+type: Lesson
+---
+
+## Introduction
+
+Projects consist of many activities that are to be completed on time before the project can officially be declared completed. Managing these activities and ensuring they finish on time is a skill known as _project management_. The last thing you would want is to miss the deadline or complete a task out of sequence, which could adversely affect your project. It could increase costs, cause problems with clients, and more. Project managers must therefore be able to keep an eye on every task or activity to be performed and also be able to prioritise activities accordingly.
+
+This job is made more accessible with the help of _Gantt charts_, as they convey this information visually. Gantt charts outline every task that is a part of the project along with their order against a timescale. This allows a project manager to gain an instant overview of the project, the related tasks, and the deadlines for each task.
+
+## Gantt Charts
+
+When you set up a Gantt chart, you need to consider every task that is a part of your project. You will also have to decide on the ideal person responsible for every task, the time limit for each task, and the potential risks your team may face. This comprehensive way of thinking helps you ensure that your schedule is ideal, you have the correct people assigned to every task, and that you possess the right remedies for potential risks you may encounter before you even begin.
+
+Gantt charts also allow you to develop practical aspects of a project, such as the minimum time required to finish the project, what tasks are prerequisites for other tasks, and so on. Moreover, you can also use them to figure out the critical path or the series of tasks that have to be completed individually to ensure that you deliver the project on time.
+
+To conclude, you can always also use Gantt charts to keep the stakeholders and team members involved in the project updated. All you are supposed to do is update the chart and display the schedule changes along with their implications or use it to share the key tasks that were successfully completed.
+
+### Gantt chart advantages
+
+Gantt charts come with a wide range of benefits, but the five most significant reasons to use Gantt charts have been mentioned below:
+
+**1. Circumvent completion confusion**: Gantt charts allow users to stay on track by granting a visual timeline displaying the start and finish for each task. Since the key dates and milestones are all noticeable on the visual overview of these charts, it becomes easier to maintain timescale-based tasks and deliverables as they can be tracked yearly, monthly, weekly or even daily. The diagram given below shows the benefit of visualisation offered by Gantt charts:
+
+<div align="center">
+    <figure>
+        <img src="../images/project-methodology/ganttchart.png" alt="Gantt charts">
+    </figure>
+    <figcaption>Figure: Gantt charts<br><i>Zorkow [CC BY-SA 4.0 (https://creativecommons.org/licenses/by-sa/4.0)]</i></figcaption>
+</div>
+
+**2. Keeping everyone on the same page**: Whenever a visual framework for a certain project exists, the chances of misunderstanding and other related conflicts lower substantially. Thanks to Gantt charts, every shareholder receives the same information and can declare mutually understood expectations, allowing developers to carry out their tasks following the protocol.
+
+**3. Acknowledging task relationships**: The charts improve transparency by clearly displaying the interrelation between various tasks and which tasks rely on the completion of another to achieve a certain objective. These task relationships can be hard to understand, as they require one to understand the accurate timing of each task and how one task impacts the other, along with their interdependence. With Gantt charts, one can ensure the best workflow as task relationships become easier to understand, improving productivity and success rates.
+
+**4. Effective resource allocation**: With one glance at the Gantt chart, users can distinguish between resource locations and hence be able to allocate or share resources effectively, utilising the available resources to their fullest extent. The better one manages to study and follow the chart, the better the chances of them being able to keep project costs under the given budget and ensure on-time completion.
+
+**5. Get a handle on the future**: Gantt charts not only allow one to focus on day-to-day progress. They allow project managers to look much further ahead to make decisions and ensure the project is heading in the right direction, i.e. in accordance with the company’s long-term strategic objectives.
+
+## Limitations of Gantt Charts
+
+Even though Gantt charts help project managers and decision-makers with various issues and smooth the process, they fail to tend to several issues. Gantt charts fail to offer quick solutions to issues caused by unforeseen events, making it an inflexible project management system. Moreover, it may be a hassle to keep updating the chart consistently or even expect teammates to update their charts regularly. Finally, Gantt charts do not emphasise task expectations or purpose; they only display how far a project will get at a certain point.
+
+However, the advantages of Gantt charts usually overshadow the limitations, which is why all types of companies prefer them. Gantt charts also help you to plan and schedule projects, aiding in the understanding of how much time a project requires before it is completed, figuring out what resources are needed and prioritising tasks in an orderly manner. Task dependencies can also be managed with their help.
+
+Gantt charts also allow project managers and decision-makers to monitor the progress after a project is underway. It will enable them to figure out what should have been achieved by a specific date and what has been achieved. If you feel the project is lagging on the schedule, you can always perform the necessary actions to bring it back on track. This would not have been possible without the Gantt chart, and even if it were, it would have been a problematic manual task.
+
+## Tools for Gantt Charts
+
+### Microsoft Project
+
+Microsoft Office stated, “The Gantt Chart view is the most commonly used view in Microsoft Office Project 2007”. This tool grants the users a Gantt chart wizard and allows project managers to make their charts. Microsoft Project is a durable program that may work for a company of any scale.
+
+> 🔗 **LINK**
+>
+> [Microsoft Project](https://www.microsoft.com/en-gb/microsoft-365/project/project-portfolio-management)
+
+### Gantter
+
+Gantter is a cloud-based solution for project managers. It comes with various Google app integrations, such as Google Drive. However, it does not offer many unique features and is suggested to be solely used as a charting tool.
+
+> 🔗 **LINK**
+>
+> [Gantter](https://www.gantter.com/)
+
+### Merlin 2
+
+Merlin 2 is known for its friendly and smooth user interface, offering great customizability while keeping the whole interface simple. It offers the needed features and avoids cluttering the interface with too many unneeded features. It runs only on Mac OS X version 10.4.9 or newer (10.6.4 or newer is recommended). Merlin 2 comes with powerful collaboration features and helps maintain effective Gantt charts, allowing all users to update their project statuses constantly. Merlin 2 has proven to be impactful for large teams facing complicated communication problems.
+
+> 🔗 **LINK**
+>
+> [Merlin 2](https://www.projectwizards.net/en)
+
+### GanttProject
+
+GanttProject is a free-of-cost, open-source project management software option and is robust. It has also been compared to Microsoft Project because it offers users similar features and complexity. As the name suggests, Gantt Project emphasises producing the right Gantt charts. However, for users attempting to work on larger projects, Gantt Project can get a bit confusing. It is hence recommended to use Gantt Project for small to medium-sized projects only.
+
+> 🔗 **LINK**
+>
+> [GanttProject](https://www.ganttproject.biz/)
+
+### Microsoft Excel
+
+Microsoft Excel can also be a simple but effective tool for creating Gantt Charts. You can quickly fill cells with colour to make a timeline for your chart. If you find the more sophisticated software options daunting, try using Excel.
+
+Gantt charts do the job for most project managers by effectively providing a visual representation of a project’s start and end points. The team members can use Gantt charts to keep themselves updated on the progress achieved on a project, how long each task may take, and the overall minimum time required to finish the project.
+
+Link: [Microsoft Excel](https://products.office.com/excel)
+
+External Resources: [Gantt](https://www.gantt.com/)
+
+> 🔗 **LINK**
+>
+> [Microsoft Excel](https://products.office.com/excel)
+
+---
+
+> **📄 DOCUMENTATION**
+>
+> Gantt Docs: [gantt.com](https://www.gantt.com/).
+
+## Activity
+
+> **💻 WATCH**
+>
+> Video: [Learning Gantt Charts by Chris Croft](https://www.linkedin.com/learning/learning-gantt-charts/how-to-manage-projects-with-gantt-charts?u=43268076) (1h)
+
+This video lesson will help you to better understand and learn how to use Gantt charts.
+
+## Lesson Task
+
+### Brief
+
+You will be creating a Gantt chart that is your “day in the life”.
+
+### Level 1 Process
+
+Create a Gantt chart of your daily schedule using your chosen software. Start from the time you wake up in the morning and to when you go to bed at night. Include tasks such as eating, getting ready for the day, studying, socialising, etc. Create your Gantt chart so your best friend can follow your daily schedule perfectly.
diff --git a/packages/lms/src/routes/content/feu1/project-methodology/module-1/kanban-user-stories/+page.md b/packages/lms/src/routes/content/feu1/project-methodology/module-1/kanban-user-stories/+page.md
new file mode 100644
index 0000000..98355dd
--- /dev/null
+++ b/packages/lms/src/routes/content/feu1/project-methodology/module-1/kanban-user-stories/+page.md
@@ -0,0 +1,187 @@
+---
+title: Kanban and User Stories
+tags:
+  - Project Methodology
+type: Lesson
+---
+
+## Introduction
+
+The most challenging part of a project is always how to start, prioritise, and when to finish a project. Introduced by the Japanese in the automotive industry to manage the workflow, Kanban is a workflow process that assists in running a project. It helps start, analyse, improve and finalise projects using a workflow method. The Kanban method is a visual tool to see what is being worked on during a project. Kanban also manages the Work in Progress limits (WIP).
+
+## Kanban workflow
+
+A basic workflow in Kanban looks like this:
+
+<div align="center">
+    <figure>
+        <img src="../images/project-methodology/1-3-kanban.jpg" alt="Kanban">
+    </figure>
+    <figcaption>Figure: Kanban</figcaption>
+</div>
+
+## Kanban values, principles and agenda
+
+Like Agile, Kanban also has values and principles.
+
+## Kanban values
+
+<div align="center">
+    <figure>
+        <img src="../images/project-methodology/1-3-kanbanvalues.png" alt="Kanban values">
+    </figure>
+    <figcaption>Figure: Kanban values</figcaption>
+</div>
+
+## Kanban principles
+
+<div align="center">
+    <figure>
+        <img src="../images/project-methodology/1-3-kanbanprinciples.png" alt="Kanban principles">
+    </figure>
+    <figcaption>Figure: Kanban principles</figcaption>
+</div>
+
+### The general practices of Kanban
+
+As Kanban is a workflow system, general practices are used to make the workflow visible and manageable. The general practices are as follows:
+
+- Visualise
+- Limit work in progress
+- Manage flow
+- Make policies explicit
+- Implement feedback loops
+- Improve collaboratively, evolve experimentally
+
+## Kanban roles
+
+Kanban has two specific roles, namely:
+
+<div align="center">
+    <figure>
+        <img src="../images/project-methodology/1-3-kanbanroles.png" alt="Kanban roles">
+    </figure>
+    <figcaption>Figure: Kanban roles</figcaption>
+</div>
+
+For example, imagine a Toyota Corolla workshop installing ten new doors onto various cars. When you only have five doors left in a pack, you use a Kanban card to write an order for another ten doors. By the time you have reached your last door in your first pack, you can be sure that you will have a pack of 10 new doors manufactured and ready to be used.
+
+In this way, no spare parts are lying around, creating cluttered warehouses for weeks or months. Kanban has allowed for the ability to scale down the amount of work in progress.
+
+## Differences between Scrum and Kanban
+
+Scrum and Kanban are both iterative processes which rely on workflows to manage and prioritise projects.
+
+However, there are a few differences between Scrum and Kanban, which are shown below:
+
+|                             | Scrum                                                      | Kanban                                                                          |
+| :-------------------------- | :--------------------------------------------------------- | :------------------------------------------------------------------------------ |
+| Roles & Responsibilities    | Predefined roles                                           | No predefined roles. Everyone assists as they're available                      |
+| Due Dates & Timelines       | Project is divided into sprints with a set time to deliver | Projects and work are delivered continuously                                    |
+| Delegation & Prioritization | Work is completed in batches, and not as the need arises   | Work is only assigned when the last task is completed                           |
+| Changes & Modifications     | No changes mid-sprint                                      | Changes happen as need arises, thus creating iterations                         |
+| Best for...                 | Best for teams whose objectives change over time           | Best for teams with stable and well-set priorities that hardly change over time |
+
+## User Stories, Epics, Themes and Features
+
+When planning a project, we must understand what needs to be done and why, which requires both a high-level and low-level view. Using _Themes_ and _Epics_ allow us to get a high-level view of our tasks, while features and user stories let us get more specific and detailed about exactly what must be achieved.
+
+### User story
+
+We covered user stories earlier when discussing functional specifications. In short, a user story is a short description - usually from a user to the system - describing what needs to be enhanced or fixed by the system. The user will describe it as:
+
+- Role of the user
+- What they want
+- Why they want it
+
+User stories are normally written down on sticky note-sized sheets. They are stuck on a board for everyone to see and are then discussed in detail.
+
+### Theme
+
+<div align="center">
+    <figure>
+        <img src="../images/project-methodology/1-3-theme.jpg" alt="Theme">
+    </figure>
+    <figcaption>Figure: Theme</figcaption>
+</div>
+
+A Theme is a collection of stories within a category and often has organisation-wide importance, and is generally quite broad in its focus. An example of a Theme might be ‘customer contact’.
+
+This theme can then be broken down into _Epics_.
+
+### Epic
+
+An epic is a large user story. The full requirement needs to be broken down into smaller parts for development. An example of an epic would be:
+
+> “As a customer, I can get in contact with the business via the website so that I can find out about the product.”
+
+### Feature
+
+A Feature is a distinct element of functionality that can provide business capabilities.
+
+Our Epic of getting in contact via the website can then be broken down into features like including a contact form or adding a live chat widget to the site. It generally takes many iterations to deliver a feature.
+
+### User Story
+
+A user story is a part of the Feature. By splitting a Feature into smaller stories, the user can give early feedback to the developers on issues quickly. The user stories can then be broken down further into tasks that the developers need to complete.
+
+### Understanding the language
+
+It should be noted that you may find some discrepancies online between user stories, epics, themes and features. Some refer to Features as the same as Epics, whereas others see features and user stories as the same. Ultimately, every individual or company will have a slightly different interpretation, but the above is a basic understanding of each concept.
+
+## Continuous Integration
+
+Continuous Integration (CI) is a development practice that developers use to integrate code into a shared repository several times a day. Usually, this is done within a testing environment. Once the developers check in their code, the check-in is verified by an automated [build](https://www.techopedia.com/definition/3759/build). This verification allows for problems or bugs to be detected early on.
+
+The benefits of CI are as follows:
+
+- No more time-consuming and tense integrations and builds
+- Increased visibility enabling better communication with the development team
+- Early detection of build problems and bugs
+
+> **📄 DOCUMENTATION**
+>
+> AWS docs: [Continuous integration](https://aws.amazon.com/devops/continuous-integration/).
+
+## Continuous Deployment
+
+Continuous deployment is deploying the latest, successful build into production - making it available to the users. Once a build has passed and is successful and user-tested, it can be deployed to production. This ensures that bug fixes to the users are dealt with quickly and will not slow down business processes.
+
+> **📄 DOCUMENTATION**
+>
+> IBM docs: [Continuous Deployment](https://www.ibm.com/cloud/learn/continuous-deployment).
+
+## Feature Branching
+
+Unlike continuous integration, feature branching is where a [branch](https://git-scm.com/book/en/v2/Git-Branching-Branches-in-a-Nutshell) is created from the master branch for a new feature. All developers will then code their separate tasks using this branch. You cannot merge a feature branch to the master branch if all developers are not done with their code. This will result in merge conflicts which will then have to be resolved.
+
+> **📄 DOCUMENTATION**
+>
+> IBM docs: [Manage your work by using Kanban](https://www.ibm.com/garage/method/practices/culture/practice-kanban-method/).
+
+---
+
+## Activities
+
+> 💻 **WATCH**
+>
+> - Video: [What is “Kanban” and how does it work?](https://www.linkedin.com/learning/becoming-a-product-manager/what-is-kanban-and-how-does-it-work?u=43268076) (2m 46s)
+> - Video: [Themes, Features, Epics and User Stories](https://www.linkedin.com/learning/agile-product-owner-role-foundations/themes-features-epics-and-user-stories-8951981?autoAdvance=true&autoSkip=false&autoplay=true&resume=false&u=43268076) (4m 45s)
+
+---
+
+## Lesson Task
+
+### Brief
+
+Gain a better understanding of Kanban by relaying its definition, values and practices in your own words.
+
+### Level 1 Process
+
+1. In your own words, define Kanban.
+2. List the values and the agenda of Kanban.
+
+### Level 2 Process
+
+1. Discuss the general practices of Kanban and include all role players, if any are involved.
+2. Draw a diagram of a simple workflow in the software development cycle.
diff --git a/packages/lms/src/routes/content/feu1/project-methodology/module-1/sdlc/+page.md b/packages/lms/src/routes/content/feu1/project-methodology/module-1/sdlc/+page.md
new file mode 100644
index 0000000..387b653
--- /dev/null
+++ b/packages/lms/src/routes/content/feu1/project-methodology/module-1/sdlc/+page.md
@@ -0,0 +1,144 @@
+---
+title: SDLC
+tags:
+  - Project Methodology
+type: Lesson
+---
+
+## Project Manager
+
+Before we dive into the Systems Development Life Cycle, it helps to understand what a project manager is and what role they play. A project manager’s role is to ensure that all stakeholders in the project are kept informed regularly about the project’s progress. The stakeholders can range from:
+
+- Executives
+- Business Head of Departments
+- Technical Heads of Departments
+- Financial Managers
+- Project Team
+
+As you can see from the above list, the stakeholders vary, and each stakeholder is only concerned with how the project affects their department. Therefore, a project manager needs to deliver understandable updates to all parties.
+
+It is typical for a project manager to hold weekly meetings involving all stakeholders that give an update on the project’s progress and report on any milestones met.
+
+The project manager’s key aspect is defining the deliverables to create corporate awareness relating to your project. Selecting the correct milestones for the project is of utmost importance as this is where all stakeholders agree to the project scope and the timeline of all deliverables.
+
+Once the project manager’s milestones have been agreed upon and signed off by all stakeholders, the next big challenge is to incorporate these milestones into the systems development life cycle.
+
+## Systems development life cycle (SDLC)
+
+Now that we know about the role of a typical project manager, let us see how the project manager’s role moves over to the systems development life cycle and just how important it is to plan a development project properly.
+
+Project management in the SDLC has 4 phases, namely:
+
+- Requirements
+- Design
+- Construction
+- Implementation
+
+Each of the different phases above has a role player who contributes to the successful execution of the project.
+
+## Requirements
+
+When planning a project, it’s vital to know what the requirements are for the project. What are the ‘must-haves’ for the project, and what are ‘nice-to-haves’? These requirements are gathered by talking to the stakeholders.
+
+### Produce Functional Specifications
+
+Once you have gathered the requirements, you will then compile a document known as a functional specification. The functional specification will contain all the necessary details for the developers to develop the system according to the customer’s requirements.
+
+A functional specification should tell the developers what to build and code, tell those testing the solution what it’s supposed to do, and let the client/stakeholder know what they will receive.
+
+There are a few ways of writing functional specifications, and we’ll discuss three approaches below.
+
+### System Must
+
+This approach sets the requirements for what the system must be able to do. This approach is a fairly clean and clear way of setting out requirements, but what it gains in clarity, it can lose a bit of nuance and can become somewhat ambiguous.
+
+For a contact form, the functional requirements might be:
+
+- The system must allow the user to input text.
+- The system must validate the email address.
+
+### Use case
+
+A use case puts functionalities into a series of steps which allows developers to get a more rounded perspective of the requirements. Often, ‘system must’ requirements are formulated into a use case.
+
+- A user arrives at the contact page and fills in the form. If the inputs are all valid, the data is sent to the contact inbox, and the user receives a message confirming the message has been sent.
+
+### User stories
+
+User stories give great insight into the user’s perspective for identifying functionalities. It uses a simple construction which makes it easy to access for developers and stakeholders alike and lets them decide what is and isn’t important for the user.
+
+A common construction of a user story is:
+
+“As a [ type of user ], I can [ perform an action ] so that [ I can get a benefit ].”
+
+- As a potential customer, I can send valid form data so that I can find out more about the product
+
+## Design
+
+Once the functional specifications are set, it needs to be decided how to develop the solution for the requirements.
+
+Developers create a Technical Specification to show all the technical requirements needed to achieve the project. It lists the layout of the architectural design, hardware, software and any special coding requirements. A technical specification should be updated regularly as all developers view it.
+
+This document is created to show how the system will be designed and developed and becomes very useful when many systems are being integrated.
+
+As part of their planning, the developers and system architects will discuss the impact on new and existing infrastructure and databases and use UML (Unified Modelling Language) to visualise the system’s design.
+
+## Construction
+
+### Build System Components
+
+Once we have completed the functional and technical requirements for the system design, we can start developing. The developer will now use the functional and technical specifications to build the system based on the requirements.
+
+### System Testing
+
+Once the developer has completed the development, the developer will do systems testing to ensure that the solution they built is working. This testing is done before the developer hands the system over to the testers, who will perform complete testing.
+
+It is good practice for the developer to test the solution while they are developing to fix any bugs which might be found and can then be fixed right there and then. It is also good practice for the developer to test the solution with the business analyst, which will ensure that the requirements have been met.
+
+### Produce Technical Documentation
+
+Once the developer has finalised the development and development testing, they will create or update the technical documentation. This is updated regularly as system and code changes are done. This is a very good document to have as any developer can use it as a point of reference for developing and allowing the developer to understand the system better.
+
+## Implementation
+
+During the Implementation phase, the product is created. This means the product finally becomes tangible, and this can be an exciting milestone for the customer. This phase includes testing and installation - all while following the technical specification document.
+
+## SDLC Methodologies
+
+The Systems Development Life Cycle(SDLC) can be categorised into different methodologies/processes. The methodologies include:
+
+- [Waterfall](https://www.projectmanager.com/guides/waterfall-methodology)
+- [V-Models](https://www.javatpoint.com/software-engineering-v-model)
+- Agile
+- Prototyping
+- Iterative and Incremental development
+- etc.
+
+Most modern software development processes can be vaguely classified as Agile. Hence we explore Agile Methodology.
+
+## Activity
+
+📖 **READ**
+
+- [The Seven Phases of the System-Development Life Cycle](https://www.betsol.com/blog/7-stages-of-sdlc-how-to-keep-development-teams-running/)
+- [What Goes Into a Functional Specification?](http://www.bridging-the-gap.com/functional-specification/)
+- [How To Write User Stories, Epics, & Personas](https://www.freecodecamp.org/news/how-and-why-to-write-great-user-stories-f5a110668246/)
+- [SDLC Methodologies](https://en.wikipedia.org/wiki/Software_development_process)
+
+---
+
+## Lesson Task
+
+### Brief
+
+Project management and the SDLC can sometimes be an overwhelming mass of information. Use this task to better understand these two concepts by creating clear templates and answers that you can understand for yourself.
+
+### Level 1 Process
+
+1. Create a template for a project management plan according to the SDLC that is easy for you to understand.
+2. Create a template for a functional specification.
+
+### Level 2 Process
+
+1. Briefly describe the role of the project manager.
+2. Briefly describe the role of a business analyst.
diff --git a/packages/lms/src/routes/content/feu1/project-methodology/module-1/trello/+page.md b/packages/lms/src/routes/content/feu1/project-methodology/module-1/trello/+page.md
new file mode 100644
index 0000000..21f5f38
--- /dev/null
+++ b/packages/lms/src/routes/content/feu1/project-methodology/module-1/trello/+page.md
@@ -0,0 +1,62 @@
+---
+title: Trello
+tags:
+  - Project Methodology
+type: Lesson
+---
+
+## Introduction
+
+Trello is:
+
+- A popular and valuable project management tool.
+- Simple and easy to follow.
+- Great for working with increasing communication about who in a team is doing what.
+
+Start by signing up for a free account on [https://trello.com](https://trello.com/)
+
+## Trello
+
+#### Boards
+
+A board is usually set up for a project, which could be a short-term or ongoing project.
+
+An example of a board might be ‘Build Website for Pizza Palace’, or if you use Trello to keep track of personal tasks, ‘DIY Projects’.
+
+You can add team members to a board and decide which team members are a part of which board.
+
+#### Lists
+
+Lists keep cards organised so that you know where each task is in the process. Examples of a set of lists might be To Do, Doing, and Done. As the project progresses, you will move cards between the lists.
+
+#### Cards
+
+Cards are individual tasks that need to be completed in the project.
+
+These tasks:
+
+- can be assigned members who oversee that task.
+- can be given a due date for when it needs to be completed.
+- can be descriptions and labels to keep track of the card content.
+
+> **📄 DOCUMENTATION**
+>
+> Trello docs: [Trello 101](https://trello.com/guide/trello-101).
+
+### Simplicity
+
+The setup with Trello is straightforward, and there is not much more that you need to know about working with it. If you are interested in learning about some of the advanced features, [watch this video on LinkedIn Learning](https://www.linkedin.com/learning/trello-for-agile-teams/work-collaboratively-in-agile-teams-with-trello?u=43268076). This is not, however, a requirement. The beauty of Trello is its simplicity and how quickly it can help you to organise a project.
+
+## Activity
+
+💻 **WATCH**
+
+<iframe src="https://player.vimeo.com/video/455459271?h=33fb9f4c14&title=0&byline=0&portrait=0" width="640" height="313" frameborder="0" allow="autoplay; fullscreen; picture-in-picture" allowfullscreen></iframe>
+
+## Lesson Task
+
+### Brief
+
+Make a Trello board for a personal project or tasks that you need to keep track of in your life. It could be something like DIY projects, a meal plan, or a website you’ve wanted to build. It’s up to you.
+
+Sign up for a Trello account, and create a board and tasks for the project. You can consider setting deadlines for tasks and assigning members to tasks.
diff --git a/packages/lms/src/routes/content/feu1/semester-project-1/+page.md b/packages/lms/src/routes/content/feu1/semester-project-1/+page.md
new file mode 100644
index 0000000..85cd5a8
--- /dev/null
+++ b/packages/lms/src/routes/content/feu1/semester-project-1/+page.md
@@ -0,0 +1,50 @@
+---
+title: Semester Project 1
+tags:
+  - Semester Project 1
+type: Assessment
+previous: Project Methodology
+---
+
+## Brief
+
+An interactive science museum called the Community Science Museum is opening in your town/city. Its core target audience is primary and middle school children (ages 7-15) and families with young children. The museum wants an informative, appealing website to attract middle school pupils and their parents. The site should appeal to youngsters without pandering; it should take for granted that the audience is curious and intelligent. The website should be informative and engaging, encouraging viewers to visit the museum. The website should be responsive and easy to use on various devices.
+
+You have been provided media assets as text and images (see link under Resources). It is for you to decide how these will be used in terms of presentation, hierarchy, and design.
+
+## Project Description
+
+Based on the first-semester curriculum, the semester project should reflect the student’s creative and technical knowledge and skills. This includes design principles, project management, communication technology, and development with HTML/CSS.
+
+**Target Audience & Design**: The target audience should be carefully considered, and the proposed design should reflect this. A website prototype should be made using your chosen software (Adobe XD, Figma etc.)
+
+**Final Product**: A URL and zip file with the final website should be submitted. The site should be tested on a variety of devices before final delivery. The student is responsible for setting up their web host or using Netlify to deploy the site. GitHub repositories should be set to private.
+
+**Report**: Submit a report discussing the design and technical aspects of the project, as well as how guidelines for WCAG, SEO and content management were handled. A template for this report is provided under ‘Resources’.
+
+The duration of the Semester Project is four weeks (full-time) and eight weeks (part-time).
+
+## Requirements
+
+1. The site must have a design that appeals to the target audience.
+2. The site must have at least 4-6 pages.
+3. Compositional principles, typography, and colour schemes must be considered.
+4. Your HTML should be semantic and neatly indented.
+5. The site should use external CSS style sheets which follow the DRY principle.
+6. The site should download quickly and not be overly “heavy”. Images should be at most 200kb.
+7. The site should consider WCAG principles, especially regarding hierarchy, navigation, and colour usage.
+8. The site should be responsive, attractive, and easy to use on various devices.
+9. The site should show consideration for content strategy and SEO (consider your use of meta tags and alt text).
+10. The GitHub repo for the project should be set to private. You do not need to submit this with your project.
+
+## Submission
+
+- A link to the live version of the site must be submitted as ‘online text.’
+- A link to the site’s prototype must be submitted as ‘online text.’
+- A zip file of the whole project should be delivered.
+- A report must be included with the project delivery. Ensure the report is a PDF and follows the correct naming conventions. Please use the report template provided here.
+
+## Resources
+
+- [SemesterProject1.zip](../resources/SemesterProject1.zip) (text and images for use on-site). Feel free to add or remove images and text as you see fit to work for your website. The resources are here for you to use at your discretion and to save you some time writing copy and finding images.
+- [Report Template](../resources/FEU1reporttemplate.docx)
diff --git a/packages/lms/src/routes/content/feu1/semester-project-1/marking-criteria/+page.md b/packages/lms/src/routes/content/feu1/semester-project-1/marking-criteria/+page.md
new file mode 100644
index 0000000..2ac4488
--- /dev/null
+++ b/packages/lms/src/routes/content/feu1/semester-project-1/marking-criteria/+page.md
@@ -0,0 +1,36 @@
+---
+title: Marking Criteria
+tags:
+  - Semester Project 1
+type: Lesson
+---
+
+## Introduction
+
+This document is designed to inform both students and markers about the expectations of this assignment. This project is graded out of 20 points, with 1 point awarded for each criterion unless otherwise stated:
+
+## Design
+
+- [ ] User Interface
+- [ ] User Experience
+
+## WCT
+
+- [ ] Colors are WCAG compliant
+- [ ] Images have alt text
+- [ ] Project is well organised and files are well formatted
+
+## HTML and CSS
+
+- [ ] HTML is bug-free and semantic (3)
+- [ ] CSS follows DRY principles (2)
+- [ ] Website is responsive (4)
+- [ ] Each page has a unique title
+- [ ] Each page has a unique description
+- [ ] Each page has a unique h1
+- [ ] Images are below 200kb
+
+## Project Methodology
+
+- [ ] Report
+- [ ] Project is successfully completed
diff --git a/packages/lms/src/routes/search/+page.svelte b/packages/lms/src/routes/search/+page.svelte
index d5a3b12..a3cdb5d 100644
--- a/packages/lms/src/routes/search/+page.svelte
+++ b/packages/lms/src/routes/search/+page.svelte
@@ -17,12 +17,11 @@
 
 	let searchQuery = '';
 	let rawSearchQuery = '';
-	let reversedSearchQuery = {};
 	let searchQueryExact = false;
 	let searchTypes: string[] = [];
-	let searchTagsString: string = '';
+	let searchTagsString = '';
 	let searchTags: string[] = [];
-	let searchExclusions: string = '';
+	let searchExclusions = '';
 	let searchResults: EntityMeta[] = [];
 	let selectedInstitution = 'all';
 	let query = '';
@@ -63,13 +62,6 @@
 	}
 
 	onMount(async () => {
-		// fetch files if not already fetched
-		if ($files === null) {
-			const response = await fetch('/api/parseMarkdown');
-			const data = await response.json();
-			files.set(data);
-		}
-
 		// Parse query string if present, update values and get search results
 		if (query.trim() !== '') {
 			rawSearchQuery = query;
@@ -79,6 +71,8 @@
 			searchTypes = processedQuery.filters.types;
 			searchTags = processedQuery.filters.tags;
 			searchTagsString = searchTags.join(', ');
+			console.log($files);
+			
 			if ($files !== null) {
 				// check if institution exists
 				isMatch = $files.some(
@@ -172,7 +166,7 @@
 						/>
 					</label>
 
-					{#if $files?.length > 1}
+					{#if $files && $files?.length > 1}
 						<label class="label font-medium" for="institution-options">Institution</label>
 						<select class="select mt-1 rounded-md sm:w-3/4" bind:value={selectedInstitution} id="institution-options">
 							<option value="all">All</option>
@@ -284,11 +278,12 @@
 	{:else}
 		<h2 class="h2 mt-10 mb-8">No Results</h2>
 	{/if}
+
 	<div class="results-container">
-		{#if searchResults.length > 0}
+		{#if searchResults && searchResults.length}
 			<div class="grid sm:grid-cols-2 gap-4">
-				{#each searchResults as result}
-					<Card {result} />
+				{#each searchResults as {title, type, browserPath, tags}}
+					<Card {title} {type} {browserPath} {tags} />
 				{/each}
 			</div>
 		{/if}
diff --git a/packages/lms/src/routes/tags/[tag]/+page.svelte b/packages/lms/src/routes/tags/[tag]/+page.svelte
index e1d111c..2260b85 100644
--- a/packages/lms/src/routes/tags/[tag]/+page.svelte
+++ b/packages/lms/src/routes/tags/[tag]/+page.svelte
@@ -1,28 +1,28 @@
 <script lang="ts">
-	import { page } from '$app/stores';
-	import { onMount } from 'svelte';
-	import type { EntityMeta } from '@mollify/types';
-	import Card from '$lib/components/cards/Card.svelte';
+  import { page } from '$app/stores';
+  import { onMount } from 'svelte';
+  import type { EntityMeta } from '@mollify/types';
+  import Card from '$lib/components/cards/Card.svelte';
 
-	let data: EntityMeta[] = [];
-	onMount(async () => {
-		const tag = $page.params.tag;
-		const tagFiles = await fetch(`/api/tags`, {
-			method: 'POST',
-			headers: {
-				'Content-Type': 'application/json'
-			},
-			body: JSON.stringify({ tag })
-		});
-		data = await tagFiles.json();
-	});
+  let data: EntityMeta[] = [];
+  onMount(async () => {
+    const tag = $page.params.tag;
+    const tagFiles = await fetch(`/api/tags`, {
+      method: 'POST',
+      headers: {
+        'Content-Type': 'application/json'
+      },
+      body: JSON.stringify({ tag })
+    });
+    data = await tagFiles.json();
+  });
 </script>
 
 <h1>Content Results Including Tag: {$page.params.tag}</h1>
 <div class="grid sm:grid-cols-2 gap-4">
-	{#if data.length > 0}
-		{#each data as result}
-			<Card {result} />
-		{/each}
-	{/if}
+  {#if data.length > 0}
+    {#each data as { title, tags, type, browserPath }}
+      <Card {title} {tags} {type} {browserPath} />
+    {/each}
+  {/if}
 </div>
diff --git a/packages/lms/static/testmarkdown.md b/packages/lms/src/routes/test/+page.md
similarity index 90%
rename from packages/lms/static/testmarkdown.md
rename to packages/lms/src/routes/test/+page.md
index 1396053..2763d9d 100644
--- a/packages/lms/static/testmarkdown.md
+++ b/packages/lms/src/routes/test/+page.md
@@ -1,3 +1,7 @@
+---
+title: Test Page
+---
+
 # Heading 1
 
 ## Heading 2
@@ -58,12 +62,6 @@ with multiple lines
 | Row 1, Column 1 | Row 1, Column 2 |
 | Row 2, Column 1 | Row 2, Column 2 |
 
-Here is some inline math: $\sqrt{a^2 + b^2}$. And here is some math in a separate line:
-
-$$
-\int_0^\infty e^{-x^2} dx = \frac{\sqrt{\pi}}{2}
-$$
-
 <!-- Custom callout examples -->
 
 > ⛔ Title
diff --git a/packages/lms/public/audio/no_audio/no-audio.mp3 b/packages/lms/static/audio/no_audio/no-audio.mp3
similarity index 100%
rename from packages/lms/public/audio/no_audio/no-audio.mp3
rename to packages/lms/static/audio/no_audio/no-audio.mp3
diff --git a/packages/lms/public/audio/silly_stuff/female_scream.wav b/packages/lms/static/audio/silly_stuff/female_scream.wav
similarity index 100%
rename from packages/lms/public/audio/silly_stuff/female_scream.wav
rename to packages/lms/static/audio/silly_stuff/female_scream.wav
diff --git a/packages/lms/public/audio/silly_stuff/horse-neigh.mp3 b/packages/lms/static/audio/silly_stuff/horse-neigh.mp3
similarity index 100%
rename from packages/lms/public/audio/silly_stuff/horse-neigh.mp3
rename to packages/lms/static/audio/silly_stuff/horse-neigh.mp3
diff --git a/packages/lms/svelte.config.js b/packages/lms/svelte.config.js
index 9550031..9f8cb9b 100644
--- a/packages/lms/svelte.config.js
+++ b/packages/lms/svelte.config.js
@@ -1,43 +1,44 @@
 import preprocess from 'svelte-preprocess';
-import adapter from '@sveltejs/adapter-auto';
+import node from '@sveltejs/adapter-node';
 import { vitePreprocess } from '@sveltejs/kit/vite';
 import { mdsvex } from 'mdsvex';
 import callouts from 'remark-emoji-callout';
 import gfm from 'remark-gfm';
-import { createTagLinks } from './src/lib/utils/remarkPlugins/createTagLinks.js';
+import path from 'path';
+import { fileURLToPath } from 'url';
+const __filename = fileURLToPath(import.meta.url);
+const __dirname = path.dirname(__filename);
 
 /** @type {import('@sveltejs/kit').Config} */
 const config = {
-	// Consult https://kit.svelte.dev/docs/integrations#preprocessors
-	// for more information about preprocessors
-	preprocess: [
-		vitePreprocess(),
-		mdsvex({
-			extensions: ['.md', '.svx'],
-			remarkPlugins: [
-				gfm,
-				createTagLinks,
-				callouts,
-				{
-					dataAttribute: 'custom-callout',
-					titleTextTagName: 'span',
-					iconTagName: 'span'
-					// ...
-				}
-			]
-		}),
-		preprocess({
-			postcss: true
-		})
-	],
-	extensions: ['.svelte', '.md'],
+  // Consult https://kit.svelte.dev/docs/integrations#preprocessors
+  // for more information about preprocessors
+  preprocess: [
+    vitePreprocess(),
+    mdsvex({
+      layout: path.join(__dirname, './src/lib/components/ui/Layout.svelte'),
+      extensions: ['.md', '.svx'],
+      remarkPlugins: [
+        gfm,
+        callouts,
+        {
+          dataAttribute: 'custom-callout',
+          titleTextTagName: 'span',
+          iconTagName: 'span'
+          // ...
+        }
+      ]
+    }),
+    preprocess({
+      postcss: true
+    })
+  ],
+  extensions: ['.svelte', '.md'],
 
-	kit: {
-		// adapter-auto only supports some environments, see https://kit.svelte.dev/docs/adapter-auto for a list.
-		// If your environment is not supported or you settled on a specific environment, switch out the adapter.
-		// See https://kit.svelte.dev/docs/adapters for more information about adapters.
-		adapter: adapter()
-	}
+  kit: {
+    // See https://kit.svelte.dev/docs/adapters for more information about adapters.
+    adapter: node()
+  }
 };
 
 export default config;
diff --git a/packages/lms/tailwind.config.cjs b/packages/lms/tailwind.config.cjs
index 945076a..cb3f59c 100644
--- a/packages/lms/tailwind.config.cjs
+++ b/packages/lms/tailwind.config.cjs
@@ -1,25 +1,25 @@
 /** @type {import('tailwindcss').Config}*/
 const config = {
-	darkMode: 'class',
-	content: [
-		'./src/**/*.{html,js,svelte,ts}',
-		require('path').join(require.resolve('@skeletonlabs/skeleton'), '../**/*.{html,js,svelte,ts}'),
+  darkMode: 'class',
+  content: [
+    './src/**/*.{html,js,svelte,ts}',
+    require('path').join(require.resolve('@skeletonlabs/skeleton'), '../**/*.{html,js,svelte,ts}'),
 
-		'../**/*.{html,js,svelte,ts}',
-		'./pages/**/*.{html,js,ts,svelte}',
-		'./components/**/*.{html,js,ts,svelte}',
-		'../../packages/ui/**/*.{html,js,ts,svelte}'
-	],
+    '../**/*.{html,js,svelte,ts}',
+    './pages/**/*.{html,js,ts,svelte}',
+    './components/**/*.{html,js,ts,svelte}',
+    '../../packages/ui/**/*.{html,js,ts,svelte}'
+  ],
 
-	theme: {
-		extend: {}
-	},
+  theme: {
+    extend: {}
+  },
 
-	plugins: [
-		...require('@skeletonlabs/skeleton/tailwind/skeleton.cjs')(),
-		require('@tailwindcss/typography'),
-		require('@tailwindcss/forms')
-	]
+  plugins: [
+    ...require('@skeletonlabs/skeleton/tailwind/skeleton.cjs')(),
+    require('@tailwindcss/typography'),
+    require('@tailwindcss/forms')
+  ]
 };
 
 module.exports = config;
diff --git a/packages/lms/tests/test.ts b/packages/lms/tests/test.ts
deleted file mode 100644
index 8b13789..0000000
--- a/packages/lms/tests/test.ts
+++ /dev/null
@@ -1 +0,0 @@
-
diff --git a/packages/lms/tsconfig.json b/packages/lms/tsconfig.json
index 6ae0c8c..794b95b 100644
--- a/packages/lms/tsconfig.json
+++ b/packages/lms/tsconfig.json
@@ -1,17 +1,17 @@
 {
-	"extends": "./.svelte-kit/tsconfig.json",
-	"compilerOptions": {
-		"allowJs": true,
-		"checkJs": true,
-		"esModuleInterop": true,
-		"forceConsistentCasingInFileNames": true,
-		"resolveJsonModule": true,
-		"skipLibCheck": true,
-		"sourceMap": true,
-		"strict": true
-	}
-	// Path aliases are handled by https://kit.svelte.dev/docs/configuration#alias
-	//
-	// If you want to overwrite includes/excludes, make sure to copy over the relevant includes/excludes
-	// from the referenced tsconfig.json - TypeScript does not merge them in
+  "extends": "./.svelte-kit/tsconfig.json",
+  "compilerOptions": {
+    "allowJs": true,
+    "checkJs": true,
+    "esModuleInterop": true,
+    "forceConsistentCasingInFileNames": true,
+    "resolveJsonModule": true,
+    "skipLibCheck": true,
+    "sourceMap": true,
+    "strict": true
+  }
+  // Path aliases are handled by https://kit.svelte.dev/docs/configuration#alias
+  //
+  // If you want to overwrite includes/excludes, make sure to copy over the relevant includes/excludes
+  // from the referenced tsconfig.json - TypeScript does not merge them in
 }
diff --git a/packages/lms/vite.config.ts b/packages/lms/vite.config.ts
index f59603a..4b24ead 100644
--- a/packages/lms/vite.config.ts
+++ b/packages/lms/vite.config.ts
@@ -2,13 +2,13 @@ import { sveltekit } from '@sveltejs/kit/vite';
 import { defineConfig } from 'vitest/config';
 
 export default defineConfig({
-	server: {
-		fs: {
-			allow: ['public/audio', '../../@sveltejs/kit/src/runtime/client'] // add your directory here
-		}
-	},
-	plugins: [sveltekit()],
-	test: {
-		include: ['src/**/*.{test,spec}.{js,ts}']
-	}
+  server: {
+    fs: {
+      allow: ['public/audio', '../../@sveltejs/kit/src/runtime/client'] // add your directory here
+    }
+  },
+  plugins: [sveltekit()],
+  test: {
+    include: ['src/**/*.{test,spec}.{js,ts}']
+  }
 });
diff --git a/packages/molly/src/routes/+server.ts b/packages/molly/src/routes/+server.ts
index 537eab4..dd007dd 100644
--- a/packages/molly/src/routes/+server.ts
+++ b/packages/molly/src/routes/+server.ts
@@ -1,6 +1,6 @@
-import { OPENAI_TOKEN_LIMIT, OPENAI_API_KEY } from "$env/static/private";
-import MollyAI from "$lib/server/openai";
+// import { OPENAI_TOKEN_LIMIT, OPENAI_API_KEY } from "$env/static/private";
+// import MollyAI from "$lib/server/openai";
 
-const molly = new MollyAI(OPENAI_API_KEY, Number(OPENAI_TOKEN_LIMIT));
+// const molly = new MollyAI(OPENAI_API_KEY, Number(OPENAI_TOKEN_LIMIT));
 
-export const GET = molly.handlers.chatCompletion.GET;
\ No newline at end of file
+// export const GET = molly.handlers.chatCompletion.GET;
\ No newline at end of file
diff --git a/packages/tts/lib/generateAudio.ts b/packages/tts/lib/generateAudio.ts
index 4d9ebc5..3872f50 100644
--- a/packages/tts/lib/generateAudio.ts
+++ b/packages/tts/lib/generateAudio.ts
@@ -19,7 +19,7 @@ export async function generateAudio(content: string, slug: string, filepath: str
   // Check if file already exists
   if (fs.existsSync(filePath)) {
     if (!replace) {
-      return JSON.stringify({ file: `${slug}.mp3`, url: `/public/audio/${slug}.mp3` });
+      return JSON.stringify({ file: `${slug}.mp3`, url: `/audio/${slug}.mp3` });
     }
   }
 
@@ -35,9 +35,9 @@ export async function generateAudio(content: string, slug: string, filepath: str
     } else {
       console.log("creation error", response.status);
       if (fs.existsSync(filePath)) {
-        return JSON.stringify({ error: "Bad request, creation failed", url: `/public/audio/${slug}.mp3`, response });
+        return JSON.stringify({ error: "Bad request, creation failed", url: `/audio/${slug}.mp3`, response });
       }
-      return JSON.stringify({ error: "Bad request, creation failed", url: `/public/audio/no_audio/no-audio.mp3`, response });
+      return JSON.stringify({ error: "Bad request, creation failed", url: `/audio/no_audio/no-audio.mp3`, response });
     }
 
     const arrayBuffer = await response.arrayBuffer();
@@ -49,7 +49,7 @@ export async function generateAudio(content: string, slug: string, filepath: str
       fs.mkdirSync(audioDir, { recursive: true });
     }
     await fs.promises.writeFile(path.join("public", "audio", `${file}.mp3`), buffer);
-    return JSON.stringify({ file: `${file}.mp3`, url: `/public/audio/${file}.mp3` });
+    return JSON.stringify({ file: `${file}.mp3`, url: `/audio/${file}.mp3` });
   } catch (error: any) {
     console.error("Error generating audio:", error);
   }
diff --git a/packages/tts/lib/getAudio.ts b/packages/tts/lib/getAudio.ts
index 7c95852..5694e7d 100644
--- a/packages/tts/lib/getAudio.ts
+++ b/packages/tts/lib/getAudio.ts
@@ -10,8 +10,8 @@ export async function getAudio(slug: string) {
   const filePath = path.join("public", "audio", `${slug}.mp3`);
   // Check if file already exists
   if (fs.existsSync(filePath)) {
-    return JSON.stringify({ file: `${slug}.mp3`, url: `/public/audio/${slug}.mp3`, exists: true });
+    return JSON.stringify({ file: `${slug}.mp3`, url: `/audio/${slug}.mp3`, exists: true });
   } else {
-    return JSON.stringify({ error: "File Not Found", url: `/public/audio/no_audio/no-audio.mp3`, exists: false });
+    return JSON.stringify({ error: "File Not Found", url: `/audio/no_audio/no-audio.mp3`, exists: false });
   }
 }
diff --git a/packages/tts/package.json b/packages/tts/package.json
index 8a32288..f3b9c3a 100644
--- a/packages/tts/package.json
+++ b/packages/tts/package.json
@@ -11,10 +11,7 @@
   "main": "dist/index.js",
   "types": "dist/index.d.ts",
   "exports": {
-    ".": {
-      "types": "./dist/index.d.ts",
-      "svelte": "./dist/index.js"
-    }
+    ".": "./dist/index.js"
   },
   "directories": {
     "lib": "lib"
